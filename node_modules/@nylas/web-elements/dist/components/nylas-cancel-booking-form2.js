import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { b as instance, a as debug } from './utils.js';
import { d as defineCustomElement$6 } from './button-component2.js';
import { d as defineCustomElement$5 } from './calendar-cancel.js';
import { d as defineCustomElement$4 } from './info.js';
import { d as defineCustomElement$3 } from './loading.js';
import { d as defineCustomElement$2 } from './textarea-component2.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const nylasCancelBookingFormCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;display:block;width:400px;font-family:var(--nylas-font-family)}.nylas-cancel-booking-form{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}.nylas-cancel-booking-form form{width:100%}.nylas-cancel-booking-form__title{font-size:18px;font-weight:600;margin-bottom:0;color:var(--nylas-base-900)}.nylas-cancel-booking-form__description{font-size:16px;font-style:normal;font-weight:400;line-height:140%;color:var(--nylas-base-600);padding-bottom:1.25rem}.nylas-cancel-booking-form__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}.footer{display:grid;grid-template-columns:1fr 1fr;width:100%;padding-top:1.25rem;gap:1rem;border-top:1px solid var(--nylas-base-200);margin-top:1.25rem}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelBookingForm = proxyCustomElement(class NylasCancelBookingForm extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.goBackButtonClicked = createEvent(this, "goBackButtonClicked", 7);
        this.cancelBookingFormSubmitted = createEvent(this, "cancelBookingFormSubmitted", 7);
        this.triggerValidation = createEvent(this, "triggerValidation", 7);
        this.cancelBookedEventError = createEvent(this, "cancelBookedEventError", 7);
        this.cancelBookingFormError = createEvent(this, "cancelBookingFormError", 7);
        this.handleGoBackClicked = () => {
            this.goBackButtonClicked.emit();
        };
        this.handleSubmitCancelBooking = (event) => {
            this.triggerValidation.emit({});
            event.preventDefault();
            if (!this.cancellationReason) {
                this.cancellationError = instance.t('cancellationErrorMessage');
                this.cancelBookingFormError.emit({ title: instance.t('cancelBokingFormError'), description: instance.t('cancellationErrorMessage') });
                return;
            }
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            if (this.selectedTimeslot && minCancellationNotice) {
                const startTime = new Date(this.selectedTimeslot?.start_time);
                const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
                if (dateTillCancellation < new Date().getTime()) {
                    this.cancelBookedEventError.emit({
                        error: {
                            title: instance.t('cancellationErrorTitle'),
                            message: instance.t('minimumCancellationNoticeErrorMessage', { minCancellationNotice }),
                        },
                    });
                    return;
                }
            }
            debug(`[nylas-cancel-booking-form] Cancel booking form submitted with reason: ${this.cancellationReason}`);
            const errorHandler = (error) => {
                this.cancelBookedEventError.emit(error);
            };
            if (this.cancelBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.cancelBookingId, action: 'cancel', reason: this.cancellationReason, errorHandler });
            }
            else if (this.rejectBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.rejectBookingId, action: 'reject', reason: this.cancellationReason, errorHandler });
            }
        };
        this.cancelBookingId = undefined;
        this.rejectBookingId = undefined;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
        this.eventInfo = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.cancellationReason = '';
        this.cancellationError = '';
        this.cancellationPolicy = this.configSettings?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    configSettingsChangedHandler(newValue) {
        this.cancellationPolicy = newValue?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        debug(`[nylas-cancel-booking-form] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancel-booking-form] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancel-booking-form] Component did load`);
        if (!this.cancelBookingId) {
            console.warn(`[nylas-cancel-booking-form] No booking ID provided, "cancelBookingId" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        debug(`[nylas-cancel-booking-form] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    handleNylasFormInputChanged(event) {
        this.triggerValidation.emit({});
        if (event.detail.name === 'cancel-reason') {
            this.cancellationReason = event.detail.value;
            this.cancellationError = event.detail.error;
        }
    }
    render() {
        return (h(Host, { key: 'a883955600837a2006648886cc55ac8bd0ea0076', part: "ncbf" }, h("div", { key: '868e3b711cd18b2fabc29d5d179255ed1d9ba0dc', class: "nylas-cancel-booking-form", part: "ncbf__card" }, h("div", { key: '20dabbd57825f213f7a7f1700de22cd8228409b8', class: "nylas-cancel-booking-form__calendar-icon", part: "ncbf__icon" }, h("calendar-cancel-icon", { key: 'd6bab72a846359fdec0e0ee30c23c4ab41f33a8e' })), h("h3", { key: 'ac741c5913c7977bb411f6dec7ca25ce498a875a', class: "nylas-cancel-booking-form__title", part: "ncbf__title" }, instance.t('cancelBookingTitle')), h("div", { key: '4938ceba259171a7b73465ee1979f7f42d99110f', class: "nylas-cancel-booking-form__description", part: "ncbf__description" }, !this.configSettings?.scheduler?.cancellation_policy ? `${instance.t('cancelBookingMessage')}` : this.cancellationPolicy), h("form", { key: '7b33c284b2c9ee3aa92b5faf1f9b25acb5cacd2e', onSubmit: this.handleSubmitCancelBooking }, h("textarea-component", { key: 'c2cdfac338d6af301c84ce5120d79e0eba92f56a', id: "cancel-reason", name: "cancel-reason", required: true, label: instance.t('reasonForCancellation'), class: this.cancellationError ? 'error' : '', part: "ncbf__reason-textarea", defaultValue: this.cancellationReason }), h("div", { key: '675ccb5dc874a97d05cacde94fec4b17c95c2e07', class: "footer" }, h("button-component", { key: '2dcba1cec03a6f21766dc1bc3f10aa8790dcc022', variant: 'destructive', class: "cancel", type: "submit", part: "ncbf__button-cta", disabled: this.isLoading }, instance.t('cancelBookingButton')), !!this.eventInfo && (h("button-component", { variant: 'basic', class: "back", part: "ncbf__button-outline", onClick: this.handleGoBackClicked }, instance.t('goBackButton'))))))));
    }
    get host() { return this; }
    static get watchers() { return {
        "configSettings": ["configSettingsChangedHandler"],
        "themeConfig": ["themeConfigChanged"]
    }; }
    static get style() { return nylasCancelBookingFormCss; }
}, [1, "nylas-cancel-booking-form", {
        "cancelBookingId": [1, "cancel-booking-id"],
        "rejectBookingId": [1, "reject-booking-id"],
        "selectedTimeslot": [16],
        "configSettings": [16],
        "eventInfo": [16],
        "isLoading": [4, "is-loading"],
        "themeConfig": [8, "theme-config"],
        "cancellationReason": [32],
        "cancellationError": [32],
        "cancellationPolicy": [32]
    }, [[0, "nylasFormInputChanged", "handleNylasFormInputChanged"]], {
        "configSettings": ["configSettingsChangedHandler"],
        "themeConfig": ["themeConfigChanged"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-cancel-booking-form',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.eventInfo', 'eventInfo'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.cancelBookingId', 'cancelBookingId'],
            ['scheduler.rejectBookingId', 'rejectBookingId'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            cancelBookingFormSubmitted: async (event, nylasSchedulerConnector) => {
                const { action, errorHandler } = event.detail;
                if (action === 'cancel') {
                    const result = await nylasSchedulerConnector.scheduler.cancelBooking(event.detail.bookingId, event.detail.reason);
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
                else if (action === 'reject') {
                    const result = await nylasSchedulerConnector.scheduler.updateBooking({
                        bookingId: event.detail.bookingId,
                        status: 'cancelled',
                        reason: event.detail.reason,
                    });
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
            },
            goBackButtonClicked: async (event, nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'goBackButtonClicked', event.detail);
                nylasSchedulerConnector.scheduler.goBack();
            },
            cancelBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookedEventError', event.detail);
            },
            cancelBookingFormError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookingFormError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancelBookingForm.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-cancel-booking-form", "button-component", "calendar-cancel-icon", "info-icon", "loading-icon", "textarea-component", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-cancel-booking-form":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasCancelBookingForm);
            }
            break;
        case "button-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "calendar-cancel-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "loading-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "textarea-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasCancelBookingForm as N, defineCustomElement as d };

//# sourceMappingURL=nylas-cancel-booking-form2.js.map