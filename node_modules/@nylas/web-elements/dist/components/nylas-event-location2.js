import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, b as instance, s as sanitize } from './utils.js';
import { P as PROVIDER_CONFERENCE_MAP, C as CONFERENCE_PROVIDER_MAP } from './constants.js';
import { d as defineCustomElement$a } from './chevron.js';
import { d as defineCustomElement$9 } from './google-meet.js';
import { d as defineCustomElement$8 } from './info.js';
import { d as defineCustomElement$7 } from './location.js';
import { d as defineCustomElement$6 } from './location-off.js';
import { d as defineCustomElement$5 } from './microsof-teams.js';
import { d as defineCustomElement$4 } from './search.js';
import { d as defineCustomElement$3 } from './select-dropdown2.js';
import { d as defineCustomElement$2 } from './toolitp-component.js';
import { d as defineCustomElement$1 } from './zoom.js';

const nylasEventLocationCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-location{display:flex;flex-direction:column;gap:4px;font-family:var(--nylas-font-family)}.nylas-event-location label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-location label span.label-icon{margin-left:4px}.nylas-event-location label span.label-icon tooltip-component{display:flex}.nylas-event-location span[slot=select-icon]{border-right:1px solid var(--nylas-base-200);padding:16px 0.75rem 16px 0.5rem;border-radius:var(--nylas-border-radius-2x);border-bottom-right-radius:0;border-top-right-radius:0;height:20px}.nylas-event-location div.location-input{display:grid;grid-template-columns:auto 1fr;width:100%;gap:0.5rem}@media screen and (max-width: 768px){.nylas-event-location div.location-input{grid-template-columns:1fr}}.nylas-event-location div.location-input input{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:12px 16px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-event-location select-dropdown{width:208px}@media screen and (max-width: 768px){.nylas-event-location select-dropdown{width:100%}}.nylas-event-location select-dropdown::part(sd_dropdown){width:100%}.nylas-event-location select-dropdown::part(sd_dropdown-content){left:calc(35px + 0.5rem)}.nylas-event-location select-dropdown::part(sd_dropdown-button){display:flex;justify-content:space-between;width:100%;border:1px solid var(--nylas-base-200);padding:0 0.5rem}.nylas-event-location select-dropdown::part(sd_dropdown-button-selected-label){display:inline-flex;align-self:center;padding:14px 0;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const labels = {
    none: 'None',
    custom: 'Custom location',
    google: 'Google Meet',
    microsoft: 'Microsoft Teams',
    zoom: 'Zoom Meeting',
};
const NylasEventLocation = proxyCustomElement(class NylasEventLocation extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.name = 'location';
        this.currentUser = undefined;
        this.userProvider = undefined;
        this.eventConferencing = undefined;
        this.conferenceProviders = undefined;
        this.selectedConfiguration = undefined;
        this.eventLocation = undefined;
        this.selectedLanguage = undefined;
        this.location = this.eventLocation ?? '';
        this.grantId = this.eventConferencing ? this.setDefaultGrantID(this.eventConferencing) : '';
        this.selectedLocationOption = undefined;
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.locationOptions = [
            { value: 'none', label: labels['none'], labelHTML: this.getLabelHTML('none') },
            { value: 'custom', label: labels['custom'], labelHTML: this.getLabelHTML('custom') },
        ];
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-location', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const configLocation = newValue?.event_booking?.location;
        const configConferencing = newValue?.event_booking?.conferencing;
        if (configConferencing?.provider) {
            this.selectedLocationOption = this.setDefaultLocationOption(configConferencing, configLocation ?? '');
            this.grantId = this.setDefaultGrantID(configConferencing);
            this.location = configLocation ? configLocation : '';
        }
        else if (configLocation) {
            this.selectedLocationOption = configLocation ? 'custom' : 'none';
            this.location = configLocation;
        }
        else {
            this.selectedLocationOption = 'none';
            this.location = '';
        }
    }
    currentUserChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'currentUserChangedHandler', newValue);
        if (newValue?.provider) {
            this.userProviderState = newValue?.provider;
            this.setLocationOptionsForProvider(this.userProviderState);
        }
    }
    conferenceProvidersChanged(newValue) {
        if (newValue?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        instance.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-event-location', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-location', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-event-location', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedLocationOption = this.setDefaultLocationOption(this.eventConferencing || null, this.eventLocation ?? '');
        }
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.setLocationOptionsForProvider(this.userProviderState);
        if (this.conferenceProviders?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    disconnectedCallback() {
        debug('nylas-event-location', 'disconnectedCallback');
    }
    nylasFormDropdownChangedHandler(event) {
        this.selectedLocationOption = event.detail.value;
        let payload;
        switch (this.selectedLocationOption) {
            case 'none':
                this.location = '';
                this.setFormValue('', this.name);
                this.valueChanged.emit({ value: '', name: this.name });
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'custom':
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'google':
                this.location = '';
                this.setFormValue('', this.name);
                const googleConfGrantId = this.conferenceProviders?.['google'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.google,
                    autocreate: googleConfGrantId
                        ? {
                            conf_grant_id: googleConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'microsoft':
                this.location = '';
                this.setFormValue('', this.name);
                const microsoftConfGrantId = this.conferenceProviders?.['microsoft'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.microsoft,
                    autocreate: microsoftConfGrantId
                        ? {
                            conf_grant_id: microsoftConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'zoom':
                this.location = '';
                this.setFormValue('', this.name);
                const zoomConfGrantId = this.conferenceProviders?.['zoom'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.zoom,
                    autocreate: zoomConfGrantId
                        ? {
                            conf_grant_id: zoomConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
        }
    }
    setLocationOptionsForProvider(provider) {
        switch (provider) {
            case 'google':
                if (!this.locationOptions.some(option => option.value === 'google')) {
                    this.locationOptions.push({ value: 'google', label: labels['google'], labelHTML: this.getLabelHTML('google') });
                }
                break;
            case 'microsoft':
                if (!this.locationOptions.some(option => option.value === 'microsoft')) {
                    this.locationOptions.push({ value: 'microsoft', label: labels['microsoft'], labelHTML: this.getLabelHTML('microsoft') });
                }
                break;
        }
    }
    setDefaultLocationOption(eventConferencing, eventLocation) {
        if (eventConferencing != null && eventConferencing?.provider != null && eventConferencing?.autocreate != null) {
            return CONFERENCE_PROVIDER_MAP[eventConferencing?.provider];
        }
        return eventLocation ? 'custom' : 'none';
    }
    setDefaultGrantID(eventConferencing) {
        if (eventConferencing != null && eventConferencing?.autocreate != null) {
            return eventConferencing?.autocreate?.conf_grant_id;
        }
        return '';
    }
    setFormValue(value, name) {
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(value, name);
        }
    }
    handleChange(event) {
        const value = sanitize(event.target.value);
        this.location = value;
        this.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    getIcon(location) {
        switch (location) {
            case 'none':
                return h("location-off-icon", null);
            case 'custom':
                return h("location-icon", null);
            case 'google':
                return h("google-meet-icon", null);
            case 'microsoft':
                return h("microsoft-teams-icon", null);
            case 'zoom':
                return h("zoom-icon", null);
        }
    }
    getLabelHTML(location) {
        return (h("span", { class: "location-label", style: {
                display: 'flex',
                alignItems: 'center',
                gap: '16px',
                width: '-webkit-fill-available',
            } }, this.getIcon(location), h("span", { class: "location-text", style: {
                fontSize: '14px',
                fontWeight: '400',
            } }, labels[location])));
    }
    render() {
        const defaultOption = typeof this.selectedLocationOption !== 'undefined' ? this.locationOptions.find(i => i.value == this.selectedLocationOption) : null;
        return (h(Host, { key: '0096982c14e2b388a2324a10ea8ea2f3e15ea56e' }, h("div", { key: '56911162c07d534ba63be02e9c43686ed51c35fe', class: "nylas-event-location", part: "nel" }, h("label", { key: 'a1a20275ebe5568b2b1e5272c3513b9166841614', htmlFor: "location" }, instance.t('nylasEventLocation.headerTitle'), h("span", { key: 'ada51f2282f1934f972815dfa93586f50965a6dd', class: "label-icon" }, h("tooltip-component", { key: '15cd36b04166c37b35ab46e56c44cfc07a30291e' }, h("info-icon", { key: 'bf4a6b7a80ba59bcba143b9200f1d60dd0fa909e', slot: "tooltip-icon" }), h("span", { key: '9985da6d6c668b8f01667b48a8d39cb02c5fad74', slot: "tooltip-content" }, instance.t('nylasEventLocation.tooltip.desc'))))), h("div", { key: '02b96e763b3501411b90633da009345819c398f2', class: "location-input" }, defaultOption && defaultOption?.label && (h("select-dropdown", { withSearch: false, name: "location", options: this.locationOptions, defaultSelectedOption: defaultOption, exportparts: "sd_dropdown: nel__dropdown, sd_dropdown-button: nel__dropdown-button, sd_dropdown-content: nel__dropdown-content" }, h("span", { slot: "select-icon" }, this.getIcon(this.selectedLocationOption)))), this.selectedLocationOption === 'custom' && (h("input", { type: "text", part: "nel__location", id: "location", name: "location", maxlength: "1024", value: this.location, onInput: e => this.handleChange(e) }))))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "currentUser": ["currentUserChangedHandler"],
        "conferenceProviders": ["conferenceProvidersChanged"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
    static get style() { return nylasEventLocationCss; }
}, [65, "nylas-event-location", {
        "name": [1],
        "currentUser": [16],
        "userProvider": [1, "user-provider"],
        "eventConferencing": [16],
        "conferenceProviders": [16],
        "selectedConfiguration": [16],
        "eventLocation": [1, "event-location"],
        "selectedLanguage": [1, "selected-language"],
        "location": [32],
        "grantId": [32],
        "selectedLocationOption": [32],
        "userProviderState": [32],
        "locationOptions": [32]
    }, [[0, "nylasFormDropdownChanged", "nylasFormDropdownChangedHandler"]], {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "currentUser": ["currentUserChangedHandler"],
        "conferenceProviders": ["conferenceProvidersChanged"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-event-location',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.conferenceProviders', 'conferenceProviders'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventLocation.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-event-location", "chevron-icon", "google-meet-icon", "info-icon", "location-icon", "location-off-icon", "microsoft-teams-icon", "search-icon", "select-dropdown", "tooltip-component", "zoom-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-event-location":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasEventLocation);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "google-meet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "location-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "location-off-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "microsoft-teams-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "zoom-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasEventLocation as N, defineCustomElement as d };

//# sourceMappingURL=nylas-event-location2.js.map