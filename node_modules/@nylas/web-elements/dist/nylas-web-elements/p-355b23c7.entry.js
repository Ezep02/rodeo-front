import{r as t,c as e,h as s,H as n,a as i}from"./p-68c2fadf.js";import{N as o,e as r}from"./p-7c0d4025.js";import{a as h}from"./p-48a8756b.js";import{N as a,C as c}from"./p-02171cd9.js";import{c as u}from"./p-cabb2e68.js";import{C as d}from"./p-4deaa6f5.js";class l{constructor(t,e){this.nylasAuth=t;this.nylasAuthStore=e}async validateSession(){const t=await this.isAccessTokenValid();if(!t){this.logout()}else{let t=await this.nylasAuth.getTokenInfo();if(t){const e=5*60*1e3;const s=Math.floor(Date.now()/1e3);if(t.expires_in&&t.expires_in-s<e){h("[NylasAuthConnectorMixin] Refreshing access token");t=await this.nylasAuth.refreshAccessToken();if(!t){h("[NylasAuthConnectorMixin] Token is expired and could not be refreshed. Logging out.");this.logout();return}}this.nylasAuthStore.state.tokenInfo=t}}this.nylasAuthStore.state.isAuthenticated=t}async isAuthenticated(){return this.nylasAuth.isAuthenticated()}async getTokenInfo(){return this.nylasAuth.getTokenInfo()}async isAccessTokenValid(){return this.nylasAuth.isAccessTokenValid()}async logout(){await this.nylasAuth.logout()}async getHostedAuthRedirectURL(t,e,s){return this.nylasAuth.getHostedAuthRedirectURL(t,e,s)}async manageHostedAuthCodeExchange(t){const e=new URL(t);const s=e.searchParams.get("code");if(s){const t=await this.nylasAuth.exchangeAuthCodeForTokenInfo(s);if(t){this.nylasAuthStore.state.tokenInfo=t;this.nylasAuthStore.state.isAuthenticated=true;return t}}return null}}class f{constructor(t,e,s,n,i,o="https://api.us.nylas.com"){this.router=t;this.schedulerAPIURL=o;this.nylasAuth=e;this.nylasAuthStore=s;this.nylasSchedulerStore=n;this.nylasSchedulerConfigStore=i}init(){h("NylasConnector init")}get authStore(){return this.nylasAuthStore}get schedulerStore(){return this.nylasSchedulerStore}get schedulerConfigStore(){return this.nylasSchedulerConfigStore}get auth(){if(this._authConnector){return this._authConnector}this._authConnector=new l(this.nylasAuth,this.nylasAuthStore);return this._authConnector}get scheduler(){if(this._schedulerAPIConnector){return this._schedulerAPIConnector}this._schedulerAPIConnector=new a({schedulerAPIURL:this.schedulerAPIURL,schedulerStore:this.schedulerStore});return this._schedulerAPIConnector}getAuth(){return this.nylasAuth}resetStores(){this.nylasAuthStore.reset()}async logout(){await this.nylasAuth.logout();this.resetStores()}}class g extends Event{constructor(t,e){super(t,e);this.oldURL=e.oldURL;this.newURL=e.newURL}}class w{constructor(){this.routeChangeListeners=[];h("HashRouter constructor")}destroy(){h("HashRouter destroy");window.removeEventListener("hashchange",this.onRouteChange.bind(this))}init(){h("HashRouter init");window.addEventListener("hashchange",this.onRouteChange.bind(this));if(typeof HashChangeEvent!=="undefined"){const t=new HashChangeEvent("hashchange",{oldURL:"",newURL:window.location.href});this.onRouteChange(t)}else{const t=new g("hashchange",{oldURL:"",newURL:window.location.href});this.onRouteChange(t)}}addRouteChangeListener(t,e){h("HashRouter addRouteChangeListener");this.routeChangeListeners.push([t,e])}navigate(t,e){h("HashRouter navigate");if(e){return window.history.pushState(null,"",`#${t}`)}window.location.hash=t}setRoute(t){h("HashRouter setRoute");window.location.hash=t}matchRoute(t,e){const s=t.split("/");const n=e.split("/");h(`HashRouter matchRoute route=${t} path=${e}`,{routeParts:s,pathParts:n});if(s[1]===""&&n[0]===""){return true}if(s.length!==n.length){return false}for(let t=0;t<s.length;t++){const e=s[t];const i=n[t];if(e.startsWith(":")){continue}if(e!==i){return false}}return true}getRouteParams(t){h("HashRouter getRouteParams");const e={};const s=t.split("/");const n=window.location.hash.split("/");s.forEach(((t,s)=>{if(t.startsWith(":")){const i=t.substring(1);e[i]=n[s]}}));return e}getRouteWithParams(t,e){h("HashRouter getRouteWithParams");let s=t;Object.keys(e).forEach((t=>{s=s.replace(`:${t}`,e[t])}));return s}getRoute(){h("HashRouter getRoute");return window.location.hash}onRouteChange(t){this.routeChangeListeners.forEach((async([e,s])=>{const n=t.newURL.indexOf("#")===-1?"":t.newURL.substring(t.newURL.indexOf("#")+1);h(`HashRouter onRouteChange route=${e} path=${n}`,{event:t});if(!this.matchRoute(e,n)){h(`HashRouter onRouteChange route=${e} path=${n} does not match`);return}const i=this.getRouteParams(e);await s(e,n,i)}))}getBasePath(){h("HashRouter getBasePath");return""}}function p(t={}){const e={isAuthenticated:false,tokenInfo:null,state:"ready",...t};const s=u(e);s.reset=()=>{for(const t in e){const n=e[t];s.set(t,n)}};return s}const y=":host{display:contents}";const R=y;const m=class{constructor(s){t(this,s);this.init=e(this,"init",7);this.loggedIn=e(this,"loggedIn",7);this.loggedOut=e(this,"loggedOut",7);this.handleAuthChange=async t=>{if(t){this.loggedIn.emit(this.host)}else{this.loggedOut.emit(this.host)}};this.authConfig=undefined;this.eventOverrides={};this.automaticComponentRegistration=true}connectedCallback(){h("[nylas-provider] connectedCallback")}async componentWillLoad(){h("[nylas-provider] componentWillLoad");this.stores={auth:p(),scheduler:c(),schedulerConfig:d()};this.baseProvider=new o(this.host,this.stores,this.automaticComponentRegistration,this.eventOverrides);const t=new w;this.nylasAuth=r({apiUri:"https://api.us.nylas.com",elementsApiUri:"https://elements.us.nylas.com",storageType:"indexeddb",clientId:"YOUR_CLIENT_ID",defaultScopes:[],redirectURI:"/",...this.authConfig});const e=this.baseProvider?.getStore("auth");if(!e){throw new Error("The auth store is not set")}const s=this.baseProvider?.getStore("scheduler");if(!s){throw new Error("The scheduler store is not set")}const n=this.baseProvider?.getStore("schedulerConfig");if(!n){throw new Error("The scheduler config store is not set")}this.nylasConnector=new f(t,this.nylasAuth,e,s,n);const i=this.init.emit(this.host);if(!i.defaultPrevented){await(this.nylasConnector?.auth.validateSession())}this.handleAuthChange(e.state.isAuthenticated);this.baseProvider?.componentWillLoad(this.nylasConnector)}componentDidLoad(){const t=this.baseProvider?.getStore("auth");t?.onChange("isAuthenticated",this.handleAuthChange);this.baseProvider?.componentDidLoad()}componentDisconnected(){this.baseProvider?.componentDisconnected()}async registerComponentHandler(t){this.baseProvider?.registerComponent(t.detail)}async unregisterComponentHandler(t){this.baseProvider?.unregisterComponent(t.detail)}async getNylasAuth(){return this.nylasAuth}async getNylasConnector(){return this.nylasConnector}async getAuthStore(){return this.baseProvider?.getStore("auth")}async getNylasSchedulerStore(){return this.baseProvider?.getStore("scheduler")}async getNylasSchedulerConfigStore(){return this.baseProvider?.getStore("schedulerConfig")}render(){return s(n,{key:"24d8f54d35e72ef3906567058947859b05e4ef4d"},s("slot",{key:"421dbd31175cfb81fbce8e88f484521f0a9458ec"}))}get host(){return i(this)}};m.style=R;export{m as nylas_provider};
//# sourceMappingURL=p-355b23c7.entry.js.map