{"version":3,"names":["CreateNylasSchedulerConfigStore","defaultState","defaultSchedulerConfigState","selectedConfiguration","configurations","listConfigurationsNextCursor","calendars","currentUser","action","additionalParticipants","requiresSlug","store","createStore","resetSelectedConfiguration","set","onChange","async"],"sources":["src/stores/scheduler-config-store.ts"],"sourcesContent":["import { AdditionalParticipant, Calendar, Configuration } from '@nylas/core';\nimport { ObservableMap, createStore } from '@stencil/store';\nimport { User } from '@/common/nylas-api-request';\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object | undefined ? RecursivePartial<T[P]> : T[P];\n};\n\nexport interface NylasSchedulerConfigStoreState {\n  /**\n   * The selected configuration.\n   * This is the configuration that is currently selected, use it to populate default values for new configurations.\n   */\n  selectedConfiguration: RecursivePartial<Configuration>;\n  /**\n   * The list of configurations.\n   * This is the list of configurations that the user has created.\n   */\n  configurations: Configuration[];\n  /**\n   * The list of calendars.\n   * This is the list of calendars that the user has access to.\n   */\n  calendars: Calendar[];\n  /**\n   * The current user.\n   * This is the user that is currently logged in.\n   */\n  currentUser: User | null;\n  /**\n   * The current action.\n   * This is the current action that the user is performing.\n   */\n  action: 'create' | 'edit' | null;\n  /**\n   * The additional participants.\n   */\n  additionalParticipants: AdditionalParticipant[];\n  /**\n   * The next cursor for list configurations.\n   */\n  listConfigurationsNextCursor: string | null;\n  /**\n   * The conference providers.\n   */\n  conferenceProviders?: Record<'microsoft' | 'zoom' | 'google', string>;\n  /**\n   * The flag to determine if the slug is required\n   */\n  requiresSlug: boolean;\n  /**\n   * The selected language.\n   */\n  selectedLanguage?: string;\n}\n\nexport type NylasSchedulerConfigStoreType = ReturnType<typeof CreateNylasSchedulerConfigStore>;\n\nexport type CreateNylasSchedulerConfigStoreReturnType = ObservableMap<NylasSchedulerConfigStoreState> & {\n  /**\n   * Reset the selected configuration to the default state.\n   * This is used to reset the selected configuration to the default state instead of setting it to an empty object.\n   */\n  resetSelectedConfiguration: () => void;\n};\n\nexport function CreateNylasSchedulerConfigStore(defaultState: Partial<NylasSchedulerConfigStoreState> = {}): CreateNylasSchedulerConfigStoreReturnType {\n  const defaultSchedulerConfigState: NylasSchedulerConfigStoreState = {\n    selectedConfiguration: {},\n    configurations: [],\n    listConfigurationsNextCursor: null,\n    calendars: [],\n    currentUser: null,\n    action: null,\n    additionalParticipants: [],\n    requiresSlug: false,\n    ...defaultState,\n  };\n  const store = createStore<NylasSchedulerConfigStoreState>(defaultSchedulerConfigState);\n\n  /**\n   * Reset the selected configuration to the default state.\n   * This is used to reset the selected configuration to the default state instead of setting it to an empty object.\n   */\n  function resetSelectedConfiguration() {\n    store.set('selectedConfiguration', { ...defaultState['selectedConfiguration'] });\n  }\n\n  store.onChange('action', async action => {\n    if (!action) {\n      resetSelectedConfiguration();\n    }\n  });\n\n  return {\n    ...store,\n    resetSelectedConfiguration,\n  };\n}\n"],"mappings":"6CAkEgBA,EAAgCC,EAAwD,IACtG,MAAMC,EAA8D,CAClEC,sBAAuB,GACvBC,eAAgB,GAChBC,6BAA8B,KAC9BC,UAAW,GACXC,YAAa,KACbC,OAAQ,KACRC,uBAAwB,GACxBC,aAAc,SACXT,GAEL,MAAMU,EAAQC,EAA4CV,GAM1D,SAASW,IACPF,EAAMG,IAAI,wBAAyB,IAAKb,EAAa,0B,CAGvDU,EAAMI,SAAS,UAAUC,MAAMR,IAC7B,IAAKA,EAAQ,CACXK,G,KAIJ,MAAO,IACFF,EACHE,6BAEJ,Q"}