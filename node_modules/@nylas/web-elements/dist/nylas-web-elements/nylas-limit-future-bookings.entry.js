import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-6db1d72d.js';
import { a as debug, i as instance } from './utils-14cfef23.js';

const nylasLimitFutureBookingsCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-limit-future-bookings{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-limit-future-bookings{flex-direction:column;gap:0.5rem}}.nylas-limit-future-bookings label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-limit-future-bookings label span.label-icon{margin-left:4px}.nylas-limit-future-bookings label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLimitFutureBookings = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.availableDaysInFuture = undefined;
        this.name = 'limit-future-bookings';
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-limit-future-bookings', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const daysInFuture = newVal?.scheduler?.available_days_in_future || this.availableDaysInFuture || 1;
        if (daysInFuture) {
            this.updateNumberAndPeriodFromDays(daysInFuture);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(daysInFuture?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        instance.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-limit-future-bookings', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-limit-future-bookings', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-limit-future-bookings', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromDays(this.availableDaysInFuture || 1);
        }
    }
    disconnectedCallback() {
        debug('nylas-limit-future-bookings', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let availableDaysInFuture;
        if (period === 'day') {
            availableDaysInFuture = number;
        }
        else if (period === 'week') {
            availableDaysInFuture = number * 7;
        }
        else {
            availableDaysInFuture = number * 30;
        }
        this.valueChanged.emit({ value: availableDaysInFuture, name: 'availableDaysInFuture' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(availableDaysInFuture.toString(), this.name);
    }
    updateNumberAndPeriodFromDays(days) {
        let number, period;
        if (days >= 30 && days % 30 === 0) {
            number = days / 30;
            period = 'month';
        }
        else if (days >= 7 && days % 7 === 0) {
            number = days / 7;
            period = 'week';
        }
        else {
            number = days;
            period = 'day';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTImePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (h(Host, { key: '5b673eeb329bc7d5159ced515ca79da4bc4f53e6' }, h("div", { key: '29cf8a9f181b71c98a5d001dc87d8c46249e8c35', class: "nylas-limit-future-bookings", part: "nlfb" }, h("label", { key: 'de9d2983117081c324c851fef9de5a873ea941df' }, instance.t('nylasLimitFutureBookings.headerTitle'), h("span", { key: 'fd8e2e5457019bb259cb4c7374dff235c284e214', class: "label-icon" }, h("tooltip-component", { key: '549860a6d6bfa59a40abe5d00bd36acad51c0cf7' }, h("info-icon", { key: 'dcc2eecc7b3125dccfcb6287fbd9dd0bd58878d0', slot: "tooltip-icon" }), h("span", { key: 'f0a713a404d20dd97808546abe9060df0c63a56b', slot: "tooltip-content" }, instance.t('nylasLimitFutureBookings.tooltip.desc'))))), showTImePeriodSelector && (h("time-period-selector", { id: "limit-future-bookings", timePeriods: [instance.t('timePeriod', { context: 'day' }), instance.t('timePeriod', { context: 'week' }), instance.t('timePeriod', { context: 'month' })], exportparts: "tps__number-dropdown: nlfb__number-dropdown, tps__number-dropdown-button: nlfb__number-dropdown-button, tps__number-dropdown-content: nlfb__number-dropdown-content, tps__period-dropdown: nlfb__period-dropdown, tps__period-dropdown-button: nlfb__period-dropdown-button, tps__period-dropdown-content: nlfb__period-dropdown-content", defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-limit-future-bookings',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLimitFutureBookings.prototype, "render", null);
NylasLimitFutureBookings.style = nylasLimitFutureBookingsCss;

export { NylasLimitFutureBookings as nylas_limit_future_bookings };

//# sourceMappingURL=nylas-limit-future-bookings.entry.js.map