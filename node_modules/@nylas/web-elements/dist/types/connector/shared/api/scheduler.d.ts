import { AvailabilityResponse, NylasSchedulerBookingDataWithFlatFields, NylasEvent, UISettingsResponse } from "../../../common/types";
import { NylasSchedulerStoreType } from '../../../components';
import type { NylasResponse, NylasSchedulerResponse, Timeslot } from '@nylas/core';
type NylasSchedulerAPIConnectorOptions = {
    schedulerAPIURL: string;
    schedulerStore: NylasSchedulerStoreType;
    sessionId?: string;
    configId?: string;
    slug?: string;
    clientId?: string;
};
export declare class NylaSchedulerAPIConnector {
    private schedulerStore;
    private schedulerAPIURL;
    private sessionId;
    private configId;
    private slug;
    private clientId;
    private errors;
    constructor({ schedulerAPIURL, schedulerStore, sessionId, configId, slug, clientId }: NylasSchedulerAPIConnectorOptions);
    private getHeaders;
    makeAPIRequest<T>(path: string, method: string, body: string | undefined, headers?: {}): Promise<NylasResponse<T>>;
    private getErrorMessage;
    setConfigId(configId: string): void;
    selectDate(date: Date): void;
    selectTime(time: Timeslot): void;
    selectTimezone(timezone: string): void;
    selectLanguage(language: string): void;
    toggleAdditionalData(value: boolean): Promise<void>;
    setParticipantName(name: string): void;
    setParticipantEmail(email: string): void;
    private refetchAvailability;
    private resetStoreStateAndFetchAvailability;
    setReschedule(bookingID: string): Promise<NylasSchedulerResponse<AvailabilityResponse>>;
    setCancel(bookingID: string): Promise<void>;
    setReject(bookingID: string): Promise<void>;
    resetCancel(): Promise<NylasSchedulerResponse<AvailabilityResponse>>;
    goBack(): Promise<void>;
    resetConfirm(): Promise<NylasSchedulerResponse<AvailabilityResponse>>;
    bookTimeslot(data?: NylasSchedulerBookingDataWithFlatFields & {
        timeslot?: Timeslot;
    }): Promise<NylasSchedulerResponse<NylasEvent>>;
    getUISettings(): Promise<NylasSchedulerResponse<UISettingsResponse>>;
    private getTwoLetterLanguageCode;
    private getStartTimeWithMinBookingNotice;
    private getEndTimeForAvailableDaysInFuture;
    getAvailability(startTime?: number, endTime?: number): Promise<NylasSchedulerResponse<AvailabilityResponse>>;
    cancelBooking(bookingId: string, reason: string): Promise<NylasSchedulerResponse<Partial<NylasEvent>>>;
    rescheduleBooking(bookingId: string, data: NylasSchedulerBookingDataWithFlatFields): Promise<NylasSchedulerResponse<NylasEvent>>;
    updateBooking(payload: {
        bookingId: string;
        status: 'confirmed' | 'cancelled';
        reason?: string;
    }): Promise<NylasSchedulerResponse<NylasEvent>>;
}
export {};
