import { EventEmitter } from '../../../stencil-public-runtime';
import { Notification, NylasSchedulerErrorResponse, ThemeConfig, Timeslot } from '@nylas/core';
import { ConfigSettings } from "../../../stores/scheduler-store";
import { NylasEvent } from "../../../common/types";
export declare class NylasCancelBookingForm {
    private host;
    readonly cancelBookingId?: string;
    readonly rejectBookingId?: string;
    readonly selectedTimeslot: Timeslot;
    readonly configSettings?: ConfigSettings;
    readonly eventInfo?: NylasEvent;
    readonly isLoading?: boolean;
    readonly themeConfig?: any;
    readonly goBackButtonClicked: EventEmitter<void>;
    readonly cancelBookingFormSubmitted: EventEmitter<{
        bookingId: string;
        action: 'reject' | 'cancel';
        reason: string;
        errorHandler?: (error: NylasSchedulerErrorResponse) => void;
    }>;
    readonly triggerValidation: EventEmitter<{}>;
    readonly cancelBookedEventError: EventEmitter<NylasSchedulerErrorResponse>;
    cancelBookingFormError: EventEmitter<Partial<Notification>>;
    cancellationReason: string;
    cancellationError: string;
    cancellationPolicy: string;
    configSettingsChangedHandler(newValue: ConfigSettings): void;
    themeConfigChanged(newThemeConfig: ThemeConfig): void;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    disconnectedCallback(): void;
    applyThemeConfig(themeConfig?: ThemeConfig): void;
    private handleGoBackClicked;
    private handleSubmitCancelBooking;
    handleNylasFormInputChanged(event: CustomEvent<{
        value: string;
        name: string;
        error: string;
        label: string;
        type: string;
    }>): void;
    render(): any;
}
