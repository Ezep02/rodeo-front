import { Event, EventEmitter } from '../../../stencil-public-runtime';
import type { ConfigSettings } from "../../../stores/scheduler-store";
import type { NylasSchedulerBookingDataWithFlatFields, NylasSchedulerBookingData, NylasEvent } from "../../../common/types";
import { Notification, ThemeConfig } from '@nylas/core';
export declare class NylasBookingForm {
    readonly host: HTMLNylasBookingFormElement;
    readonly isLoading?: boolean;
    readonly bookingInfo?: NylasSchedulerBookingData;
    readonly eventInfo?: NylasEvent;
    readonly configSettings?: ConfigSettings;
    readonly themeConfig?: any;
    nameChanged: EventEmitter<string>;
    emailChanged: EventEmitter<string>;
    backButtonClicked: EventEmitter<boolean>;
    detailsConfirmed: EventEmitter<NylasSchedulerBookingDataWithFlatFields>;
    bookingFormError: EventEmitter<Partial<Notification>>;
    bookingFormSubmitted: EventEmitter<void>;
    name: string;
    email: string;
    guestEmails: string[];
    guestEmailErrors: {
        [key: number]: string;
    };
    isNameValid: boolean;
    isEmailValid: boolean;
    additionalFields?: Record<string, string>;
    validationError: {
        name: string;
        email: string;
    };
    backButtonLoading: boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    bookingInfoChangedHandler(newValue: NylasSchedulerBookingData | undefined): void;
    themeConfigChanged(newThemeConfig: ThemeConfig): void;
    applyThemeConfig(themeConfig?: ThemeConfig): void;
    changeName(name: string): void;
    changeEmail(email: string): void;
    resetGuestEmailError(guestIndex: number): void;
    handleGuestChange: (guestIndex: number, email: string) => void;
    handleGuestBlur: (guestIndex: number, email: string) => void;
    addGuestButtonClickedHandler: (e: any) => void;
    removeGuestButtonClickHandler: (e: Event, guestIndex: number) => void;
    handleBackButtonClicked: (e: any) => void;
    bookButtonClickedHandler: (e: Event) => Promise<void>;
    updateAdditionalFields: (name: string, value: string) => void;
    nylasFormInputChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
        error: string;
        label: string;
        type?: string;
    }>): void;
    selectOptionChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
        label: string;
        error?: string;
    }>): void;
    selecedOptionsChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
        label: string;
        error?: string;
    }>): void;
    switchToggledHandler(event: CustomEvent<{
        checked: boolean;
        name: string;
        label: string;
    }>): void;
    checkboxToggledHandler(event: CustomEvent<{
        checked: boolean;
        name: string;
        label: string;
    }>): void;
    radioChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
        label: string;
        type: string;
    }>): void;
    dropdownDefaultSelectedHandler(event: CustomEvent<{
        value: string;
        name: string;
        label: string;
        error?: string;
    }>): void;
    render(): any;
}
