import { RegisteredComponent } from "../../../common/register-component";
import type { SchedulerEventOverride } from "../../../common/component-types";
import { NylasSchedulerConnector } from "../../../connector/nylas-scheduler-connector/index";
import { NylasSchedulerStoreState, NylasSchedulerStoreType } from "../../../stores/scheduler-store";
import { NylasSchedulerBookingData, ThemeConfig, Notification, NylasSchedulerErrorResponse, NylasSchedulerResponse } from '@nylas/core';
import { EventEmitter } from '../../../stencil-public-runtime';
import { NylasSchedulerBookingDataWithFlatFields, NylasEvent, UISettingsResponse } from "../../../common/types";
import { LANGUAGE_CODE, Locale } from "../../../common/constants";
export declare class NylasScheduling {
    private stores?;
    private baseProvider?;
    private nylasSchedulerConnector?;
    private host;
    readonly mode: 'app' | 'composable';
    readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;
    readonly sessionId?: string;
    readonly schedulerApiUrl: string;
    readonly bookingInfo?: NylasSchedulerBookingData;
    readonly rescheduleBookingRef?: string;
    readonly cancelBookingRef?: string;
    readonly organizerConfirmationBookingRef?: string;
    readonly configurationId?: string;
    readonly slug?: string;
    readonly clientId?: string;
    readonly nylasBranding?: boolean;
    readonly eventOverrides: SchedulerEventOverride;
    readonly isLoading?: boolean;
    readonly themeConfig?: ThemeConfig;
    readonly localization?: Partial<Record<LANGUAGE_CODE, Locale>>;
    readonly showNotification?: boolean;
    readonly enableUserFeedback?: boolean;
    automaticComponentRegistration: boolean;
    selectedDateLabel: string;
    refConfigId?: string;
    language: string;
    showFeedbackModal: boolean;
    bookingInfoConfirmed: NylasSchedulerBookingDataWithFlatFields | null;
    init: EventEmitter<HTMLNylasSchedulingElement>;
    schedulerWillLoad: EventEmitter<HTMLNylasSchedulingElement>;
    schedulerDidLoad: EventEmitter<HTMLNylasSchedulingElement>;
    nylasSchedulerError: EventEmitter<{
        notification: Notification;
        host: HTMLElement;
    }>;
    configSettingsLoaded: EventEmitter<{
        settings: NylasSchedulerResponse<UISettingsResponse>;
    }>;
    bookingRefExtracted: EventEmitter<{
        configurationId: string;
        bookingId: string;
        salt?: string;
    }>;
    bookedEventInfo: EventEmitter<NylasSchedulerResponse<NylasEvent>>;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDisconnected(): void;
    bookingInfoChanged(newVal?: NylasSchedulerBookingData): void;
    rescheduleBookingRefChanged(newVal?: string): void;
    cancelBookingRefChanged(newVal?: string): void;
    organizerConfirmationBookingRefChanged(newVal?: string): void;
    localizationChanged(newVal?: Partial<Record<LANGUAGE_CODE, Locale>>): void;
    themeConfigChanged(newVal?: ThemeConfig): void;
    languageChanged(event: CustomEvent<string>): void;
    registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void>;
    monthChangedHandler(event: CustomEvent<Date>): Promise<void>;
    mapToBookingData(bookingInfo: NylasSchedulerBookingDataWithFlatFields): any;
    bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingDataWithFlatFields>): Promise<void>;
    dateSelectedHandler(event: CustomEvent<Date>): void;
    cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    confirmBookingErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>): void;
    feedbackModalClosedHandler(): void;
    feedbackSubmittedHandler(event: CustomEvent<{
        feedback: string;
    }>): void;
    getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined>;
    getNylasSchedulerConnector(): Promise<NylasSchedulerConnector | undefined>;
    getRef(): Promise<HTMLNylasSchedulingElement>;
    private getErrorObject;
    private checkIfSessionIdOrConfigIdExists;
    private isTimeslotValid;
    private validateAvailableDaysInFuture;
    private applyThemeConfig;
    onFeedbackClick(e: Event): void;
    redirectToCustomUrl(url: string): void;
    render(): any;
}
