import { AdditionalFields, Appearance, AvailabilityMethod, BookingType, Calendar, Conference, Configuration, EmailTemplate, EventReminder, OpenHours, Participant } from '@nylas/core';
import { Event, EventEmitter } from '../../../stencil-public-runtime';
import { Tab } from './tab-contents';
import { User } from "../../../common/nylas-api-request";
import { LANGUAGE_CODE } from "../../../common/constants";
type SchedulerEventDetail = {
    config: Partial<Configuration>;
    action: 'create' | 'edit';
    host: HTMLNylasEditorTabsElement;
    resetLoadingState?: (e: CustomEvent) => void;
};
export declare class NylasEditorTabs {
    private formRef;
    host: HTMLNylasEditorTabsElement;
    calendars?: Calendar[];
    selectedConfiguration?: Configuration;
    configurations?: Configuration[];
    currentUser?: User;
    schedulerPreviewLink: string;
    mode?: 'app' | 'composable';
    hideEditorTabs?: Tab[];
    enableUserFeedback?: boolean;
    selectedLanguage?: LANGUAGE_CODE;
    action: 'create' | 'edit';
    showFeedbackModal: boolean;
    activeTab: Tab;
    isLoading: boolean;
    hasUnsavedChanges: boolean;
    changesSaved: boolean;
    formState: Partial<{
        title: string;
        description: string;
        duration: string;
        availability?: {
            timezone: string;
            openHours?: OpenHours[];
        };
        additionalFields?: Record<string, AdditionalFields>;
        calendarIds: string[];
        participantCalendars?: {
            [key: string]: string[];
        };
        participants?: Participant[];
        participantOpenHours?: {
            [key: string]: OpenHours[];
        };
        participantBookingCalendars?: {
            [key: string]: string;
        };
        bookingCalendar?: string;
        location?: string;
        conferencing?: Conference;
        bookingType?: string;
        buffer?: {
            before: number;
            after: number;
        };
        cancellationPolicy?: string;
        availableDaysInFuture?: number;
        minCancellationNotice?: number;
        minBookingNotice?: number;
        timeslotInterval?: {
            interval?: number;
            roundTo?: number;
        };
        additionalGuestsHidden?: boolean;
        hideCancellationOptions?: boolean;
        hideReschedulingOptions?: boolean;
        reminders?: EventReminder[];
        emailTemplate?: EmailTemplate;
        redirectUrl?: string;
        availabilityMethod?: AvailabilityMethod;
        slug: string;
        appearance: Appearance;
        name: string;
    }>;
    error?: string;
    schedulerConfigChanged: EventEmitter<SchedulerEventDetail>;
    schedulerConfigCreated: EventEmitter<SchedulerEventDetail>;
    cancelButtonClick: EventEmitter<void>;
    formSubmitted: EventEmitter<void>;
    previewButtonClicked: EventEmitter<HTMLNylasEditorTabsElement>;
    schedulerEditorFormUpdated: EventEmitter<{
        value: string;
        name: string;
    }>;
    configChangedHandler(newConfig: Configuration): void;
    userChangedHandler(newUser: User): void;
    selectedLanguageChangedHandler(newVal: LANGUAGE_CODE, oldVal: LANGUAGE_CODE): void;
    schedulerConfigCreatedEventHandler(data: SchedulerEventDetail): Promise<CustomEvent<SchedulerEventDetail>>;
    setError(error: Error): Promise<void>;
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    handleValueChanged(event: CustomEvent): void;
    feedbackModalClosedHandler(): void;
    feedbackSubmittedHandler(event: CustomEvent<{
        feedback: string;
    }>): void;
    getFormStateFromConfig(config?: Configuration): {
        title: string;
        description: string;
        duration: string;
        availability: {
            timezone: string;
            openHours: OpenHours[];
        };
        additionalFields: Record<string, AdditionalFields>;
        conferencing: Conference;
        calendarIds: string[];
        participants: Participant[];
        bookingCalendar: string;
        location: string;
        bookingType: BookingType;
        buffer: import("@nylas/core").MeetingBuffer;
        cancellationPolicy: string;
        availableDaysInFuture: number;
        minCancellationNotice: number;
        minBookingNotice: number;
        timeslotInterval: {
            interval: number | undefined;
            roundTo: number | undefined;
        };
        additionalGuestsHidden: boolean;
        hideCancellationOptions: boolean;
        hideReschedulingOptions: boolean;
        participantBookingCalendars: {};
        participantCalendars: {};
        reminders: EventReminder[] | undefined;
        emailTemplate: EmailTemplate | undefined;
        redirectUrl: string | undefined;
        slug: string | undefined;
        appearance: Appearance | undefined;
        name: string | undefined;
    };
    setFormState(value: any, key: any): void;
    updateFormState(): Partial<{
        title: string;
        description: string;
        duration: string;
        availability?: {
            timezone: string;
            openHours?: OpenHours[] | undefined;
        } | undefined;
        additionalFields?: Record<string, AdditionalFields> | undefined;
        calendarIds: string[];
        participantCalendars?: {
            [key: string]: string[];
        } | undefined;
        participants?: Participant[] | undefined;
        participantOpenHours?: {
            [key: string]: OpenHours[];
        } | undefined;
        participantBookingCalendars?: {
            [key: string]: string;
        } | undefined;
        bookingCalendar?: string | undefined;
        location?: string | undefined;
        conferencing?: Conference | undefined;
        bookingType?: string | undefined;
        buffer?: {
            before: number;
            after: number;
        } | undefined;
        cancellationPolicy?: string | undefined;
        availableDaysInFuture?: number | undefined;
        minCancellationNotice?: number | undefined;
        minBookingNotice?: number | undefined;
        timeslotInterval?: {
            interval?: number | undefined;
            roundTo?: number | undefined;
        } | undefined;
        additionalGuestsHidden?: boolean | undefined;
        hideCancellationOptions?: boolean | undefined;
        hideReschedulingOptions?: boolean | undefined;
        reminders?: EventReminder[] | undefined;
        emailTemplate?: EmailTemplate | undefined;
        redirectUrl?: string | undefined;
        availabilityMethod?: AvailabilityMethod | undefined;
        slug: string;
        appearance: Appearance;
        name: string;
    }>;
    setActiveTab(e: Event, tabName: Tab): void;
    formSubmissionHandler: (event: Event) => Promise<void>;
    isConfigRoundRobin: (config: Configuration) => boolean;
    checkForOrganizerConfirmationError: (config: any) => boolean;
    checkForBookingFormErrors: (config: any) => boolean;
    hideTab(tab: Tab): boolean;
    onFeedbackClick(e: Event): void;
    render(): any;
}
export {};
