import { EventEmitter } from '../../../stencil-public-runtime';
import { Configuration } from '@nylas/core';
import { LANGUAGE_CODE } from "../../../common/constants";
interface AdditionalFields {
    type: string;
    required: boolean;
    label: string;
    order: number;
    options?: string[];
    key: string;
    default?: string;
    error?: string;
}
interface AdditionalFieldsInternal extends AdditionalFields {
    isOpen: boolean;
    readonly?: boolean;
    typeLabel: string;
}
export declare class NylasBookingFormConfig {
    host: HTMLNylasBookingFormConfigElement;
    selectedConfiguration?: Configuration;
    name: string;
    additionalFields?: AdditionalFields[];
    selectedLanguage?: LANGUAGE_CODE;
    valueChanged: EventEmitter<{
        value: Record<string, AdditionalFields>;
        name: string;
    }>;
    internals: ElementInternals;
    formFields: AdditionalFieldsInternal[];
    watchFields: {
        title: string;
        description: string;
    };
    elementNameChangedHandler(newValue: string): void;
    selectedConfigurationChangedHandler(newValue: Configuration): void;
    selectedLanguageChangedHandler(newVal: LANGUAGE_CODE, oldVal: LANGUAGE_CODE): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    updateFormFields(config: Configuration): void;
    watchHandler(newValue: AdditionalFieldsInternal[]): void;
    findNextMissingNumber(arr: string[]): number;
    nylasFormDropdownChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
    }>): void;
    nylasFormInputChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
    }>): void;
    valueChangedHandler(event: CustomEvent<{
        value: string;
        name: string;
    }>): void;
    swapFields(event: any): void;
    fieldToggle(index: any): void;
    fieldRemove(index: any): void;
    fieldRequired(index: any): void;
    fieldLabelChange(ind: any, event: any): void;
    fieldOptionAdd(index: any): void;
    fieldOptionRemove(fieldIndex: any, index: any): void;
    fieldOptionChange(fieldIndex: any, index: any, event: any): void;
    fieldDefaultValueChanged(index: any, event: any): void;
    render(): any;
}
export {};
