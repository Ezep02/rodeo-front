import { EventEmitter } from '../../../stencil-public-runtime';
import { Conference, Configuration } from '@nylas/core';
import { User } from "../../../common/nylas-api-request";
import { LANGUAGE_CODE } from "../../../common/constants";
export declare class NylasEventLocation {
    host: HTMLElement;
    name: string;
    currentUser?: User;
    userProvider?: string;
    eventConferencing?: Conference;
    conferenceProviders?: Record<string, string>;
    selectedConfiguration?: Configuration;
    eventLocation?: string;
    selectedLanguage?: LANGUAGE_CODE;
    location: string;
    grantId: string;
    selectedLocationOption: string;
    userProviderState: string;
    locationOptions: {
        value: string;
        label: string;
        labelHTML: any;
    }[];
    internals: ElementInternals;
    elementNameChangedHandler(newValue: string): void;
    selectedConfigurationChangedHandler(newValue: Configuration): void;
    currentUserChangedHandler(newValue: User): void;
    conferenceProvidersChanged(newValue: Record<string, string>): void;
    selectedLanguageChangedHandler(newVal: LANGUAGE_CODE, oldVal: LANGUAGE_CODE): void;
    valueChanged: EventEmitter<{
        value: string;
        name: string;
    }>;
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    nylasFormDropdownChangedHandler(event: CustomEvent<{
        value: string;
    }>): void;
    setLocationOptionsForProvider(provider: string): void;
    setDefaultLocationOption(eventConferencing: Conference | null, eventLocation: string): any;
    setDefaultGrantID(eventConferencing: Conference): any;
    setFormValue(value: string, name: string): void;
    handleChange(event: any): void;
    getIcon(location: string): any;
    getLabelHTML(location: string): any;
    render(): any;
}
