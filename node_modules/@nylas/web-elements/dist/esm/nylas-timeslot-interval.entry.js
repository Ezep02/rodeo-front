import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-6db1d72d.js';
import { a as debug, i as instance } from './utils-14cfef23.js';

const nylasTimeslotIntervalCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-timeslot-interval{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-timeslot-interval .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-timeslot-interval .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-timeslot-interval .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown span.label tooltip-component{display:flex}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown{margin-bottom:1.5rem}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const defaultRoundToMinutes = 15;
const NylasTimeslotInterval = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'timeslot-picker';
        this.eventDurationMinutes = this.selectedConfiguration?.availability?.duration_minutes;
        this.selectedLanguage = undefined;
        this.internalEventDurationMinutes = undefined;
        this.selectedInterval = undefined;
        this.selectedRoundTo = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-timeslot-interval', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-timeslot-interval', 'selectedConfigurationChangedHandler', newValue);
        this.internalEventDurationMinutes = newValue?.availability?.duration_minutes ?? this.eventDurationMinutes ?? 30;
        const internalIntervalMinutes = newValue?.availability?.interval_minutes ?? this.internalEventDurationMinutes ?? 30;
        this.selectedInterval = newValue?.availability?.interval_minutes ?? internalIntervalMinutes ?? 10;
        const roundToMinutes = newValue?.availability?.round_to || null;
        this.selectedRoundTo = roundToMinutes && roundToMinutes === internalIntervalMinutes ? true : false;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        instance.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-timeslot-interval', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-timeslot-interval', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-timeslot-interval', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-timeslot-interval', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.internalEventDurationMinutes = this.eventDurationMinutes ?? 30;
            const internalIntervalMinutes = this.internalEventDurationMinutes;
            this.selectedInterval = internalIntervalMinutes ?? 10;
            this.selectedRoundTo = false;
        }
        this.componentLoaded = true;
    }
    componentWillUpdate() {
        debug('nylas-timeslot-interval', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-timeslot-interval', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-timeslot-interval', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-timeslot-interval', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-timeslot-interval', 'nylasFormDropdownChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'duration') {
            this.selectedInterval = this.internalEventDurationMinutes ?? 10;
        }
        else {
            this.selectedInterval = parseInt(event.detail.value);
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    nylasFormRadioChangedHandler(event) {
        debug('nylas-timeslot-interval', 'nylasFormRadioChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'no-rounding') {
            this.selectedRoundTo = false;
        }
        else {
            this.selectedRoundTo = true;
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    render() {
        const intervalPreferenceOptions = [
            { value: 'duration', label: 'Length of the booking' },
            { value: '5', label: '5 mins' },
            { value: '10', label: '10 mins' },
            { value: '15', label: '15 mins' },
            { value: '20', label: '20 mins' },
            { value: '30', label: '30 mins' },
            { value: '45', label: '45 mins' },
            { value: '60', label: '60 mins' },
        ];
        const defaultSelectedInterval = typeof this.selectedInterval !== 'undefined'
            ? this.selectedInterval == this.internalEventDurationMinutes
                ? intervalPreferenceOptions[0]
                : intervalPreferenceOptions.find(op => op.value == this.selectedInterval.toString()) ?? intervalPreferenceOptions[0]
            : undefined;
        return (h(Host, { key: '6a6ef80a26f96539f3bd76f490e80e3b5b5ec732' }, h("div", { key: '4a9b1ca06115bf4545b055ad346bb4a089817118', class: "nylas-timeslot-interval", part: "nti" }, h("div", { key: '18f1512a34b383264fd3a97c21c18809b7526be3', class: "header", part: "nti__header" }, h("h3", { key: '432759c6caf4396b5af467441b2877e707f4e6d5' }, instance.t('nylasTimeslotInterval.headerTitle'))), h("div", { key: '033ce3e6b214b3e708755274737cc0c3577f9842', class: "nylas-timeslot-interval__dropdown" }, h("span", { key: '907d5c81914918ce0997640f9b38f3c26ab0f297', class: "label", part: "nti__input-label" }, instance.t('nylasTimeslotInterval.timeslotInterval.label')), defaultSelectedInterval?.label && (h("select-dropdown", { name: "interval-minutes", options: intervalPreferenceOptions, withSearch: false, exportparts: "sd_dropdown: nti__dropdown, sd_dropdown-button: nti__dropdown-button, sd_dropdown-content: nti__dropdown-content", defaultSelectedOption: defaultSelectedInterval })), h("span", { key: '1237ae4014d733f962bd0471e2b3d4811526dae9', slot: "label", class: "label", part: "nti__input-label" }, instance.t('nylasTimeslotInterval.timeslotRounding.label'), h("tooltip-component", { key: '04216f6b0eb529abeb7f0ed28dba4153a5b8a526' }, h("info-icon", { key: '4011e72276a72537bb6f95fcbfe533be4e769d27', slot: "tooltip-icon" }), h("span", { key: '51129510ca1781dc2a25f9fd81bbdecbe01c9cd4', slot: "tooltip-content" }, instance.t('nylasTimeslotInterval.timeslotRounding.tooltip.desc')))), this.componentLoaded && (h("radio-button-group", { name: "interval-preference", defaultSelectedValue: this.selectedRoundTo ? 'rounding' : 'no-rounding', options: [
                {
                    value: 'no-rounding',
                    label: instance.t('nylasTimeslotInterval.timeslotRoundingOptions.noRounding.label'),
                    description: instance.t('nylasTimeslotInterval.timeslotRoundingOptions.noRounding.desc'),
                },
                {
                    value: 'rounding',
                    label: instance.t('nylasTimeslotInterval.timeslotRoundingOptions.rounding.label'),
                    description: instance.t('nylasTimeslotInterval.timeslotRoundingOptions.rounding.desc'),
                },
            ] }))))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-timeslot-interval',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotInterval.prototype, "render", null);
NylasTimeslotInterval.style = nylasTimeslotIntervalCss;

export { NylasTimeslotInterval as nylas_timeslot_interval };

//# sourceMappingURL=nylas-timeslot-interval.entry.js.map