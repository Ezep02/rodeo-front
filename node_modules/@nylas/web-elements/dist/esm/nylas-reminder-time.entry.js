import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-6db1d72d.js';
import { a as debug, i as instance } from './utils-14cfef23.js';

const nylasReminderTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-reminder-time{display:flex;flex-direction:column;gap:4px}.nylas-reminder-time label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-reminder-time label span.required{color:var(--nylas-error, #cc4841)}.nylas-reminder-time label span.label-icon{margin-left:4px}.nylas-reminder-time label span.label-icon tooltip-component{display:flex}.nylas-reminder-time__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-reminder-time__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:160px}.nylas-reminder-time__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-reminder-time__wrapper select-dropdown{width:100%}}.nylas-reminder-time__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasReminderTime = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'reminder-time';
        this.eventReminderTimeMinutes = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    eventReminderTimeMinutesChangedHandler(newValue, _oldValue) {
        debug('nylas-reminder-time', 'eventReminderTimeMinutesChangedHandler', newValue);
        this.updateNumberAndPeriodFromMinutes(newValue);
        this.isInternalsAvailable && this.internals.setFormValue(newValue?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        instance.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-reminder-time', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-reminder-time', 'componentDidLoad');
        this.updateNumberAndPeriodFromMinutes(this.eventReminderTimeMinutes || 30);
    }
    disconnectedCallback() {
        debug('nylas-reminder-time', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: this.name });
        this.isInternalsAvailable && this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (h(Host, { key: '1938d2ad21925d6252edb8b8468a6acf38f48b5d' }, h("div", { key: '690085428071362f16eccd4607d95352a63f8ddb', class: "nylas-reminder-time", part: "nrt" }, h("div", { key: 'baf5110057c4771a82a2b53aef615c0acc334233', class: "nylas-reminder-time__wrapper" }, showTimePeriodSelector && (h("time-period-selector", { id: "limit-future-bookings", part: "nrt__time-period-selector", timePeriods: [instance.t('timeDuration', { context: 'minute' }), instance.t('timeDuration', { context: 'hour' }), instance.t('timePeriod', { context: 'day' })], exportparts: "tps__number-dropdown: nrt__number-dropdown, tps__number-dropdown-button: nrt__number-dropdown-button, tps__number-dropdown-content: nrt__number-dropdown-content, tps__period-dropdown: nrt__period-dropdown, tps__period-dropdown-button: nrt__period-dropdown-button, tps__period-dropdown-content: nrt__period-dropdown-content", defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod }))))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "eventReminderTimeMinutes": ["eventReminderTimeMinutesChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-time',
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderTime.prototype, "render", null);
NylasReminderTime.style = nylasReminderTimeCss;

export { NylasReminderTime as nylas_reminder_time };

//# sourceMappingURL=nylas-reminder-time.entry.js.map