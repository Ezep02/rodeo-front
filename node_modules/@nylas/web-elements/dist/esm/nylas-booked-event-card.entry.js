import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-6db1d72d.js';
import { a as debug, k as formatTimezone, i as instance, j as capitalizeFirstLetter } from './utils-14cfef23.js';
import { T as TIMEZONE_MAP, b as LANGUAGE_CODE_MAP } from './constants-335f5e87.js';

const nylasBookedEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-booked-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.event-card-wrapper{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;margin-bottom:2rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 0;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:16px;font-weight:400;border-bottom:1px solid var(--nylas-base-200);width:inherit;padding:0 0 1.5rem}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.booked-event-header .card-description{text-align:center}.booking-date-time,.booking-participants{padding:0 1rem;margin-top:1.5rem;margin-left:3rem;display:flex;flex-direction:column;justify-content:space-between;align-self:flex-start;position:relative}.booking-date-time svg,.booking-participants svg{color:var(--nylas-base-700);position:absolute;left:-10px}.booking-date-time .block,.booking-participants .block{display:block}.booking-date-time h3,.booking-participants h3{color:var(--nylas-base-600);margin:0;font-size:16px;font-weight:600;line-height:1.25rem;text-align:justify;margin-bottom:4px}.booking-date-time p,.booking-participants p{font-size:16px;margin:0;font-weight:400;text-align:justify;color:var(--nylas-base-800)}.booking-participants{margin-bottom:1.5rem}.booked-event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:1.5rem;gap:4px;margin:2rem;align-items:center;align-self:flex-end}.button-container{width:inherit}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);border-top:1px solid var(--nylas-base-200);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.footer.no-template-cols{grid-template-columns:1fr}.footer.no-footer{display:none}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookedEventCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.cancelBookingButtonClicked = createEvent(this, "cancelBookingButtonClicked", 7);
        this.rescheduleButtonClicked = createEvent(this, "rescheduleButtonClicked", 7);
        this.rescheduleBookedEventError = createEvent(this, "rescheduleBookedEventError", 7);
        this.cancelBookedEventValidationError = createEvent(this, "cancelBookedEventValidationError", 7);
        this.handleCancelBookingButtonClicked = () => {
            const startTime = new Date(this.selectedTimeslot.start_time);
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
            if (dateTillCancellation < new Date().getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.selectedLanguage = navigator.language;
        this.startTime = '';
        this.endTime = '';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-booked-event-card] Component did load`);
        if (!this.eventInfo) {
            console.warn('[nylas-booked-event-card] "eventInfo" prop missing. Please provide the event info to display the event details in the booked event card component.');
        }
        if (!this.bookingInfo) {
            console.warn('[nylas-booked-event-card] "bookingInfo" prop missing. Please provide the booking info to display the guest details in the booked event card component.');
        }
        this.applyThemeConfig(this.themeConfig);
        this.startTime = formatTimezone(this.selectedTimeslot?.start_time, this.selectedTimezone);
        this.endTime = formatTimezone(this.selectedTimeslot?.end_time, this.selectedTimezone);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        const bookingType = this.configSettings?.booking_type;
        const isManualConfirmation = bookingType && bookingType !== 'booking';
        return (h(Host, { key: '5c0d6ded922007d327b55a3536338a82302ca0be', part: "nbec" }, h("div", { key: 'a0d3c60605fbf54303527bc6001477db946eb560', class: "nylas-booked-event-card" }, h("div", { key: '043a3aead5724fd56c3075d60ff0cfe470e2d551', class: "booked-event-timezone" }, h("globe-icon", { key: 'f21ee01ed85b02982e013d6731bffd8a20ef0ad9' }), TIMEZONE_MAP[this.selectedTimezone]), h("div", { key: '5408744046d0b755044db2c88f15dfeed1ac0cd1', class: "event-card-wrapper", part: "nbec__card" }, h("div", { key: 'c1e352e8395aa35c9faadadf10a82f04b10cf88e', class: "calendar-icon" }, h("calendar-check-icon", { key: '9e4464eb5a88dafa35340d8441bfc6570c880151' })), h("div", { key: '2265e9737ed82f085e348a6bde53dc68d7d7fc94', class: "booked-event-header" }, h("h2", { key: '30ba50948f9de4ef3f47c72547478c81870d85b2', slot: "card-title", part: "nbec__title" }, !!this.rescheduleBookingId && !this.isLoading
            ? `${instance.t('bookingRescheduled')}`
            : isManualConfirmation && !this.isLoading
                ? `${instance.t('bookingSent')}`
                : `${instance.t('bookingConfirmed')}`, "!"), h("div", { key: '8ae1ffd38656334a233bca8eb7b25b6e7c03c937', class: "card-description", part: "nbec__description" }, isManualConfirmation ? instance.t('bookingSentDescription') : h("span", null, instance.t('bookingConfirmedDescription')))), h("div", { key: 'cf6a84c9dc87e923c21468561a7601f476fd85a1', class: "booking-date-time" }, h("checkmark-circle-icon", { key: '7e42ae42fbe6c87a21f2a6031796132a5562d882' }), h("h3", { key: 'd92ede4d9f33a3dd461a0e14c4965e614c23f075' }, instance.t('bookingDateAndTimeHeader')), h("p", { key: '1da0c2ff11644c6718e8ca512baffbc0affb3fd5' }, this.selectedTimeslot?.start_time
            ? capitalizeFirstLetter(new Date(this.selectedTimeslot?.start_time).toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage], { dateStyle: 'full' }))
            : '-', ' ', h("br", { key: '167cd8c78e97697766713811549588e9d6fd3fcb' }), this.startTime, " - ", this.endTime)), h("div", { key: '61d35600d07d7ffccbce3f3aa93a3bfed385637e', class: "booking-participants" }), !isManualConfirmation && (h("div", { class: "button-container" }, h("div", { class: {
                'footer': true,
                'no-footer': (this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options) ||
                    this.configSettings?.booking_type === 'organizer-confirmation',
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, `${instance.t('cancelBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleRescheduleButtonClicked, disabled: this.isLoading, part: "nbec__button-outline nbec__reschedule-cta" }, `${instance.t('rescheduleBookingButton')}`)))))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            rescheduleBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'rescheduleBookedEventError', event.detail);
            },
            cancelBookedEventValidationError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'cancelBookedEventValidationError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
NylasBookedEventCard.style = nylasBookedEventCardCss;

export { NylasBookedEventCard as nylas_booked_event_card };

//# sourceMappingURL=nylas-booked-event-card.entry.js.map