import { r as registerInstance, c as createEvent, h, H as Host, a as getElement, F as Fragment } from './index-7cb0dd3d.js';
import { R as RegisterComponent } from './register-component-a169494c.js';
import { a as debug, l as formatTimezone, i as instance, j as capitalizeFirstLetter, s as sanitizeHtml, n as sanitize, b as addDaysToCurrentDate, o as getLastDayOfMonth, q as getFirstDayOfMonth, r as isSameDay, t as convertMinutesToHoursAndMinutes, v as translateMonth, w as isSameMonth, x as getTimezoneOffset } from './utils-c3434a93.js';
import { T as TIMEZONE_MAP, b as LANGUAGE_CODE_MAP, a as LANGUAGE_MAP } from './constants-91d76d21.js';

const nylasBookedEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-booked-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.event-card-wrapper{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;margin-bottom:2rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 0;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:16px;font-weight:400;border-bottom:1px solid var(--nylas-base-200);width:inherit;padding:0 0 1.5rem}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.booked-event-header .card-description{text-align:center}.booking-date-time,.booking-participants{padding:0 1rem;margin-top:1.5rem;margin-left:3rem;display:flex;flex-direction:column;justify-content:space-between;align-self:flex-start;position:relative}.booking-date-time svg,.booking-participants svg{color:var(--nylas-base-700);position:absolute;left:-10px}.booking-date-time .block,.booking-participants .block{display:block}.booking-date-time h3,.booking-participants h3{color:var(--nylas-base-600);margin:0;font-size:16px;font-weight:600;line-height:1.25rem;text-align:justify;margin-bottom:4px}.booking-date-time p,.booking-participants p{font-size:16px;margin:0;font-weight:400;text-align:justify;color:var(--nylas-base-800)}.booking-participants{margin-bottom:1.5rem}.booked-event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:1.5rem;gap:4px;margin:2rem;align-items:center;align-self:flex-end}.button-container{width:inherit}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);border-top:1px solid var(--nylas-base-200);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.footer.no-template-cols{grid-template-columns:1fr}.footer.no-footer{display:none}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}";
const NylasBookedEventCardStyle0 = nylasBookedEventCardCss;

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookedEventCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.cancelBookingButtonClicked = createEvent(this, "cancelBookingButtonClicked", 7);
        this.rescheduleButtonClicked = createEvent(this, "rescheduleButtonClicked", 7);
        this.rescheduleBookedEventError = createEvent(this, "rescheduleBookedEventError", 7);
        this.cancelBookedEventValidationError = createEvent(this, "cancelBookedEventValidationError", 7);
        this.handleCancelBookingButtonClicked = () => {
            const startTime = new Date(this.selectedTimeslot.start_time);
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
            if (dateTillCancellation < new Date().getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.selectedLanguage = navigator.language;
        this.startTime = '';
        this.endTime = '';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-booked-event-card] Component did load`);
        if (!this.eventInfo) {
            console.warn('[nylas-booked-event-card] "eventInfo" prop missing. Please provide the event info to display the event details in the booked event card component.');
        }
        if (!this.bookingInfo) {
            console.warn('[nylas-booked-event-card] "bookingInfo" prop missing. Please provide the booking info to display the guest details in the booked event card component.');
        }
        this.applyThemeConfig(this.themeConfig);
        this.startTime = formatTimezone(this.selectedTimeslot?.start_time, this.selectedTimezone);
        this.endTime = formatTimezone(this.selectedTimeslot?.end_time, this.selectedTimezone);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        const bookingType = this.configSettings?.booking_type;
        const isManualConfirmation = bookingType && bookingType !== 'booking';
        return (h(Host, { key: '5c0d6ded922007d327b55a3536338a82302ca0be', part: "nbec" }, h("div", { key: 'a0d3c60605fbf54303527bc6001477db946eb560', class: "nylas-booked-event-card" }, h("div", { key: '043a3aead5724fd56c3075d60ff0cfe470e2d551', class: "booked-event-timezone" }, h("globe-icon", { key: 'f21ee01ed85b02982e013d6731bffd8a20ef0ad9' }), TIMEZONE_MAP[this.selectedTimezone]), h("div", { key: '5408744046d0b755044db2c88f15dfeed1ac0cd1', class: "event-card-wrapper", part: "nbec__card" }, h("div", { key: 'c1e352e8395aa35c9faadadf10a82f04b10cf88e', class: "calendar-icon" }, h("calendar-check-icon", { key: '9e4464eb5a88dafa35340d8441bfc6570c880151' })), h("div", { key: '2265e9737ed82f085e348a6bde53dc68d7d7fc94', class: "booked-event-header" }, h("h2", { key: '30ba50948f9de4ef3f47c72547478c81870d85b2', slot: "card-title", part: "nbec__title" }, !!this.rescheduleBookingId && !this.isLoading
            ? `${instance.t('bookingRescheduled')}`
            : isManualConfirmation && !this.isLoading
                ? `${instance.t('bookingSent')}`
                : `${instance.t('bookingConfirmed')}`, "!"), h("div", { key: '8ae1ffd38656334a233bca8eb7b25b6e7c03c937', class: "card-description", part: "nbec__description" }, isManualConfirmation ? instance.t('bookingSentDescription') : h("span", null, instance.t('bookingConfirmedDescription')))), h("div", { key: 'cf6a84c9dc87e923c21468561a7601f476fd85a1', class: "booking-date-time" }, h("checkmark-circle-icon", { key: '7e42ae42fbe6c87a21f2a6031796132a5562d882' }), h("h3", { key: 'd92ede4d9f33a3dd461a0e14c4965e614c23f075' }, instance.t('bookingDateAndTimeHeader')), h("p", { key: '1da0c2ff11644c6718e8ca512baffbc0affb3fd5' }, this.selectedTimeslot?.start_time
            ? capitalizeFirstLetter(new Date(this.selectedTimeslot?.start_time).toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage], { dateStyle: 'full' }))
            : '-', ' ', h("br", { key: '167cd8c78e97697766713811549588e9d6fd3fcb' }), this.startTime, " - ", this.endTime)), h("div", { key: '61d35600d07d7ffccbce3f3aa93a3bfed385637e', class: "booking-participants" }), !isManualConfirmation && (h("div", { class: "button-container" }, h("div", { class: {
                'footer': true,
                'no-footer': (this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options) ||
                    this.configSettings?.booking_type === 'organizer-confirmation',
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, `${instance.t('cancelBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleRescheduleButtonClicked, disabled: this.isLoading, part: "nbec__button-outline nbec__reschedule-cta" }, `${instance.t('rescheduleBookingButton')}`)))))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$9([
    RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            rescheduleBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'rescheduleBookedEventError', event.detail);
            },
            cancelBookedEventValidationError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'cancelBookedEventValidationError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$9("design:type", Function),
    __metadata$9("design:paramtypes", []),
    __metadata$9("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
NylasBookedEventCard.style = NylasBookedEventCardStyle0;

const nylasBookingFormCss = ":host{display:block;height:100%;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-booking-form{width:100%;padding:1.5rem;box-sizing:border-box;height:450px;overflow-y:auto;height:100%}form{height:100%;display:flex;flex-direction:column;justify-content:space-between;align-items:center}sp-textfield{--spectrum-corner-radius-100:var(--nylas-border-radius-2x);--spectrum-textfield-border-color:var(--nylas-base-300);position:relative;width:100%;height:48px;margin-bottom:16px;color:var(--nylas-base-500)}.cta{width:100%;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;align-items:flex-start;justify-content:space-between;gap:0.5rem;padding:14px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.cta{grid-template-columns:1fr}}.input-wrapper{width:100%;display:flex;flex-direction:column;align-items:flex-start;gap:4px;margin-bottom:1rem}.input-wrapper input::placeholder{color:var(--nylas-base-300)}.input-wrapper label,.input-wrapper input{font-family:var(--nylas-font-family);font-size:16px}.input-wrapper .help-text{margin:0;color:var(--nylas-error)}.button-wrapper{width:100%;align-items:flex-start;height:max-content;position:relative}.button-content{display:flex;gap:4px;align-items:center}sp-infield-button{--spectrum-infield-button-background-color:transparent;--spectrum-infield-button-background-color-hover:transparent;--spectrum-infield-button-background-color-active:transparent;--spectrum-infield-button-border-color:transparent;--spectrum-infield-button-border-width:1px;--spectrum-infield-button-border-radius:0;color:var(--nylas-base-600);background:transparent;border:none;outline:1px solid var(--nylas-base-300);border-radius:0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x) 0;height:52px;width:52px;display:flex;position:absolute;right:0;align-items:center;justify-content:center;cursor:pointer}sp-infield-button sp-icon-cross300{color:var(--nylas-base-600)}sp-infield-button.error{border-width:2px;border-color:var(--nylas-error)}input[type=text],input[type=email]{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%}input[type=text]:focus,input[type=email]:focus{outline-color:var(--nylas-primary)}input[type=text].error,input[type=email].error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}input[type=text].error::placeholder,input[type=email].error::placeholder{font-weight:400}input[type=text]::placeholder,input[type=email]::placeholder{color:var(--nylas-base-300)}input[type=text].guest-email,input[type=email].guest-email{color:var(--nylas-base-900);padding-right:52px}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}button-component.remove-guest{position:absolute;height:51px;right:0}button-component.remove-guest.error button{border-color:var(--nylas-error)}button-component.remove-guest button{height:inherit;border-top-left-radius:initial;border-bottom-left-radius:initial;border:none !important;border-left:1px solid var(--nylas-base-300) !important}button-component.remove-guest button:hover,button-component.remove-guest button:focus{outline:1px solid var(--nylas-primary) !important;color:var(--nylas-primary)}button-component.back button{--dot-color:var(--nylas-base-800)}.guest-email-input{position:relative;display:flex;width:100%}multi-select-dropdown::part(msd_dropdown-label){margin-bottom:4px}multi-select-dropdown::part(msd_dropdown_error){font-size:16px}multi-select-dropdown::part(msd_dropdown-button){height:52px;border-color:var(--nylas-base-300)}multi-select-dropdown::part(msd_dropdown-button--error){border-width:2px;border-color:var(--nylas-error)}";
const NylasBookingFormStyle0 = nylasBookingFormCss;

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
const NylasBookingForm = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.nameChanged = createEvent(this, "nameChanged", 7);
        this.emailChanged = createEvent(this, "emailChanged", 7);
        this.backButtonClicked = createEvent(this, "backButtonClicked", 7);
        this.detailsConfirmed = createEvent(this, "detailsConfirmed", 7);
        this.bookingFormError = createEvent(this, "bookingFormError", 7);
        this.bookingFormSubmitted = createEvent(this, "bookingFormSubmitted", 7);
        this.handleGuestChange = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests[guestIndex] = sanitizeHtml(email);
            this.guestEmails = [...guests];
        };
        this.handleGuestBlur = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            if (email === '') {
                this.guestEmailErrors[guestIndex] = instance.t('fieldRequired', { field: instance.t('email') });
                return;
            }
            if (!emailRegex.test(email)) {
                this.guestEmailErrors[guestIndex] = instance.t('invalidInputFormat', { field: instance.t('email') });
                return;
            }
            this.handleGuestChange(guestIndex, email);
        };
        this.addGuestButtonClickedHandler = e => {
            e.preventDefault();
            this.guestEmails = [...this.guestEmails, ''];
        };
        this.removeGuestButtonClickHandler = (e, guestIndex) => {
            e.preventDefault();
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests.splice(guestIndex, 1);
            this.guestEmails = [...guests];
        };
        this.handleBackButtonClicked = e => {
            e.preventDefault();
            this.backButtonLoading = true;
            this.backButtonClicked.emit();
        };
        this.bookButtonClickedHandler = async (e) => {
            e.preventDefault();
            const formSubmittedEvent = this.bookingFormSubmitted.emit();
            if (formSubmittedEvent.defaultPrevented) {
                return;
            }
            debug('nylas-booking-form', 'bookButtonClickedHandler', this.bookingInfo);
            const name = this.name || this.bookingInfo?.primaryParticipant?.name;
            const email = this.email || this.bookingInfo?.primaryParticipant?.email;
            if (!name || name === '') {
                this.isNameValid = false;
                this.validationError.name = instance.t('fieldRequired', { field: instance.t('name') }) || 'Name is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Name is required',
                });
                return;
            }
            if (!email || email === '') {
                this.isEmailValid = false;
                this.validationError.email = instance.t('fieldRequired', { field: instance.t('email') }) || 'Email is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Email is required',
                });
                return;
            }
            if (!emailRegex.test(email)) {
                this.isEmailValid = false;
                this.validationError.email = instance.t('invalidInputFormat', { field: instance.t('email') });
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: instance.t('invalidInputFormat', { field: instance.t('email') }) || 'Invalid email',
                });
                return;
            }
            let guests = [];
            if (this.guestEmails.length > 0) {
                let hasError = false;
                this.guestEmails.forEach((email, i) => {
                    if (email === '') {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: instance.t('fieldRequired', { field: instance.t('email') }) };
                    }
                    else if (!emailRegex.test(email)) {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: instance.t('invalidInputFormat', { field: instance.t('email') }) };
                    }
                });
                if (hasError) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: instance.t('invalidInputFormat', { field: instance.t('guestEmail') }) || 'Invalid guest email',
                    });
                    return;
                }
                guests = this.guestEmails.map((email) => ({ name: email.trim(), email: email.trim() }));
            }
            else if (this.bookingInfo?.guests) {
                guests = this.bookingInfo?.guests;
            }
            const bookingInfoAdditionalFields = {};
            const configAdditionalFields = this.configSettings?.scheduler?.additional_fields || {};
            const configSettingsBookingAdditionalFields = this.configSettings?.booking?.additional_fields || {};
            if (this.bookingInfo?.additionalFields) {
                Object.entries(this.bookingInfo.additionalFields).forEach(([key, obj]) => {
                    if (key in configAdditionalFields) {
                        bookingInfoAdditionalFields[key] = obj.value;
                    }
                });
            }
            Object.entries(configAdditionalFields).forEach(([key, obj]) => {
                if (!(key in bookingInfoAdditionalFields)) {
                    const value = configSettingsBookingAdditionalFields[key] || obj.default || '';
                    bookingInfoAdditionalFields[key] = value;
                }
            });
            this.detailsConfirmed.emit({
                primaryParticipant: {
                    name: name,
                    email: email,
                },
                guests: guests,
                additionalFields: { ...bookingInfoAdditionalFields, ...this.additionalFields },
            });
        };
        this.updateAdditionalFields = (name, value) => {
            if (this.additionalFields) {
                this.additionalFields[name] = value;
            }
        };
        this.isLoading = undefined;
        this.bookingInfo = undefined;
        this.eventInfo = undefined;
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.name = '';
        this.email = '';
        this.guestEmails = [];
        this.guestEmailErrors = {};
        this.isNameValid = true;
        this.isEmailValid = true;
        this.additionalFields = {};
        this.validationError = { name: '', email: '' };
        this.backButtonLoading = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() {
        debug('nylas-booking-form', 'componentWillLoad', this.bookingInfo);
    }
    componentDidLoad() {
        debug('nylas-booking-form', 'componentDidLoad', this.bookingInfo);
        if (this.bookingInfo && this.bookingInfo?.primaryParticipant) {
            this.name = this.bookingInfo.primaryParticipant?.name;
            this.email = this.bookingInfo.primaryParticipant?.email;
        }
        else if (this.configSettings?.booking?.guest) {
            this.name = this.configSettings?.booking?.guest?.name;
            this.email = this.configSettings?.booking?.guest?.email;
        }
        if (this.configSettings?.booking?.additional_guests && this.configSettings?.booking?.additional_guests.length > 0) {
            this.guestEmails = this.configSettings?.booking?.additional_guests.map(guest => guest.email);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue.primaryParticipant) {
            this.name = newValue.primaryParticipant.name;
            this.email = newValue.primaryParticipant.email;
        }
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    changeName(name) {
        this.isNameValid = true;
        this.validationError.name = '';
        this.name = sanitize(name);
        this.nameChanged.emit(name);
    }
    changeEmail(email) {
        this.isEmailValid = true;
        this.validationError.email = '';
        this.email = sanitizeHtml(email);
        this.emailChanged.emit(email);
    }
    resetGuestEmailError(guestIndex) {
        const errors = { ...this.guestEmailErrors };
        delete errors[guestIndex];
        this.guestEmailErrors = { ...errors };
    }
    nylasFormInputChangedHandler(event) {
        switch (event.detail.name) {
            case 'name':
                this.changeName(event.detail.value);
                break;
            case 'email':
                this.changeEmail(event.detail.value);
                break;
            default:
                if (event.detail.error) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: event.detail.error,
                    });
                    return;
                }
                this.updateAdditionalFields(event.detail.name, event.detail.value);
                break;
        }
    }
    selectOptionChangedHandler(event) {
        if (event.detail.error) {
            this.bookingFormError.emit({
                title: 'Booking form error',
                description: event.detail.error,
            });
            return;
        }
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    selecedOptionsChangedHandler(event) {
        if (event.detail.error) {
            this.bookingFormError.emit({
                title: 'Booking form error',
                description: event.detail.error,
            });
            return;
        }
        const values = event.detail.value.toString();
        this.updateAdditionalFields(event.detail.name, values);
    }
    switchToggledHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.checked ? 'true' : 'false');
    }
    checkboxToggledHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.checked ? 'true' : 'false');
    }
    radioChangedHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    dropdownDefaultSelectedHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    render() {
        return (h(Host, { key: '5c6062534cb10178622df56b87e9d27093302f67' }, h("form", { key: 'd8fba8dc8b940082f774b1345641bbe6e756c295', onSubmit: e => this.bookButtonClickedHandler(e), noValidate: true }, h("div", { key: 'b3ce646d930f267196eea3dddd45036d6ead5b83', class: "nylas-booking-form", part: "nbf" }, h("div", { key: '8303180ac1fa78c4652e1a5f9b15950840ecfc11', class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { key: '861d9988deae50c98a013e573b04a73283d7ddd3', label: instance.t('name'), name: "name", id: "name", defaultValue: this.bookingInfo?.primaryParticipant?.name || this.configSettings?.booking?.guest?.name || this.name, placeholder: instance.t('namePlaceholder'), type: "text", required: true, requiredError: instance.t('fieldRequired', { field: instance.t('name') }), patternError: instance.t('invalidInputFormat', { field: instance.t('name') }), part: "nbf__input-textfield" })), h("div", { key: '4badb20b9713d9eb7c40687a830a516eaa057b18', class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { key: '92e5688fef7bf79e73e42c33c89173b0ef027101', label: instance.t('email'), name: "email", id: "email", pattern: emailRegex, defaultValue: this.bookingInfo?.primaryParticipant?.email || this.configSettings?.booking?.guest?.email || this.email, placeholder: instance.t('emailPlaceholder'), type: "email", required: true, requiredError: instance.t('fieldRequired', { field: instance.t('email') }), patternError: instance.t('invalidInputFormat', { field: instance.t('email') }), part: "nbf__input-textfield" })), this.configSettings?.scheduler?.hide_additional_guests !== true && (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, this.guestEmails.map((email, index) => (h("div", { class: "input-wrapper button-wrapper" }, h("label", { class: {
                error: !!this.guestEmailErrors[index],
            } }, instance.t('guestEmail')), h("div", { class: "guest-email-input" }, h("input", { type: "email", id: `guest-email-${index}`, maxLength: 100, class: {
                'guest-email': true,
                'error': !!this.guestEmailErrors[index],
            }, placeholder: instance.t('guestEmailPlaceholder'), value: email, "data-index": index, part: "nbf__input-textfield", onBlur: (e) => this.handleGuestBlur(index, e.target?.value), onInput: (e) => this.handleGuestChange(index, e.target?.value) }), h("button-component", { variant: "basic", tooltip: "Remove guest", onClick: (e) => this.removeGuestButtonClickHandler(e, index), class: {
                'remove-guest': true,
                'error': !!this.guestEmailErrors[index],
            } }, h("close-icon", null))), h("p", { class: "help-text" }, this.guestEmailErrors[index])))), h("button-component", { class: "add-guest", variant: "invisible", part: "nbf__button-ghost", onClick: e => this.addGuestButtonClickedHandler(e) }, h("div", { class: "button-content" }, h("add-circle-icon", { slot: "icon" }), this.guestEmails.length > 0 ? `${instance.t('addAnotherGuest')}` : `${instance.t('addGuest')}`)))), Object.entries((this.configSettings?.scheduler?.additional_fields || {}))
            ?.sort((a, b) => a[1].order - b[1].order)
            .map(x => {
            const field = x[1];
            const label = field.label;
            const key = x[0];
            const defaultValue = this.bookingInfo?.additionalFields?.[key]?.value || this.configSettings?.booking?.additional_fields?.[key] || field.default || '';
            switch (field.type) {
                case 'dropdown':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("select-dropdown", { label: label, name: key, id: key, withSearch: false, defaultSelectedOption: defaultValue ? { value: defaultValue, label: defaultValue } : undefined, options: field.options?.map(option => ({ value: option, label: option })), required: field.required, exportparts: "sd_dropdown: nbf__dropdown, sd_dropdown-button: nbf__dropdown-button, sd_dropdown-content: nbf__dropdown-content" })));
                case 'checkbox':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("checkbox-component", { label: label, name: key, id: key, checked: defaultValue === 'true', required: field.required, part: "nbf__checkbox-component" })));
                case 'radio_button':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("radio-button-group", { label: label, name: key, id: key, defaultSelectedValue: defaultValue || field.options?.[0] || '', options: field.options?.map(option => ({ value: option, label: option })), required: field.required, part: "nbf__radio-button-group" })));
                case 'multi_line_text':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("textarea-component", { label: label, defaultValue: defaultValue, name: key, id: key, required: field.required, part: "nbf__textarea-component" })));
                case 'date':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("nylas-date-component", { label: label, defaultValue: defaultValue, name: key, id: key, required: field.required, part: "nbf__date-component" })));
                case 'multi_select':
                    const defaultValues = defaultValue?.split(',').map(item => item.trim()) || [];
                    return (h("div", null, h("multi-select-dropdown", { label: label, name: key, id: key, options: field.options?.map(option => ({ value: option, label: option, selected: defaultValues.includes(option) })), required: field.required, exportparts: "msd_dropdown: nbf__ms_dropdown, msd_dropdown-label: nbf__ms_dropdown-label, msd_dropdown-button: nbf__ms_dropdown-button, msd_dropdown-content: nbf__ms_dropdown-content, msd_dropdown_error: nbf__ms_dropdown_error, msd_dropdown-button--error: nbf__ms_dropdown-button--error" })));
                case 'metadata':
                    return null;
                default:
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { label: label, name: key, id: key, type: field.type, defaultValue: defaultValue || '', requiredError: instance.t('fieldRequired', { field: label }), required: field.required, part: "nbf__input-textfield" })));
            }
        })), h("div", { key: '6f7a32f05fdf35515851598001ebb18b4a2b52ee', class: "cta" }, h("button-component", { key: 'de9548b9fab9475596750725fb9498940cde29b1', variant: 'basic', class: "back", part: "nbf__button-outline", isLoading: this.backButtonLoading && this.isLoading, onClick: this.handleBackButtonClicked }, h("slot", { key: 'e5fdb427c7b6e25b20c439b5edaa8e545d49cb44', name: "booking-form-back-label" }, `${instance.t('backButton')}`)), h("button-component", { key: '688a5974bc75ce734a4409e33d379384a1840ff8', variant: 'primary', isLoading: !this.backButtonLoading && this.isLoading, disabled: this.isLoading, part: "nbf__button-primary", type: "submit" }, h("slot", { key: 'a588fa553809bb9042db4b06bb0072fbb1cafc15', name: "booking-form-book-label" }, `${instance.t('bookNowButton')}`))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "bookingInfo": ["bookingInfoChangedHandler"],
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$8([
    RegisterComponent({
        name: 'nylas-booking-form',
        stateToProps: new Map([
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.eventInfo', 'eventInfo'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            backButtonClicked: async (_event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.toggleAdditionalData(false);
            },
            nameChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantName(event.detail);
            },
            emailChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantEmail(event.detail);
            },
            detailsConfirmed: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'detailsConfirmed', event.detail);
            },
            bookingFormSubmitted: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'bookingFormSubmitted', event.detail);
            },
            bookingFormError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'bookingFormError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$8("design:type", Function),
    __metadata$8("design:paramtypes", []),
    __metadata$8("design:returntype", void 0)
], NylasBookingForm.prototype, "render", null);
NylasBookingForm.style = NylasBookingFormStyle0;

const nylasCancelBookingFormCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;display:block;width:400px;font-family:var(--nylas-font-family)}.nylas-cancel-booking-form{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}.nylas-cancel-booking-form form{width:100%}.nylas-cancel-booking-form__title{font-size:18px;font-weight:600;margin-bottom:0;color:var(--nylas-base-900)}.nylas-cancel-booking-form__description{font-size:16px;font-style:normal;font-weight:400;line-height:140%;color:var(--nylas-base-600);padding-bottom:1.25rem}.nylas-cancel-booking-form__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}.footer{display:grid;grid-template-columns:1fr 1fr;width:100%;padding-top:1.25rem;gap:1rem;border-top:1px solid var(--nylas-base-200);margin-top:1.25rem}";
const NylasCancelBookingFormStyle0 = nylasCancelBookingFormCss;

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelBookingForm = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.goBackButtonClicked = createEvent(this, "goBackButtonClicked", 7);
        this.cancelBookingFormSubmitted = createEvent(this, "cancelBookingFormSubmitted", 7);
        this.triggerValidation = createEvent(this, "triggerValidation", 7);
        this.cancelBookedEventError = createEvent(this, "cancelBookedEventError", 7);
        this.cancelBookingFormError = createEvent(this, "cancelBookingFormError", 7);
        this.handleGoBackClicked = () => {
            this.goBackButtonClicked.emit();
        };
        this.handleSubmitCancelBooking = (event) => {
            this.triggerValidation.emit({});
            event.preventDefault();
            if (!this.cancellationReason) {
                this.cancellationError = instance.t('cancellationErrorMessage');
                this.cancelBookingFormError.emit({ title: instance.t('cancelBokingFormError'), description: instance.t('cancellationErrorMessage') });
                return;
            }
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            if (this.selectedTimeslot && minCancellationNotice) {
                const startTime = new Date(this.selectedTimeslot?.start_time);
                const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
                if (dateTillCancellation < new Date().getTime()) {
                    this.cancelBookedEventError.emit({
                        error: {
                            title: instance.t('cancellationErrorTitle'),
                            message: instance.t('minimumCancellationNoticeErrorMessage', { minCancellationNotice }),
                        },
                    });
                    return;
                }
            }
            debug(`[nylas-cancel-booking-form] Cancel booking form submitted with reason: ${this.cancellationReason}`);
            const errorHandler = (error) => {
                this.cancelBookedEventError.emit(error);
            };
            if (this.cancelBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.cancelBookingId, action: 'cancel', reason: this.cancellationReason, errorHandler });
            }
            else if (this.rejectBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.rejectBookingId, action: 'reject', reason: this.cancellationReason, errorHandler });
            }
        };
        this.cancelBookingId = undefined;
        this.rejectBookingId = undefined;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
        this.eventInfo = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.cancellationReason = '';
        this.cancellationError = '';
        this.cancellationPolicy = this.configSettings?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    configSettingsChangedHandler(newValue) {
        this.cancellationPolicy = newValue?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        debug(`[nylas-cancel-booking-form] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancel-booking-form] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancel-booking-form] Component did load`);
        if (!this.cancelBookingId) {
            console.warn(`[nylas-cancel-booking-form] No booking ID provided, "cancelBookingId" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        debug(`[nylas-cancel-booking-form] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    handleNylasFormInputChanged(event) {
        this.triggerValidation.emit({});
        if (event.detail.name === 'cancel-reason') {
            this.cancellationReason = event.detail.value;
            this.cancellationError = event.detail.error;
        }
    }
    render() {
        return (h(Host, { key: 'a883955600837a2006648886cc55ac8bd0ea0076', part: "ncbf" }, h("div", { key: '868e3b711cd18b2fabc29d5d179255ed1d9ba0dc', class: "nylas-cancel-booking-form", part: "ncbf__card" }, h("div", { key: '20dabbd57825f213f7a7f1700de22cd8228409b8', class: "nylas-cancel-booking-form__calendar-icon", part: "ncbf__icon" }, h("calendar-cancel-icon", { key: 'd6bab72a846359fdec0e0ee30c23c4ab41f33a8e' })), h("h3", { key: 'ac741c5913c7977bb411f6dec7ca25ce498a875a', class: "nylas-cancel-booking-form__title", part: "ncbf__title" }, instance.t('cancelBookingTitle')), h("div", { key: '4938ceba259171a7b73465ee1979f7f42d99110f', class: "nylas-cancel-booking-form__description", part: "ncbf__description" }, !this.configSettings?.scheduler?.cancellation_policy ? `${instance.t('cancelBookingMessage')}` : this.cancellationPolicy), h("form", { key: '7b33c284b2c9ee3aa92b5faf1f9b25acb5cacd2e', onSubmit: this.handleSubmitCancelBooking }, h("textarea-component", { key: 'c2cdfac338d6af301c84ce5120d79e0eba92f56a', id: "cancel-reason", name: "cancel-reason", required: true, label: instance.t('reasonForCancellation'), class: this.cancellationError ? 'error' : '', part: "ncbf__reason-textarea", defaultValue: this.cancellationReason }), h("div", { key: '675ccb5dc874a97d05cacde94fec4b17c95c2e07', class: "footer" }, h("button-component", { key: '2dcba1cec03a6f21766dc1bc3f10aa8790dcc022', variant: 'destructive', class: "cancel", type: "submit", part: "ncbf__button-cta", disabled: this.isLoading }, instance.t('cancelBookingButton')), !!this.eventInfo && (h("button-component", { variant: 'basic', class: "back", part: "ncbf__button-outline", onClick: this.handleGoBackClicked }, instance.t('goBackButton'))))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "configSettings": ["configSettingsChangedHandler"],
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$7([
    RegisterComponent({
        name: 'nylas-cancel-booking-form',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.eventInfo', 'eventInfo'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.cancelBookingId', 'cancelBookingId'],
            ['scheduler.rejectBookingId', 'rejectBookingId'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            cancelBookingFormSubmitted: async (event, nylasSchedulerConnector) => {
                const { action, errorHandler } = event.detail;
                if (action === 'cancel') {
                    const result = await nylasSchedulerConnector.scheduler.cancelBooking(event.detail.bookingId, event.detail.reason);
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
                else if (action === 'reject') {
                    const result = await nylasSchedulerConnector.scheduler.updateBooking({
                        bookingId: event.detail.bookingId,
                        status: 'cancelled',
                        reason: event.detail.reason,
                    });
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
            },
            goBackButtonClicked: async (event, nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'goBackButtonClicked', event.detail);
                nylasSchedulerConnector.scheduler.goBack();
            },
            cancelBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookedEventError', event.detail);
            },
            cancelBookingFormError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookingFormError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$7("design:type", Function),
    __metadata$7("design:paramtypes", []),
    __metadata$7("design:returntype", void 0)
], NylasCancelBookingForm.prototype, "render", null);
NylasCancelBookingForm.style = NylasCancelBookingFormStyle0;

const nylasCancelledEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-cancelled-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family);width:400px;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.nylas-cancelled-event-card{width:inherit}}.nylas-cancelled-event-card__title{font-size:18px;font-weight:600;line-height:24px;color:var(--nylas-base-900);text-align:center}.nylas-cancelled-event-description{font-size:16px;font-weight:500;color:var(--nylas-base-600)}.nylas-cancelled-event-card__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}.nylas-cancelled-event-card__cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;margin-top:1rem}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}button-component{width:100%}";
const NylasCancelledEventCardStyle0 = nylasCancelledEventCardCss;

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelledEventCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.closeCancelEventCardClicked = createEvent(this, "closeCancelEventCardClicked", 7);
        this.cancelledEventCardError = createEvent(this, "cancelledEventCardError", 7);
        this.handleCloseClicked = () => {
            this.isClosing = true;
            const errorHandler = (error) => {
                this.cancelledEventCardError.emit(error);
                this.isClosing = false;
            };
            this.closeCancelEventCardClicked.emit({ errorHandler });
        };
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.cancelledEventInfo = undefined;
        this.isClosing = false;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        debug(`[nylas-cancelled-event-card] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancelled-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancelled-event-card] Component did load`);
        if (!this.cancelledEventInfo) {
            console.warn(`[nylas-cancelled-event-card] No cancelled event info provided, "cancelledEventInfo" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        debug(`[nylas-cancelled-event-card] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (h(Host, { key: 'da9997f15e2a3b54e88cecda75b989ff1a929a17', part: "ncec" }, h("div", { key: '8e516fdf70349c1c677f9f43373b513a2777b281', class: "nylas-cancelled-event-card", part: "ncec__card" }, h("div", { key: '2bd793e49e60204dc0b5ec6e2ed60aa8f57e50b5', class: "nylas-cancelled-event-card__calendar-icon", part: "ncec__icon" }, h("calendar-cancel-icon", { key: '36b868641475fa3b2ac6be2d98c2f8b2c51c5538' })), h("h3", { key: '3c2416240fc848487681adbb90eab89877178071', class: "nylas-cancelled-event-card__title", part: "ncec__title" }, instance.t('bookingCancelledTitle'), "!"), h("div", { key: 'b725c7e2599a5924426a9b37e896cc64095d994a', class: "nylas-cancelled-event-card__description", part: "ncec__description" }, instance.t('bookingCancelledMessage'), " ", this.configSettings?.organizer?.name || 'the participants', "."), h("div", { key: 'e23d97e0f59dac5373c652bcfc29b414bafcf099', class: "nylas-cancelled-event-card__cta" }, h("button-component", { key: '7cac75bbdc25ae48051d00fccfc5e322b86c2832', variant: "basic", disabled: this.isClosing, part: "ncec__button-outline", onClick: this.handleCloseClicked }, this.isClosing ? `${instance.t('closingButton')}...` : `${instance.t('closeButton')}`)))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$6([
    RegisterComponent({
        name: 'nylas-cancelled-event-card',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            closeCancelEventCardClicked: async (_, nylasschedulerconnector) => {
                const result = await nylasschedulerconnector.scheduler.resetCancel();
                const { errorHandler } = _.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            cancelledEventCardError: async (event, _nylasschedulerconnector) => {
                debug('nylas-cancelled-event-card', 'cancelledEventCardError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", []),
    __metadata$6("design:returntype", void 0)
], NylasCancelledEventCard.prototype, "render", null);
NylasCancelledEventCard.style = NylasCancelledEventCardStyle0;

const nylasConfirmedEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-confirmed-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family);width:400px;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.nylas-confirmed-event-card{width:inherit}}.nylas-confirmed-event-card__title{font-size:18px;font-weight:600;line-height:24px;color:var(--nylas-base-900);text-align:center}.nylas-confirmed-event-description{font-size:16px;font-weight:500;color:var(--nylas-base-600)}.nylas-confirmed-event-card__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}.nylas-confirmed-event-card__cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;margin-top:1rem}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}button-component{width:100%}";
const NylasConfirmedEventCardStyle0 = nylasConfirmedEventCardCss;

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasConfirmedEventCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.closeConfirmEventCardClicked = createEvent(this, "closeConfirmEventCardClicked", 7);
        this.confirmedEventCardError = createEvent(this, "confirmedEventCardError", 7);
        this.handleCloseClicked = () => {
            this.isClosing = true;
            const errorHandler = (error) => {
                this.confirmedEventCardError.emit(error);
                this.isClosing = false;
            };
            this.closeConfirmEventCardClicked.emit({ errorHandler });
        };
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.confirmedEventInfo = undefined;
        this.isClosing = false;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        debug(`[nylas-confirmed-event-card] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-confirmed-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-confirmed-event-card] Component did load`);
        if (!this.confirmedEventInfo) {
            console.warn(`[nylas-confirmed-event-card] No confirmed event info provided, "confirmedEventInfo" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        debug(`[nylas-confirmed-event-card] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (h(Host, { key: '32150831bc61cda8bee5b633cf9f25d13adb50be', part: "ncec" }, h("div", { key: 'ced74e070e338973dcf89c61c010357940448dc3', class: "nylas-confirmed-event-card", part: "ncec__card" }, h("div", { key: '3aa9395069cab31c0a586405b1cbff880e175f83', class: "nylas-confirmed-event-card__calendar-icon", part: "ncec__icon" }, h("calendar-cancel-icon", { key: '97fd8d2aacca8fb53c0dccb3b043d2b2e1208b09' })), h("h3", { key: '6e4c56557ca295159a6f3a4c56e181f0da17bf07', class: "nylas-confirmed-event-card__title", part: "ncec__title" }, instance.t('confirmedEventCardTitle'), "!"), h("div", { key: '631dd06c937cc87e54efc9a02aed1ca37b457593', class: "nylas-confirmed-event-card__description", part: "ncec__description" }, instance.t('confirmedEventCardDescription'), " ", this.configSettings?.organizer?.name || 'the participants', "."), h("div", { key: 'e348ce191e32a00c54e0952ec512776cb1f3c02c', class: "nylas-confirmed-event-card__cta" }, h("button-component", { key: 'fc97c826564685ee51facea882aa4cf0a7b01608', variant: "basic", disabled: this.isClosing, part: "ncec__button-outline", onClick: this.handleCloseClicked }, this.isClosing ? `${instance.t('closingButton')}...` : `${instance.t('closeButton')}`)))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$5([
    RegisterComponent({
        name: 'nylas-confirmed-event-card',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            closeConfirmEventCardClicked: async (_, nylasschedulerconnector) => {
                const result = await nylasschedulerconnector.scheduler.resetConfirm();
                const { errorHandler } = _.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$5("design:type", Function),
    __metadata$5("design:paramtypes", []),
    __metadata$5("design:returntype", void 0)
], NylasConfirmedEventCard.prototype, "render", null);
NylasConfirmedEventCard.style = NylasConfirmedEventCardStyle0;

const t0 = new Date, t1 = new Date;

function timeInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = (date) => {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = (date, step) => {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = (start, stop, step) => {
    const range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    let previous;
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? (d) => field(d) % step === 0
              : (d) => interval.count(0, d) % step === 0);
    };
  }

  return interval;
}

const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;

const timeDay = timeInterval(
  date => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  date => date.getDate() - 1
);

timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});

timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});

const nylasDatePickerCss = ":host{display:block;min-height:444px;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}@media screen and (max-width: 768px){:host{min-height:auto}}.nylas-date-picker{display:flex;gap:1rem;flex-direction:column}.header{margin:0 0.5rem;height:48px}.header h2{font-size:1.3125rem;font-weight:400;line-height:1rem;color:var(--nylas-base-800)}.header h2 strong{font-weight:600}.title{margin:0 -1.25rem;display:flex;flex-direction:column;padding:0 1.5rem;gap:0.5rem;border-bottom:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family)}.title h1{max-width:376px;margin-bottom:0;font-size:18px;line-height:20px;font-weight:600;display:flex;gap:0.5rem;align-items:center}.title p{margin-top:0;font-size:16px;display:flex;gap:0.5rem;align-items:center}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.dates{display:grid;justify-items:center;grid-template-columns:repeat(7, 1fr);gap:0.5rem;margin-bottom:24px}.dates .date{position:relative;display:flex;flex-direction:row;justify-content:center;align-items:center;height:48px;width:48px;min-width:2rem;min-height:2rem;cursor:pointer;border-radius:var(--nylas-border-radius-2x);font-size:16px;font-weight:600;font-family:inherit;color:var(--nylas-base-text);background-color:var(--nylas-base-100);cursor:pointer;border:none}@media screen and (max-width: 412px){.dates .date{width:38px;height:38px;min-width:none}}.dates .date:hover:not(:disabled){box-shadow:0 0 0 2px var(--nylas-base-500) inset}.dates .date.date.current-month{color:var(--nylas-base-800)}.dates .date.date.selected{background-color:var(--nylas-primary);color:var(--nylas-base-0);font-weight:700}.dates .date.date.day-skeleton{color:var(--nylas-base-300)}.dates .date:disabled{color:var(--nylas-base-300);background-color:transparent;font-weight:400;cursor:not-allowed}.dates .day{font-size:12px;color:var(--nylas-base-800);font-weight:600;letter-spacing:0.5px;height:32px;display:flex;align-items:center}@media screen and (max-width: 768px){.dates .day{font-size:14px}}.dates .date.day-skeleton{height:48px;width:48px;border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite ease-in-out;background-color:var(--nylas-base-50)}@media screen and (max-width: 412px){.dates .date.day-skeleton{width:38px;height:38px;min-width:none}}.dates .date.current-day::after{content:\"\";position:absolute;bottom:6px;left:50%;transform:translateX(-50%);width:6px;height:6px;border-radius:50%;background-color:var(--nylas-base-500)}.dates .date.current-day.selected::after{background-color:var(--nylas-base-100)}.pagination{display:flex;flex-direction:row;justify-content:space-between;align-items:center;min-width:92px}.pagination .chevron-right{transform:rotate(180deg)}.pagination .button{display:flex;flex-direction:row;justify-content:center;align-items:center;height:3vh;width:3vh;min-width:3em;min-height:3em;cursor:pointer;border-radius:var(--nylas-border-radius-2x);background-color:transparent;color:var(--nylas-base-800);cursor:pointer;border:none}.pagination .button:hover{background-color:var(--nylas-base-50)}.pagination .button:active{background-color:var(--nylas-base-100)}.pagination .button:disabled{background-color:transparent;color:var(--nylas-base-300);cursor:not-allowed}.flex-row{display:flex;flex-direction:row;justify-content:space-between;align-items:center;color:var(--nylas-base-500)}";
const NylasDatePickerStyle0 = nylasDatePickerCss;

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasDatePicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.dateSelected = createEvent(this, "dateSelected", 7);
        this.monthChanged = createEvent(this, "monthChanged", 7);
        this.selectableDates = undefined;
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.selectedDate = undefined;
        this.selectedLanguage = undefined;
        this.isLoading = undefined;
        this.eventDuration = undefined;
        this.month = this.selectedDate || new Date();
        this.dates = this.getDates();
        this.disableNextMonthButton = false;
    }
    configSettingsChanged(newConfigSettings) {
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = newConfigSettings?.scheduler?.available_days_in_future;
        if (availableDaysInFuture === undefined) {
            return;
        }
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
    }
    selectedLanguageChanged(newLanguage) {
        instance.changeLanguage(newLanguage);
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    componentDidLoad() {
        debug(`[nylas-date-picker] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    getDates() {
        const lastDayOfMonth = getLastDayOfMonth(this.month);
        const firstDayOfMonth = getFirstDayOfMonth(this.month);
        return timeDay.range(timeDay.offset(firstDayOfMonth, -firstDayOfMonth.getDay()), timeDay.offset(lastDayOfMonth, 7 - lastDayOfMonth.getDay()));
    }
    selectDate(date) {
        this.dateSelected.emit(date);
    }
    changeMonth(change) {
        this.month = new Date(this.month.getFullYear(), this.month.getMonth() + change, 1);
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = this.configSettings?.scheduler?.available_days_in_future;
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
        this.dates = this.getDates();
        this.monthChanged.emit(this.month);
    }
    isSelected(date, selectedDate, selectableDates) {
        return date && selectedDate && isSameDay(date, selectedDate) && selectableDates && selectableDates?.length > 0;
    }
    isDisabled(date, selectableDates) {
        return date && selectableDates?.find(d => isSameDay(d, date)) === undefined;
    }
    render() {
        return (h(Host, { key: '4c20e8d37a61de3397cac0625884fdd9c11cc8af', part: "ndp" }, h("div", { key: '44174b6408db8263ab96c9acb57985af0d0780d2', class: "nylas-date-picker" }, h("div", { key: '962fc8b1ab8d8794df5838e16a477b8f705e4e6f', class: "title", part: "ndp__title" }, this.configSettings?.name ? (h("h1", null, this.configSettings?.name)) : (this.configSettings?.organizer?.name && (h("h1", null, h("person-icon", null), this.configSettings?.organizer?.name || 'Organizer'))), h("p", { key: '422505548dffc0ee5a70811415ff030641faeeff' }, h("clock-icon", { key: 'ef51faa1c20ef5caf3f3a8f7ff619c619ba72401' }), this.eventDuration ? convertMinutesToHoursAndMinutes(this.eventDuration) : `- ${instance.t('time.minutes')}`)), h("div", { key: 'f593d3bbcb954bd863381e445cff053ce0085714', class: 'header flex-row' }, h("h2", { key: 'bc844a479c3d7e7b4a2065e91aa79baace20b302', part: 'ndp__month-header' }, h("strong", { key: 'da5035f141b874d58f626426b71ee7e9dd0b6424' }, translateMonth(this.month.toLocaleDateString(undefined, { month: 'long' }).toLocaleLowerCase())), "\u00A0", this.month.toLocaleDateString(undefined, { year: 'numeric' })), h("div", { key: 'a2721542d5155de0072aa8a191b111b7d8cd7eea', class: 'pagination' }, h("button", { key: 'ad051ec43c6eb386ddefcab4db66932b079d75e0', title: "Previous month", onClick: () => this.changeMonth(-1), class: { 'chevron-left': true, 'button': true }, disabled: this.month <= new Date(), part: "ndp__month-button" }, h("chevron-icon", { key: '29cc3852bddacb1d4dd014aceb061d6baa27bfb4' })), h("button", { key: '92de9256c6c89f2dde6c59717bc9866a122e455c', title: "Next month", onClick: () => this.changeMonth(1), class: { 'chevron-right': true, 'button': true }, disabled: this.disableNextMonthButton, part: "ndp__month-button" }, h("chevron-icon", { key: '98e5e9d80629c9e86767ba151e88b20fb1a188b7' })))), h("div", { key: 'a63a1331d33c6f1b79d0e2f99e06c8ad0e4a2e50', class: 'dates' }, [
            instance.t('days.sunday'),
            instance.t('days.monday'),
            instance.t('days.tuesday'),
            instance.t('days.wednesday'),
            instance.t('days.thursday'),
            instance.t('days.friday'),
            instance.t('days.saturday'),
        ].map(day => {
            return (h("div", { class: 'day', part: "ndp__day" }, day));
        }), this.dates.map((date, i) => {
            const isDisabled = this.isDisabled(date, this.selectableDates);
            if (this.isLoading) {
                return (h("button", { disabled: true, class: {
                        'date day-skeleton': true,
                        'current-month': isSameMonth(date, this.month),
                    }, style: { animationDelay: `${i * 20}ms` }, part: `ndp__date ndp__date--disabled` }, date.getDate()));
            }
            return (h("button", { class: {
                    'date': true,
                    'selected': !!(this.selectedDate && isSameDay(date, this.selectedDate) && this.selectableDates && this.selectableDates?.length > 0),
                    'current-day': isSameDay(date, new Date()),
                    'current-month': isSameMonth(date, this.month),
                }, "aria-label": date.toLocaleDateString(undefined, { dateStyle: 'full' }), disabled: isDisabled, onClick: () => this.selectDate(date), part: `ndp__date ${this.isSelected(date, this.selectedDate, this.selectableDates) ? 'ndp__date--selected' : ''} ${isSameDay(date, new Date()) ? 'ndp__date--current-day' : ''} ${isSameMonth(date, this.month) ? 'ndp__date--current-month' : ''}` }, date.getDate()));
        })))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "configSettings": ["configSettingsChanged"],
        "selectedLanguage": ["selectedLanguageChanged"],
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$4([
    RegisterComponent({
        name: 'nylas-date-picker',
        stateToProps: new Map([
            ['scheduler.selectableDates', 'selectableDates'],
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.eventDuration', 'eventDuration'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            dateSelected: async (event, nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'dateSelected', event.detail);
                nylasSchedulerConnector.scheduler.selectDate(event.detail);
            },
            monthChanged: async (event, _nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'monthChanged', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", []),
    __metadata$4("design:returntype", void 0)
], NylasDatePicker.prototype, "render", null);
NylasDatePicker.style = NylasDatePickerStyle0;

const nylasLocaleSwitchCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-locale-switch{display:flex;flex-direction:row;justify-content:space-between;align-items:center;border-left:none;border-right:none;color:var(--nylas-base-50);font-size:14px;font-weight:600;cursor:pointer;transition:all 0.2s ease-in-out;font-family:inherit}@media screen and (max-width: 768px){.nylas-locale-switch{font-size:16px}}.select-wrapper{display:flex;align-items:center;gap:0.5rem}select{border:none;background:transparent;cursor:pointer;outline:none;background-color:transparent;margin:0 0 1px;padding:4px;vertical-align:middle}select#timezone{width:140px}select#language{width:80px}span.timezone-label{display:flex;width:-webkit-fill-available;justify-content:space-between}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){border:none;padding:10px}select-dropdown::part(sd_dropdown-content){max-width:306px}";
const NylasLocaleSwitchStyle0 = nylasLocaleSwitchCss;

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLocaleSwitch = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.timezoneChanged = createEvent(this, "timezoneChanged", 7);
        this.languageChanged = createEvent(this, "languageChanged", 7);
        this.themeConfig = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = this.bookingInfo?.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = this.bookingInfo?.language || navigator.language;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue?.timezone) {
            this.changeTimezone(newValue.timezone);
        }
        if (newValue && newValue?.language) {
            this.changeLanguage(newValue.language);
        }
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    componentDidLoad() {
        debug(`[nylas-locale-switch] Component did load`);
        this.applyThemeConfig(this.themeConfig);
        if (this.bookingInfo && this.bookingInfo?.timezone) {
            this.changeTimezone(this.bookingInfo.timezone);
        }
        if (this.bookingInfo && this.bookingInfo?.language) {
            this.changeLanguage(this.bookingInfo.language);
        }
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    changeTimezone(timezone) {
        this.selectedTimezone = timezone;
        this.timezoneChanged.emit(timezone);
    }
    changeLanguage(language) {
        this.selectedLanguage = language;
        this.languageChanged.emit(language);
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.changeTimezone(value);
        }
        else if (name === 'language') {
            this.changeLanguage(value);
        }
    }
    getTimezoneLabelHTML(timezone) {
        const offset = getTimezoneOffset(timezone);
        return (h("span", { class: "timezone-label", style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                width: '-webkit-fill-available',
            } }, TIMEZONE_MAP[timezone], ' ', h("span", { class: "timezone-offset", style: {
                fontSize: '14px',
                fontWeight: '400',
                color: 'var(--nylas-base-500)',
            } }, offset)));
    }
    render() {
        const timezoneOptions = Object.keys(TIMEZONE_MAP).map(key => ({
            labelHTML: this.getTimezoneLabelHTML(key),
            label: TIMEZONE_MAP[key],
            value: key,
        }));
        const languageOptions = Object.keys(LANGUAGE_MAP).map(key => ({
            label: LANGUAGE_MAP[key],
            value: key,
        }));
        return (h(Host, { key: '00af320c95ef648f69c9ebde6d741df848190059' }, h("div", { key: '56998ac07ecebb57f763852ea1c46b11328d4d15', class: "nylas-locale-switch", part: "nls" }, h("div", { key: 'ba294660f0716060787c9034010ad26b133338f5', class: {
                'select-wrapper': true,
                'timezone': true,
            }, part: "nls__timezone" }, h("select-dropdown", { key: 'e3d1a121cb6230c32ad2e4cf9aeffa4395bd635c', name: "timezone", options: timezoneOptions, defaultSelectedOption: timezoneOptions.find(op => op.value == this.selectedTimezone), exportparts: "sd_dropdown: nls__timezone-dropdown, sd_dropdown-button: nls__timezone-drop-button, sd_dropdown-button-selected-label: nls__timezone-drop-button-selected-label, sd_dropdown-content: nls__timezone-drop-content, sd_dropdown_label: nls__timezone-drop-label" }, h("span", { key: 'cc7bb4f138747aab7c5cf673c1b7b3ed09fb9de5', slot: "select-icon" }, h("globe-icon", { key: '717894778dc82c415eab8f764c2c18afc3636ee3', width: "20", height: "20" })))), h("div", { key: 'd0a64b3910138c1764e17e2be841dbd3fb746f3d', class: {
                'select-wrapper': true,
                'language': true,
            }, part: "nls__language" }, h("select-dropdown", { key: '86b417f7b62a0e6c74383e3315e1c6dfdfa09868', name: "language", options: languageOptions, defaultSelectedOption: languageOptions.find(lang => lang.value == this.selectedLanguage), exportparts: "sd_dropdown: nls__language-dropdown, sd_dropdown-button: nls__language-drop-button, sd_dropdown-content: nls__language-drop-content, sd_dropdown_label: nls__language-drop-label" }, h("span", { key: '0f1c14fae74a2543fcc57358c507d1288b02ba9c', slot: "select-icon" }, h("translate-icon", { key: 'f5a373fff866cf48f39e5bb3b2aa0f6567044433', width: "20", height: "20" })))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"],
        "bookingInfo": ["bookingInfoChangedHandler"]
    }; }
};
__decorate$3([
    RegisterComponent({
        name: 'nylas-locale-switch',
        stateToProps: new Map([
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            timezoneChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'timezoneChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectTimezone(event.detail);
            },
            languageChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'languageChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectLanguage(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", void 0)
], NylasLocaleSwitch.prototype, "render", null);
NylasLocaleSwitch.style = NylasLocaleSwitchStyle0;

const iconCss = ".sc-nylas-logo-h{display:flex}";
const NylasLogoStyle0 = iconCss;

const NylasLogo = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.width = '69';
        this.height = '24';
    }
    render() {
        return (h("svg", { key: '99d3ef972eb18b7beebcd264c3863762f20db756', width: this.width, height: this.height, viewBox: "0 0 69 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("g", { key: '855b23e638e91b1142b7fb47c17a4763d1e0302f', "clip-path": "url(#clip0_455_3543)" }, h("path", { key: 'da34ed8ca958f7424e91b1414c4d4e339b7a703c', d: "M15.8092 3.03248C14.6497 1.86996 13.1076 1.23047 11.4646 1.23047C9.82156 1.23047 8.27753 1.86996 7.11999 3.03248L0.835347 9.33381C0.686846 9.4827 0.60498 9.68123 0.60498 9.89312C0.60498 10.105 0.686846 10.3035 0.835347 10.4524C0.983848 10.6013 1.18185 10.6834 1.39318 10.6834C1.60451 10.6834 1.80251 10.6013 1.95101 10.4524L8.23374 4.15111C10.0139 2.36627 12.9134 2.36627 14.6935 4.15111C16.4736 5.93785 16.4756 8.84322 14.6935 10.6281L8.4108 16.9275C8.10428 17.2348 8.10428 17.7368 8.4108 18.0461C8.5593 18.195 8.75731 18.2771 8.96863 18.2771C9.17996 18.2771 9.37796 18.195 9.52646 18.0461L15.8092 11.7467C16.9687 10.5841 17.6064 9.03793 17.6064 7.39053C17.6064 5.74314 16.9687 4.19501 15.8092 3.03439V3.03248Z", fill: "currentColor" }), h("path", { key: 'bd3f95628660594d607d45a000a9c745db80fa74', d: "M14.9296 7.39038C14.9296 6.46074 14.5698 5.58837 13.9148 4.93361C12.5631 3.57828 10.3641 3.57828 9.01239 4.93361L0.663961 13.3023C0.51546 13.4512 0.433594 13.6497 0.433594 13.8616C0.433594 14.0735 0.51546 14.272 0.663961 14.4209C0.812462 14.5698 1.01046 14.6519 1.22179 14.6519C1.43312 14.6519 1.63112 14.5698 1.77962 14.4209L10.0367 6.1515L10.05 6.13623C10.0747 6.10759 10.1014 6.07705 10.128 6.05033C10.1585 6.01978 10.1928 5.99115 10.2251 5.96252L10.2442 5.94534C10.9886 5.31349 12.1119 5.3593 12.8011 6.05033C13.4903 6.74135 13.536 7.78171 12.9705 8.53192L12.9648 8.53955C12.9058 8.61591 12.8544 8.67699 12.8011 8.73044C12.7497 8.78198 12.6906 8.83352 12.6069 8.90033L4.45264 17.0991C4.30414 17.248 4.22227 17.4465 4.22227 17.6584C4.22227 17.8703 4.30414 18.0689 4.45264 18.2177C4.60114 18.3666 4.79914 18.4487 5.01047 18.4487C5.2218 18.4487 5.4198 18.3666 5.5683 18.2177L13.9167 9.84716C14.5698 9.1924 14.9315 8.31812 14.9315 7.39038H14.9296Z", fill: "currentColor" }), h("path", { key: '6dcc6994d434f6d92f6f8977a262072c5442425b', d: "M10.6821 9.11238C10.4727 9.01694 10.2861 8.88904 10.1281 8.7306C9.97008 8.57216 9.84252 8.38508 9.74733 8.1751L9.69021 8.05103L0.467916 17.2978C0.287049 17.4792 0.174721 17.7082 0.149971 17.9411C0.125221 18.1778 0.19376 18.3897 0.344165 18.5405C0.471724 18.6684 0.65259 18.739 0.850592 18.739C1.11142 18.739 1.37796 18.6207 1.58358 18.4145L10.8059 9.16774L10.6821 9.11047V9.11238Z", fill: "currentColor" }), h("path", { key: '16c56405f07d879815be6befad1770575c800d7b', d: "M68.401 10.6185C68.2126 10.2692 67.9593 9.97334 67.6433 9.73854C67.3235 9.49993 66.956 9.31094 66.5486 9.17541C66.1316 9.03606 65.7033 8.91771 65.2749 8.81844C64.7951 8.70582 64.3039 8.57983 63.8165 8.44811C63.3196 8.31258 62.9065 8.14269 62.5905 7.94225C62.4743 7.88689 62.3391 7.76663 62.3391 7.50129C62.3391 7.39821 62.3639 7.29704 62.4153 7.19587L62.4248 7.18059C62.5352 7.02216 62.7142 6.8828 62.975 6.75109C63.234 6.62128 63.609 6.55829 64.1231 6.55829C64.5286 6.55829 64.877 6.61365 65.1569 6.72436C65.4348 6.83508 65.6652 6.96871 65.8442 7.12524C66.0212 7.27986 66.1659 7.45357 66.2782 7.63873C66.3563 7.76854 66.4267 7.89262 66.4858 8.00525L68.2754 6.84081C68.1669 6.59456 68.0146 6.33495 67.8204 6.0677C67.6033 5.768 67.3254 5.4893 66.9922 5.23732C66.659 4.98534 66.2516 4.77345 65.7813 4.60929C65.3111 4.44512 64.7532 4.36304 64.1231 4.36304C63.3844 4.36304 62.7599 4.46421 62.2706 4.66083C61.7813 4.85935 61.3815 5.09988 61.0845 5.37667C60.7875 5.65346 60.5628 5.95125 60.4143 6.2605C60.2639 6.57547 60.1611 6.85799 60.1078 7.10233C60.0945 7.18059 60.0812 7.27031 60.0678 7.36767C60.0545 7.4593 60.0469 7.5452 60.0469 7.62537C60.0469 8.13314 60.1745 8.56074 60.4239 8.89671C60.679 9.24222 61.0045 9.53429 61.391 9.76336C61.7813 9.99624 62.2116 10.1852 62.6704 10.3227C63.1388 10.462 63.5862 10.5823 64.0012 10.6796C64.4067 10.777 64.7932 10.8782 65.1531 10.9774C65.5224 11.0786 65.8289 11.2122 66.0631 11.3745C66.2801 11.5425 66.3887 11.7448 66.3887 11.9777C66.3887 12.2278 66.2916 12.4263 66.0993 12.5695C65.9279 12.6954 65.7261 12.7985 65.4958 12.8711C65.273 12.9436 65.0407 12.9913 64.8066 13.0142C64.58 13.0352 64.3915 13.0467 64.2468 13.0467C63.8032 13.0467 63.4224 13.0028 63.1197 12.915C62.8151 12.8272 62.5638 12.7241 62.3734 12.6057C62.1811 12.4874 62.0288 12.3614 61.9222 12.2316C61.8213 12.1094 61.747 12.0082 61.7014 11.9319L61.4957 11.6303L59.708 12.7928C59.8508 13.0161 60.0298 13.2643 60.2392 13.5296C60.4772 13.8293 60.7837 14.1138 61.153 14.3734C61.5224 14.633 61.966 14.8525 62.4724 15.0243C62.9788 15.1961 63.5748 15.282 64.2468 15.282C64.797 15.282 65.2901 15.2324 65.7166 15.137C66.1412 15.0396 66.5162 14.9117 66.8285 14.7552C67.1388 14.6005 67.4015 14.4192 67.6109 14.2149C67.8223 14.0107 67.9974 13.8026 68.1326 13.6003C68.4563 13.1135 68.6409 12.5504 68.6828 11.9262C68.6828 11.4069 68.5876 10.9641 68.401 10.6166V10.6185Z", fill: "currentColor" }), h("path", { key: '3de8d99ca731b16e8828eca2959e9673830f8e33', d: "M26.3585 4.27905C23.7901 4.27905 21.6997 6.37504 21.6997 8.95017V15.0701H23.9291V8.95017C23.9291 7.6082 25.0181 6.5163 26.3565 6.5163C27.695 6.5163 28.784 7.6082 28.784 8.95017V15.0701H31.0134V8.95017C31.0134 6.37504 28.9229 4.27905 26.3546 4.27905H26.3585Z", fill: "currentColor" }), h("path", { key: 'd03b5475a651095cc139a63bc5edeb510ffa803d', d: "M53.4522 4.27905C50.4251 4.27905 47.9634 6.74728 47.9634 9.78245C47.9634 12.8176 50.427 15.2859 53.4522 15.2859C54.5545 15.2859 55.6188 14.9594 56.5288 14.3409L56.7116 14.2169V15.0682H58.941V9.78245C58.941 6.74728 56.4793 4.27905 53.4522 4.27905ZM53.4522 13.0505C51.655 13.0505 50.1928 11.5845 50.1928 9.78245C50.1928 7.98044 51.655 6.51439 53.4522 6.51439C55.2494 6.51439 56.7116 7.98044 56.7116 9.78245C56.7116 11.5845 55.2494 13.0505 53.4522 13.0505Z", fill: "currentColor" }), h("path", { key: '97c2129d3c1de6065d31419fdbf9003a898c2ce8', d: "M45.5795 10.6166V0.356201H43.3501V10.6166C43.3501 13.1517 45.3758 15.2228 47.8908 15.2858V13.0486C46.6057 12.9875 45.5795 11.9204 45.5795 10.6166Z", fill: "currentColor" }), h("path", { key: '4d3686bc5f9c1ce78816523cd32a13c9d7220468', d: "M39.5428 4.4967V10.63C39.5428 11.6761 38.8669 12.621 37.9016 12.9284C37.1249 13.1746 36.3157 13.0486 35.6817 12.5829C35.0592 12.1247 34.6879 11.3917 34.6879 10.6186V4.4967H32.4585V10.5995C32.4585 12.7165 33.8388 14.57 35.8131 15.1084C37.0354 15.4424 38.2995 15.2973 39.3695 14.7037L39.5428 14.6063V14.9747C39.5428 16.2766 38.5166 17.3437 37.2315 17.4067V19.6439C39.7465 19.5809 41.7722 17.5117 41.7722 14.9747V4.4967H39.5428Z", fill: "currentColor" })), h("defs", { key: '9900a72ad101d4d2cb635fad18af7e491487f290' }, h("clipPath", { key: '9afa44c94e88b8929ac91ebe6d6258d9dc92342f', id: "clip0_455_3543" }, h("rect", { key: 'bd688e672d4113e964c6fe2e79d50757b5415353', width: "68.7123", height: "19.2877", fill: "white", transform: "translate(0.144043 0.356201)" })))));
    }
};
NylasLogo.style = NylasLogoStyle0;

const nylasNotificationCss = ":host{display:block;margin-bottom:-12px;width:100%;z-index:1;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.notif{display:flex;padding:17px;align-items:flex-start;justify-content:space-between;gap:16px;border-radius:var(--nylas-border-radius-2x);border:1.5px solid var(--nylas-error);background:var(--nylas-base-0)}@media screen and (max-width: 768px){.notif{width:auto}}.notif .content{display:flex;flex-direction:row;gap:8px}.notif .content .message{font-size:14px;font-weight:400;color:var(--nylas-base-800)}.notif .content .message .title{font-size:16px;font-weight:600;color:var(--nylas-base-950);display:block}.notif .content .message .description{font-size:14px;font-weight:400;color:var(--nylas-base-800);display:block}.notif .content .icon.error{color:var(--nylas-error)}.notif.error{border-color:var(--nylas-error);background:rgb(255, 248, 248)}.notif.warning{border-color:var(--nylas-warning)}.notif.info{border-color:var(--nylas-info)}.notif.success{border-color:var(--nylas-success)}.notif .dismiss-btn{background:none;border:none;color:var(--nylas-base-950);cursor:pointer}";
const NylasNotificationStyle0 = nylasNotificationCss;

const NylasNotification = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.ttl = 5000;
        this.allowedCategories = ['component', 'api', 'validation', 'invalid_session'];
        this.notifications = [];
    }
    onError(event) {
        debug(`[nylas-notification] Error: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onWarning(event) {
        debug(`[nylas-notification] Warning: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onInfo(event) {
        debug(`[nylas-notification] Info: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onSuccess(event) {
        debug(`[nylas-notification] Success: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    isChildOf(parentHost) {
        let parent = this.host.parentNode;
        while (parent) {
            if (parent === parentHost) {
                return true;
            }
            if (parent instanceof ShadowRoot) {
                parent = parent.host;
            }
            else {
                parent = parent.parentNode;
            }
        }
        return false;
    }
    handleNotification(event) {
        const parentHost = event.detail.host;
        if (event.defaultPrevented) {
            debug(`[nylas-notification] Event default prevented`);
            return;
        }
        if (parentHost && !this.isChildOf(parentHost)) {
            debug(`[nylas-notification] Host not a parent`);
            return;
        }
        if (this.ttl === 0) {
            debug(`[nylas-notification] TTL is 0`);
            return;
        }
        if (this.allowedCategories.length > 0 && !this.allowedCategories.includes(event.detail.notification.category)) {
            debug(`[nylas-notification] Category not allowed`);
            return;
        }
        this.notifications = [...this.notifications, { ...event.detail.notification }];
        if (event.detail.notification.ttl !== 'none') {
            const ttl = event.detail.notification.ttl ? event.detail.notification.ttl : this.ttl;
            window.setTimeout(() => {
                this.notifications = this.notifications.filter(notif => notif.id !== event.detail.notification.id);
            }, ttl);
        }
    }
    dismissNotification(id) {
        this.notifications = this.notifications.filter(notif => notif.id !== id);
    }
    render() {
        return (h(Host, { key: '37c8f79eb1bb1e30512bda57012ac12edf925955' }, h(Fragment, { key: '6d991acafb35a569a091409cb73de7e0ce048024' }, this.notifications.map(notif => (h("div", { class: `notif ${notif.type}`, key: notif.id }, h("div", { class: "content" }, h("span", { class: `icon ${notif.type}` }, (notif.type === 'error' || notif.type === 'warning') && h("warning-icon", null)), h("span", { class: "message" }, h("span", { class: "title" }, notif.title), notif.description && h("span", { class: "description" }, notif.description))), h("button", { class: "dismiss-btn", onClick: () => this.dismissNotification(notif.id) }, h("close-icon", null))))), h("slot", { key: '37e8972883dac4e8fe1b9d58e53ee8792e4ae94b' }))));
    }
    get host() { return getElement(this); }
};
NylasNotification.style = NylasNotificationStyle0;

const nylasOrganizerConfirmationCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.event-card-wrapper{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family);background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 4rem;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:16px;font-weight:400}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.manage-booking-description{border-top:1px solid var(--nylas-base-200)}.manage-booking-description p{font-size:16px;margin:1rem;padding:0.5rem 1rem;font-weight:400;color:var(--nylas-base-800)}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.footer.no-template-cols{grid-template-columns:1fr}.footer.no-footer{display:none}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}button-component{--dot-color:var(--nylas-base-700)}";
const NylasOrganizerConfirmationCardStyle0 = nylasOrganizerConfirmationCardCss;

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasOrganizerConfirmationCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.rejectBookingButtonClicked = createEvent(this, "rejectBookingButtonClicked", 7);
        this.confirmBookingButtonClicked = createEvent(this, "confirmBookingButtonClicked", 7);
        this.confirmBookingError = createEvent(this, "confirmBookingError", 7);
        this.handleConfirmBookingButtonClicked = () => {
            this.action = 'confirm';
            const errorHandler = (error) => {
                this.confirmBookingError.emit(error);
            };
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.confirmBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host, errorHandler });
            }
        };
        this.handleRejectBookingButtonClicked = () => {
            this.action = 'reject';
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.rejectBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host });
            }
        };
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.organizerConfirmationBookingId = undefined;
        this.selectedLanguage = navigator.language;
        this.action = null;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-organizer-confirmation-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-organizer-confirmation-card] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    async resetAction() {
        this.action = null;
    }
    render() {
        return (h(Host, { key: 'b4c323bc2244bedc43ffea38922a0ba97424b5bf', part: "nmcc" }, h("div", { key: 'd7b9bea1042b6c23497c4a34a730884d1581f7a1', class: "event-card-wrapper", part: "nmccc__card" }, h("div", { key: 'c62045056e85744d1b94ae14b926aed48b821fdd', class: "calendar-icon" }, h("calendar-check-icon", { key: '38e95954bf2695949935b6998f5b5422ac2120ef' })), h("div", { key: '9bf921461d40ffe93856da6aa3dd6b29bcdf366e', class: "booked-event-header" }, h("h2", { key: '27beea17ad61d225cd1448b1a1e22c3089bfea6c', slot: "card-title", part: "nmcc__title" }, !!this.organizerConfirmationBookingId && `${instance.t('bookingPendingTitle')}!`)), h("div", { key: '49a8c37598e7cc0b9148441db85a5f3b9c59cfcb', class: "manage-booking-description" }, h("p", { key: 'bba62e3fb07460d9ea1dd0bfa507a2aa29cd3ad8' }, instance.t('bookingPendingnDescription'))), h("div", { key: '1d9b9e5965133b7863cc3aca80c73b88e2455dab', class: {
                'footer': true,
                'no-footer': this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options,
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleRejectBookingButtonClicked, isLoading: this.isLoading && this.action === 'reject', part: "nmcc__button-outline nmcc__cancel-cta" }, `${instance.t('rejectBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleConfirmBookingButtonClicked, isLoading: this.isLoading && this.action === 'confirm', part: "nmcc__button-outline nmcc__reschedule-cta" }, `${instance.t('confirmBookingButton')}`))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$2([
    RegisterComponent({
        name: 'nylas-organizer-confirmation-card',
        stateToProps: new Map([
            ['scheduler.organizerConfirmationBookingId', 'organizerConfirmationBookingId'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            rejectBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setReject(event.detail.bookingId);
            },
            confirmBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                const { host } = event.detail;
                const result = await nylasSchedulerConnector.scheduler.updateBooking({
                    bookingId: event.detail.bookingId,
                    status: 'confirmed',
                });
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
                await host.resetAction();
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$2("design:type", Function),
    __metadata$2("design:paramtypes", []),
    __metadata$2("design:returntype", void 0)
], NylasOrganizerConfirmationCard.prototype, "render", null);
NylasOrganizerConfirmationCard.style = NylasOrganizerConfirmationCardStyle0;

const nylasSelectedEventCardCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;display:block;position:relative;height:inherit;display:flex;flex-direction:column;justify-content:center;align-items:center;font-family:var(--nylas-font-family)}.event-card{display:flex;align-items:center;flex-direction:column;width:calc(100% - 3rem);background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:3rem 1.5rem 1.5rem 1.5rem;position:relative;box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card{margin-bottom:2rem}}.nylas-selected-event-card__date{font-size:min(max(16px, 3vw), 18px);font-weight:600}.nylas-selected-event-card__time{font-size:16px;font-weight:500}.calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-icon{display:flex;align-items:center;justify-content:center;height:100%}.event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:8px;gap:4px;align-items:center}@media screen and (max-width: 768px){.event-timezone{margin-bottom:16px}}";
const NylasSelectedEventCardStyle0 = nylasSelectedEventCardCss;

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasSelectedEventCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.themeConfig = undefined;
        this.selectedDate = undefined;
        this.selectedTimeslot = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = undefined;
        this.startTime = '';
        this.endTime = '';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-selected-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-selected-event-card] Component did load`);
        if (!this.selectedDate) {
            console.warn('[nylas-selected-event-card] "selectedDate" prop is not provided.');
        }
        if (!this.selectedTimeslot) {
            console.warn('[nylas-selected-event-card] "selectedTimeslot" prop is not provided.');
        }
        this.applyThemeConfig(this.themeConfig);
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: this.selectedTimezone,
        });
        this.startTime = timeFormat.format(new Date(this.selectedTimeslot?.start_time));
        this.endTime = timeFormat.format(new Date(this.selectedTimeslot?.end_time));
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (h(Host, { key: 'e03c7985396173ef1d2bb0ba02ea88e958811a35', part: "nsec" }, h("div", { key: '017d6ce8fc92ef11070d94038e80095acbd90f29', class: "event-card", part: "nsec__card" }, h("div", { key: 'b475d6d8481d4e85a383822ed34139a2838a686c', class: "calendar-icon", part: "nsec__icon" }, h("calendar-icon", { key: '83df23c0d499b2932c84175c45c05bb589294f74' })), h("div", { key: 'e11fe3c83e6cf3fa926ec3b7e0e381625cb98b0f', class: "nylas-selected-event-card__date", part: "nsec__date" }, this.selectedDate
            ? capitalizeFirstLetter(this.selectedDate?.toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage || navigator.language], { dateStyle: 'full', timeZone: this.selectedTimezone }))
            : '-'), h("div", { key: 'ed9773f2567782ab354ffe28fbbc365d3d2effa5', class: "nylas-selected-event-card__time", part: "nsec__time" }, this.startTime, " - ", this.endTime)), h("div", { key: '16389c36fe0ab7c55e5f71ab22ad8576dc509cae', class: "event-timezone", part: "nsec__timezone" }, h("globe-icon", { key: '2c6d9e03e0687a5912e1f674c08c19b6e612e90a' }), TIMEZONE_MAP[this.selectedTimezone])));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate$1([
    RegisterComponent({
        name: 'nylas-selected-event-card',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", []),
    __metadata$1("design:returntype", void 0)
], NylasSelectedEventCard.prototype, "render", null);
NylasSelectedEventCard.style = NylasSelectedEventCardStyle0;

const nylasTimeslotPickerCss = ":host{display:block;height:calc(100% - 48px);--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.time-picker-wrapper{display:flex;flex-direction:column;height:100%}.timeslots{position:relative;display:flex;flex-direction:column;gap:0.75rem;align-items:center;overflow-y:scroll;padding:0.5rem 1.5rem 1.5rem;flex:1}.time{box-sizing:border-box;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:4px 12px;gap:0.5rem;font-size:16px;font-weight:500;font-family:inherit;width:100%;height:48px;color:var(--nylas-base-800);background:var(--nylas-base-0);border:none;outline:1.5px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);flex:none;order:4;align-self:stretch;flex-grow:0;cursor:pointer}.time:hover,.time:focus{color:var(--nylas-primary);outline-color:var(--nylas-primary)}.time.selected{font-weight:600;color:var(--nylas-primary);outline:2px solid var(--nylas-primary);border-color:transparent;box-shadow:0 0 0 2px var(--nylas-primary)}.empty{text-align:center;padding:0 1.5rem;color:var(--nylas-base-600);font-size:min(max(12px, 2vw), 14px);height:450px;display:flex;align-items:center;justify-content:center}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.loading{padding:0 1.5rem}.loading .timeslot-skeleton{width:100%;height:4rem;background-color:var(--nylas-base-50);margin-bottom:0.5rem;border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite ease-in-out}.footer{width:100%;padding:14px;box-sizing:border-box;border-top:1px solid var(--nylas-base-200)}";
const NylasTimeslotPickerStyle0 = nylasTimeslotPickerCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasTimeslotPicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.timeslotSelected = createEvent(this, "timeslotSelected", 7);
        this.timeslotConfirmed = createEvent(this, "timeslotConfirmed", 7);
        this.handleConfirmedTimeslot = async (event, timeslot) => {
            event.preventDefault();
            debug(`[nylas-timeslot-picker] Confirm timeslot`, timeslot);
            this.timeslotConfirmed.emit(timeslot);
        };
        this.handleMouseEnter = (index) => {
            this.hoveredTimeslotIndex = index;
        };
        this.handleMouseLeave = () => {
            this.hoveredTimeslotIndex = -1;
        };
        this.availability = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.selectedTimeslot = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedDate = new Date();
        this.selectedLanguage = undefined;
        this.times = [];
        this.hoveredTimeslotIndex = undefined;
        this.selectedTimeslotIndex = undefined;
    }
    selectedLanguageChanged(newLanguage) {
        instance.changeLanguage(newLanguage);
    }
    selectedDateChanged(newVal) {
        debug(`[nylas-timeslot-picker] Selected date changed`, { newVal });
        if (newVal) {
            this.selectedTimeslotIndex = '';
            if (typeof newVal !== 'undefined') {
                const availableTimes = this.availability?.filter(timeslot => isSameDay(timeslot.start_time, newVal)).map(timeslot => timeslot);
                this.times = availableTimes || [];
            }
        }
    }
    availabilityChanged(newVal) {
        debug(`[nylas-timeslot-picker] Available times changed`, { newVal, selectedDate: this.selectedDate });
        if (typeof newVal !== 'undefined') {
            const availableTimes = newVal?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
            this.times = availableTimes || [];
        }
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-timeslot-picker] Component will load`, { selectedDate: this.selectedDate, availability: this.availability, times: this.times });
    }
    async componentDidLoad() {
        debug(`[nylas-timeslot-picker] Component did load`);
        const availableTimes = this.availability?.filter(timeslot => this.selectedDate && isSameDay(timeslot.start_time, this.selectedDate)).map(timeslot => timeslot);
        this.times = availableTimes || [];
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    getTimeslotId(date, index) {
        return `${date.toLocaleDateString()}-${index}`;
    }
    onClickSelectTime(timeslot, index) {
        debug(`[nylas-timeslot-picker] Time selected`, timeslot, index);
        this.selectedTimeslotIndex = this.getTimeslotId(timeslot.start_time, index);
        this.timeslotSelected.emit({
            start_time: timeslot.start_time,
            end_time: timeslot.end_time,
            emails: timeslot.emails,
        });
    }
    getTimeSlotLabel(timeslot) {
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: this.selectedTimezone,
        });
        return `${timeFormat.format(timeslot.start_time)} - ${timeFormat.format(timeslot.end_time)}`;
    }
    render() {
        if (this.isLoading) {
            return (h(Host, null, h("div", { class: 'loading' }, new Array(6).fill(0).map((_, i) => (h("div", { class: 'timeslot-skeleton', style: { animationDelay: `${i * 20}ms` } }))))));
        }
        if (this.availability && this.availability.length === 0) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No dates available"))));
        }
        if ((!this.times || this.times.length === 0) && !!this.selectedDate) {
            return (h(Host, null, h("div", { class: 'empty' }, h("span", null, "No time slots available for selected date"))));
        }
        if (!this.selectedDate)
            return h(Host, null);
        return (h(Host, { part: "ntp" }, h("div", { class: 'time-picker-wrapper', part: "ntp__time-picker-wrapper" }, h("div", { class: 'timeslots', part: "ntp__timeslots" }, this.times.map((timeslot, index) => (h("button", { part: `ntp__timeslot ${this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime() ? 'ntp__timeslot--selected' : ''}`, class: {
                time: true,
                selected: typeof this.selectedTimeslot !== 'undefined' && this.selectedTimeslot?.start_time?.getTime() === timeslot.start_time.getTime(),
            }, onClick: () => this.onClickSelectTime(timeslot, index), onMouseEnter: () => this.handleMouseEnter(index), onMouseLeave: () => this.handleMouseLeave() }, this.hoveredTimeslotIndex == index || this.selectedTimeslotIndex == this.getTimeslotId(timeslot.start_time, index)
            ? this.getTimeSlotLabel(timeslot)
            : timeslot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZone: this.selectedTimezone }))))), this.selectedTimeslot && (h("div", { class: 'footer' }, h("button-component", { variant: 'primary', onClick: (event) => this.handleConfirmedTimeslot(event, this.selectedTimeslot), part: "ntp__button-primary" }, h("slot", { name: "timeslot-picker-cta-label" }, instance.t('nextButton'))))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "selectedLanguage": ["selectedLanguageChanged"],
        "selectedDate": ["selectedDateChanged"],
        "availability": ["availabilityChanged"],
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-timeslot-picker',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.availability', 'availability'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            timeslotSelected: async (event, nylasSchedulerConnector) => {
                debug('nylas-timeslot-picker', 'timeslotSelected', event.detail);
                nylasSchedulerConnector.scheduler.selectTime(event.detail);
            },
            timeslotConfirmed: async (event, nylasSchedulerConnector) => {
                debug('nylas-timeslot-picker', 'timeslotConfirmed', event.detail);
                if (event.detail) {
                    nylasSchedulerConnector.scheduler.toggleAdditionalData(true);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotPicker.prototype, "render", null);
NylasTimeslotPicker.style = NylasTimeslotPickerStyle0;

export { NylasBookedEventCard as nylas_booked_event_card, NylasBookingForm as nylas_booking_form, NylasCancelBookingForm as nylas_cancel_booking_form, NylasCancelledEventCard as nylas_cancelled_event_card, NylasConfirmedEventCard as nylas_confirmed_event_card, NylasDatePicker as nylas_date_picker, NylasLocaleSwitch as nylas_locale_switch, NylasLogo as nylas_logo, NylasNotification as nylas_notification, NylasOrganizerConfirmationCard as nylas_organizer_confirmation_card, NylasSelectedEventCard as nylas_selected_event_card, NylasTimeslotPicker as nylas_timeslot_picker };

//# sourceMappingURL=nylas-booked-event-card_12.entry.js.map