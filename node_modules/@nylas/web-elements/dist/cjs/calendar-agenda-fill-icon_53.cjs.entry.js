'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-7af03e3f.js');
const registerComponent = require('./register-component-c3092bed.js');
const utils = require('./utils-91715738.js');
const constants = require('./constants-1aa5d7c9.js');

const iconCss$j = ".sc-calendar-agenda-fill-icon-h{display:flex}";
const CalendarAgendaFillIconStyle0 = iconCss$j;

const CalendarAgendaFillIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '9b14bf9391995aa0912e2959d4d91ce00859832c', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: 'd55a43e35b2c3b05d605a0670c6dccde68239bfa', d: "M14 11.5C14 12.8807 12.8807 14 11.5 14H2.5C1.11929 14 0 12.8807 0 11.5V2.5C0 1.11929 1.11929 0 2.5 0H11.5C12.8807 0 14 1.11929 14 2.5V11.5ZM11 3.5C11 3.25454 10.8231 3.05039 10.5899 3.00806L10.5 3H3.5L3.41012 3.00806C3.17688 3.05039 3 3.25454 3 3.5C3 3.74546 3.17688 3.94961 3.41012 3.99194L3.5 4H10.5L10.5899 3.99194C10.8231 3.94961 11 3.74546 11 3.5ZM11 7C11 6.75454 10.8231 6.55039 10.5899 6.50806L10.5 6.5H3.5L3.41012 6.50806C3.17688 6.55039 3 6.75454 3 7C3 7.24546 3.17688 7.44961 3.41012 7.49194L3.5 7.5H10.5L10.5899 7.49194C10.8231 7.44961 11 7.24546 11 7ZM11 10.5C11 10.2545 10.8231 10.0504 10.5899 10.0081L10.5 10H3.5L3.41012 10.0081C3.17688 10.0504 3 10.2545 3 10.5C3 10.7455 3.17688 10.9496 3.41012 10.9919L3.5 11H10.5L10.5899 10.9919C10.8231 10.9496 11 10.7455 11 10.5Z", fill: "currentColor" })));
    }
};
CalendarAgendaFillIcon.style = CalendarAgendaFillIconStyle0;

const iconCss$i = ".sc-calendar-agenda-icon-h{display:flex}";
const CalendarAgendaIconStyle0 = iconCss$i;

const CalendarAgendaIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: 'dcac7276b7c9e4b7a5108a67285490b47c6a59fc', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: 'c56290ee37ededb1135f507bd4c53b703592dcac', d: "M14 11.5C14 12.8807 12.8807 14 11.5 14H2.5C1.11929 14 0 12.8807 0 11.5V2.5C0 1.11929 1.11929 0 2.5 0H11.5C12.8807 0 14 1.11929 14 2.5V11.5ZM13 11.5V2.5C13 1.67157 12.3284 1 11.5 1H2.5C1.67157 1 1 1.67157 1 2.5V11.5C1 12.3284 1.67157 13 2.5 13H11.5C12.3284 13 13 12.3284 13 11.5ZM11 3.5C11 3.74546 10.8231 3.94961 10.5899 3.99194L10.5 4H3.5C3.22386 4 3 3.77614 3 3.5C3 3.25454 3.17688 3.05039 3.41012 3.00806L3.5 3H10.5C10.7761 3 11 3.22386 11 3.5ZM11 7C11 7.24546 10.8231 7.44961 10.5899 7.49194L10.5 7.5H3.5C3.22386 7.5 3 7.27614 3 7C3 6.75454 3.17688 6.55039 3.41012 6.50806L3.5 6.5H10.5C10.7761 6.5 11 6.72386 11 7ZM11 10.5C11 10.7455 10.8231 10.9496 10.5899 10.9919L10.5 11H3.5C3.22386 11 3 10.7761 3 10.5C3 10.2545 3.17688 10.0504 3.41012 10.0081L3.5 10H10.5C10.7761 10 11 10.2239 11 10.5Z", fill: "currentColor" })));
    }
};
CalendarAgendaIcon.style = CalendarAgendaIconStyle0;

const iconCss$h = ".sc-calendar-info-icon-h{display:flex}";
const CalendarInfoIconStyle0 = iconCss$h;

const CalendarInfoIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '32ce5ead16594e20fe3c24c2ddddfefc6942e44f', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '6cf9fe5141aa31fcc545f9012669176f5fe9d9b7', d: "M12 0C13.3807 0 14.5 1.11929 14.5 2.5V6.59971C14.1832 6.43777 13.8486 6.30564 13.5 6.20703V4H1.5V11.5C1.5 12.3284 2.17157 13 3 13H6.70703C6.80564 13.3486 6.93777 13.6832 7.09971 14H3C1.61929 14 0.5 12.8807 0.5 11.5V2.5C0.5 1.11929 1.61929 0 3 0H12ZM12 1H3C2.17157 1 1.5 1.67157 1.5 2.5V3H13.5V2.5C13.5 1.67157 12.8284 1 12 1ZM11.375 9.5C11.375 9.15482 11.6548 8.875 12 8.875C12.3452 8.875 12.625 9.15482 12.625 9.5C12.625 9.84518 12.3452 10.125 12 10.125C11.6548 10.125 11.375 9.84518 11.375 9.5ZM12.5 13.5C12.5 13.7761 12.2761 14 12 14C11.7239 14 11.5 13.7761 11.5 13.5V11.5C11.5 11.2239 11.7239 11 12 11C12.2761 11 12.5 11.2239 12.5 11.5V13.5ZM7.5 11.5C7.5 9.01472 9.51472 7 12 7C14.4853 7 16.5 9.01472 16.5 11.5C16.5 13.9853 14.4853 16 12 16C9.51472 16 7.5 13.9853 7.5 11.5ZM8.5 11.5C8.5 13.433 10.067 15 12 15C13.933 15 15.5 13.433 15.5 11.5C15.5 9.567 13.933 8 12 8C10.067 8 8.5 9.567 8.5 11.5Z", fill: "currentColor" })));
    }
};
CalendarInfoIcon.style = CalendarInfoIconStyle0;

const iconCss$g = ".sc-calendar-patterns-icon-h{display:flex}";
const CalendarPatternsIconStyle0 = iconCss$g;

const CalendarPatternsIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '2f3e126da536d6acd1901b76ede3bec920df34f3', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: 'ba30013a2dfe7b5ae2f76533fe12b73536c473ff', d: "M3.25 0H11.75C13.2688 0 14.5 1.23122 14.5 2.75V11.25C14.5 12.7688 13.2688 14 11.75 14H3.25C1.73122 14 0.5 12.7688 0.5 11.25V2.75C0.5 1.23122 1.73122 0 3.25 0ZM2 2.75V4H13V2.75C13 2.05964 12.4404 1.5 11.75 1.5H3.25C2.55964 1.5 2 2.05964 2 2.75ZM12.2071 5L8.20711 9H10.7929L13 6.79289V5H12.2071ZM10.7929 5H8.20711L4.20711 9H6.79289L10.7929 5ZM2.79289 9L6.79289 5H4.20711L2 7.20711V9H2.79289ZM2 5.79289L2.79289 5H2V5.79289ZM12.2071 9H13V8.20711L12.2071 9Z", fill: "currentColor" })));
    }
};
CalendarPatternsIcon.style = CalendarPatternsIconStyle0;

const iconCss$f = ".sc-checkmark-icon-h{display:flex}";
const CheckmarkIconStyle0 = iconCss$f;

const CheckmarkIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '18';
        this.height = '14';
    }
    render() {
        return (index$1.h("svg", { key: '4552cb177b6decd422e688b41f2541538118ae67', width: this.width, height: this.height, viewBox: "0 0 18 14", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '62f846a8e8b3485b0710154daf6431bf096c8ce6', d: "M1.53033 7.46967C1.23744 7.17678 0.762563 7.17678 0.46967 7.46967C0.176777 7.76256 0.176777 8.23744 0.46967 8.53033L4.96967 13.0303C5.26256 13.3232 5.73744 13.3232 6.03033 13.0303L17.0303 2.03033C17.3232 1.73744 17.3232 1.26256 17.0303 0.96967C16.7374 0.676777 16.2626 0.676777 15.9697 0.96967L5.5 11.4393L1.53033 7.46967Z", fill: "#293056" })));
    }
};
CheckmarkIcon.style = CheckmarkIconStyle0;

const iconCss$e = ".sc-dragable-icon-h{display:flex}";
const DragableIconStyle0 = iconCss$e;

const DragableIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '12f2705b0ebe8133d4c0f55527f220241d2abc87', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '4d0bf6f81721454700fd6355d8cb270d2e6a104e', d: "M15.5 18C16.3284 18 17 18.6716 17 19.5C17 20.3284 16.3284 21 15.5 21C14.6716 21 14 20.3284 14 19.5C14 18.6716 14.6716 18 15.5 18ZM8.5 18C9.32843 18 10 18.6716 10 19.5C10 20.3284 9.32843 21 8.5 21C7.67157 21 7 20.3284 7 19.5C7 18.6716 7.67157 18 8.5 18ZM15.5 11C16.3284 11 17 11.6716 17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11ZM8.5 11C9.32843 11 10 11.6716 10 12.5C10 13.3284 9.32843 14 8.5 14C7.67157 14 7 13.3284 7 12.5C7 11.6716 7.67157 11 8.5 11ZM15.5 4C16.3284 4 17 4.67157 17 5.5C17 6.32843 16.3284 7 15.5 7C14.6716 7 14 6.32843 14 5.5C14 4.67157 14.6716 4 15.5 4ZM8.5 4C9.32843 4 10 4.67157 10 5.5C10 6.32843 9.32843 7 8.5 7C7.67157 7 7 6.32843 7 5.5C7 4.67157 7.67157 4 8.5 4Z", fill: "currentColor" })));
    }
};
DragableIcon.style = DragableIconStyle0;

const iconCss$d = ".sc-envelope-fill-icon-h{display:flex}";
const EnvelopeFillIconStyle0 = iconCss$d;

const EnvelopeFillIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '13';
    }
    render() {
        return (index$1.h("svg", { key: '9e47e0f1192e2aac3283844917161fc3852fbf32', width: "16", height: "13", viewBox: "0 0 16 13", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '92fb6a5f63b69bc46da5703702df3c77ab5ed2ba', d: "M16.0001 3.373V10.5C16.0001 11.8807 14.8808 13 13.5001 13H2.50008C1.11937 13 0 11.8807 0 10.5V3.373L7.74657 7.93097C7.90304 8.02301 8.09711 8.02301 8.25359 7.93097L16.0001 3.373ZM13.5001 0C14.7871 0 15.847 0.972604 15.9849 2.22293L8.00008 6.91991L0.0152595 2.22293C0.153116 0.972604 1.21302 0 2.50008 0H13.5001Z", fill: "currentColor" })));
    }
};
EnvelopeFillIcon.style = EnvelopeFillIconStyle0;

const iconCss$c = ".sc-envelope-icon-h{display:flex}";
const EnvelopeIconStyle0 = iconCss$c;

const EnvelopeIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '13';
    }
    render() {
        return (index$1.h("svg", { key: '6dc7bd6bb3aff1eaedef68c773b0b0c4e916a47a', width: "16", height: "13", viewBox: "0 0 16 13", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '9a041ba1b01f028888d8e8ad760b3e38605e3fe5', d: "M13.5 0C14.8807 0 16 1.11929 16 2.5V10.5C16 11.8807 14.8807 13 13.5 13H2.5C1.11929 13 0 11.8807 0 10.5V2.5C0 1.11929 1.11929 0 2.5 0H13.5ZM15 3.961L8.25351 7.93097C8.12311 8.00767 7.96661 8.02045 7.82751 7.96932L7.74649 7.93097L1 3.963V10.5C1 11.3284 1.67157 12 2.5 12H13.5C14.3284 12 15 11.3284 15 10.5V3.961ZM13.5 1H2.5C1.67157 1 1 1.67157 1 2.5V2.802L8 6.91991L15 2.801V2.5C15 1.67157 14.3284 1 13.5 1Z", fill: "currentColor" })));
    }
};
EnvelopeIcon.style = EnvelopeIconStyle0;

const iconCss$b = ".sc-eye-icon-h{display:flex}";
const EyeIconStyle0 = iconCss$b;

const EyeIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '17';
        this.height = '10';
    }
    render() {
        return (index$1.h("svg", { key: '064b287b18cb3feacfcbe113ff49a32cf4c4eda7', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '68ba995169464a2f38f29d839c44ffe838d6d563', d: "M1.75909 6.60214C2.44254 3.32689 5.29437 1 8.50002 1C11.7057 1 14.5574 3.32688 15.2409 6.60215C15.2974 6.87246 15.5622 7.04587 15.8325 6.98946C16.1029 6.93304 16.2763 6.66817 16.2199 6.39785C15.4425 2.67312 12.1934 0 8.50002 0C4.8066 0 1.55742 2.67311 0.780175 6.39786C0.723767 6.66818 0.897177 6.93305 1.1675 6.98946C1.43782 7.04587 1.70268 6.87246 1.75909 6.60214ZM8.5 3C6.567 3 5 4.567 5 6.5C5 8.433 6.567 10 8.5 10C10.433 10 12 8.433 12 6.5C12 4.567 10.433 3 8.5 3ZM6 6.5C6 5.11929 7.11929 4 8.5 4C9.88071 4 11 5.11929 11 6.5C11 7.88071 9.88071 9 8.5 9C7.11929 9 6 7.88071 6 6.5Z", fill: "currentColor" })));
    }
};
EyeIcon.style = EyeIconStyle0;

const iconCss$a = ".sc-feedback-icon-h{display:flex}";
const FeedbackIconStyle0 = iconCss$a;

const FeedbackIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '11';
        this.height = '14';
    }
    render() {
        return (index$1.h("svg", { key: 'aa924955ae543fc5ab7fb45dc56572438a0bd0ce', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '877197b5f76937c3990ac1465bb710c34d1e2486', d: "M0.5 8.875C0.5 8.875 1.125 8.25 3 8.25C4.875 8.25 6.125 9.5 8 9.5C9.875 9.5 10.5 8.875 10.5 8.875V1.375C10.5 1.375 9.875 2 8 2C6.125 2 4.875 0.75 3 0.75C1.125 0.75 0.5 1.375 0.5 1.375V8.875ZM0.5 8.875V13.25", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" })));
    }
};
FeedbackIcon.style = FeedbackIconStyle0;

const iconCss$9 = ".sc-flow-icon-h{display:flex}";
const FlowIconStyle0 = iconCss$9;

const FlowIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '12';
    }
    render() {
        return (index$1.h("svg", { key: '055edc1522225b8e5802ea72111e88fc060df214', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: 'c173885d78c25cb1b0e61b70e0de83a9c5b2e5de', d: "M13 1.66211C11.8954 1.66211 11 2.55754 11 3.66211C11 4.76668 11.8954 5.66211 13 5.66211C14.1046 5.66211 15 4.76668 15 3.66211C15 2.55754 14.1046 1.66211 13 1.66211ZM10.0407 3.16678C10.2768 1.74563 11.5119 0.662109 13 0.662109C14.6569 0.662109 16 2.00526 16 3.66211C16 5.31896 14.6569 6.66211 13 6.66211C11.5162 6.66211 10.2839 5.58482 10.0428 4.16971C9.37629 4.23688 8.82682 4.7426 8.71466 5.41551L8.27173 8.07311C8.07929 9.22776 7.11428 10.087 5.9593 10.1574C5.72319 11.5786 4.48813 12.6621 3 12.6621C1.34315 12.6621 0 11.319 0 9.66211C0 8.00526 1.34315 6.66211 3 6.66211C4.48384 6.66211 5.71607 7.73939 5.95724 9.15451C6.62371 9.08734 7.17318 8.58162 7.28534 7.90871L7.72827 5.25111C7.92071 4.09646 8.88571 3.23718 10.0407 3.16678ZM3 7.66211C1.89543 7.66211 1 8.55754 1 9.66211C1 10.7667 1.89543 11.6621 3 11.6621C4.10457 11.6621 5 10.7667 5 9.66211C5 8.55754 4.10457 7.66211 3 7.66211Z", fill: "currentColor" })));
    }
};
FlowIcon.style = FlowIconStyle0;

const iconCss$8 = ".sc-google-meet-icon-h{display:flex}";
const GoogleMeetIconStyle0 = iconCss$8;

const GoogleMeetIcon$1 = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '9f03ccab4f00c2158f84c03376a7e6c5d99a7b00', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("g", { key: 'f93575ecf387c45f3d162cd792d8b71ec92563b8', "clip-path": "url(#clip0_22_6251)" }, index$1.h("path", { key: '39b8d6701c1b61e51a6c74e92a16ca2224648605', d: "M11.3145 10.1036L13.2642 12.3321L15.8859 14.0076L16.343 10.1173L15.8859 6.31384L13.2139 7.78584L11.3145 10.1036Z", fill: "#00832D" }), index$1.h("path", { key: '62a4fb15a3568df59831c65ff7a298cda96f566a', d: "M0 13.6464V16.9607C0 17.7184 0.613714 18.3321 1.37143 18.3321H4.68571L5.37143 15.827L4.68571 13.6464L2.41143 12.9607L0 13.6464Z", fill: "#0066DA" }), index$1.h("path", { key: '77387898e00bfdca723ee5a30b663fda4d166c82', d: "M4.68571 1.875L0 6.56071L2.41143 7.24643L4.68571 6.56071L5.36 4.40986L4.68571 1.875Z", fill: "#E94235" }), index$1.h("path", { key: 'a332ef42bee0a2cefa85edab05ed57eb44b2f3fd', d: "M4.68571 6.56067H0V13.6464H4.68571V6.56067Z", fill: "#2684FC" }), index$1.h("path", { key: '80c315571da0c068cbe01410c1449fc2e3b9f6d1', d: "M18.8798 3.85895L15.8855 6.31381V14.0075L18.8935 16.4738C19.3438 16.8258 20.0021 16.5047 20.0021 15.9321V4.38923C20.0021 3.80981 19.329 3.49209 18.8798 3.85895ZM11.3141 10.1035V13.6464H4.68555V18.3321H14.5141C15.2718 18.3321 15.8855 17.7184 15.8855 16.9607V14.0075L11.3141 10.1035Z", fill: "#00AC47" }), index$1.h("path", { key: 'c5ebdb0105b0515af8fba4ceebe23f390e13a241', d: "M14.5141 1.875H4.68555V6.56071H11.3141V10.1036L15.8855 6.31614V3.24643C15.8855 2.48871 15.2718 1.875 14.5141 1.875Z", fill: "#FFBA00" })), index$1.h("defs", { key: '0f8ba76223090e75c94366e833a394a51446f8a9' }, index$1.h("clipPath", { key: '2ba697058c4419abdaf524d6f77b34b11f24ac8a', id: "clip0_22_6251" }, index$1.h("rect", { key: '35df545d162e5c7385a4d9c756293d76527e604b', width: "20", height: "20", fill: "white" })))));
    }
};
GoogleMeetIcon$1.style = GoogleMeetIconStyle0;

const inputImageUrlCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.logo-container{display:flex;flex-direction:row;gap:2rem}.logo-container .input-container{flex:1}.logo-container .input-container span.error-message{color:var(--nylas-error)}.logo-container .logo{display:flex;justify-content:center;align-items:center;width:200px;height:100px;border:var(--nylas-base-200) solid 1px;border-radius:var(--nylas-border-radius-2x);overflow:hidden;padding:10px}.logo-container .logo img{max-height:100%;max-width:100%;object-fit:contain;object-position:center}";
const InputImageUrlStyle0 = inputImageUrlCss;

var __decorate$w = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$w = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const InputImageUrl = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.nylasFormInputImageUrlInvalid = index$1.createEvent(this, "nylasFormInputImageUrlInvalid", 7);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.componentType = 'image-url';
        this.imageUrl = '';
        this.errorMessage = '';
        this.name = 'input-image-url';
        this.currentImageUrl = this.imageUrl;
    }
    connectedCallback() {
        utils.debug('nylas-image-input', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-image-input', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-image-input', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.host.setAttribute('component-type', this.componentType);
    }
    componentDidLoad() {
        utils.debug('nylas-image-input', 'componentDidLoad');
        this.currentImageUrl = this.imageUrl;
        this.setImage(this.imageUrl);
    }
    componentWillUpdate() {
        utils.debug('nylas-image-input', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-image-input', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-image-input', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-image-input', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-image-input', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    async nylasFormInputChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    async nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    setImage(value) {
        this.errorMessage = '';
        utils.isValidImage(value)
            .then(() => {
            this.currentImageUrl = value;
            this.internals.setValidity({});
            this.internals.setFormValue(this.currentImageUrl, this.name);
            this.valueChanged.emit({ value: this.currentImageUrl, name: this.name });
        })
            .catch(() => {
            this.errorMessage = 'Invalid image URL.';
            this.nylasFormInputImageUrlInvalid.emit({ value: 'Invalid image URL.', name: this.name });
            if (typeof this.internals.setValidity === 'function') {
                this.internals.setValidity({ customError: true }, 'Invalid image URL.');
            }
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'ffddd82e9733783c1188c5f725e9005a89addcbb' }, index$1.h("div", { key: 'bcb39f174166d4ae721e12ee80c22178fe94149f', class: "logo-container" }, index$1.h("div", { key: '70fc18f9c3dedfcde59f6fd1173a45ed2d8c9afc', class: "input-container" }, index$1.h("input-component", { key: '65ad4998db6f2a7d09ed30f3f4957e3cecb48cea', name: this.name, id: this.name, type: "text", required: false, exportparts: "ic_input: iiu__logo-input-textfield", defaultValue: this.imageUrl ?? '' }), this.errorMessage && index$1.h("span", { class: "error-message" }, this.errorMessage)), this.currentImageUrl && !this.errorMessage && (index$1.h("div", { class: "logo" }, index$1.h("img", { src: this.currentImageUrl, alt: "Logo" }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
};
__decorate$w([
    registerComponent.RegisterComponent({
        name: 'nylas-image-input',
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
    }),
    __metadata$w("design:type", Function),
    __metadata$w("design:paramtypes", []),
    __metadata$w("design:returntype", void 0)
], InputImageUrl.prototype, "render", null);
InputImageUrl.style = InputImageUrlStyle0;

const iconCss$7 = ".sc-location-icon-h{display:flex}";
const LocationIconStyle0 = iconCss$7;

const LocationIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '18';
    }
    render() {
        return (index$1.h("svg", { key: 'c92d3dd7eb9481916da10ce0e27dc2e39451e81c', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '18ed528bb59a125b672a5087d2e64b5010fb8781', d: "M10 7.66211C10 9.31896 8.65685 10.6621 7 10.6621C5.34315 10.6621 4 9.31896 4 7.66211C4 6.00526 5.34315 4.66211 7 4.66211C8.65685 4.66211 10 6.00526 10 7.66211ZM9 7.66211C9 6.55754 8.10457 5.66211 7 5.66211C5.89543 5.66211 5 6.55754 5 7.66211C5 8.76668 5.89543 9.66211 7 9.66211C8.10457 9.66211 9 8.76668 9 7.66211ZM11.9497 12.6171C14.6834 9.88221 14.6834 5.44812 11.9497 2.71326C9.21608 -0.0216067 4.78392 -0.0216067 2.05025 2.71326C-0.683418 5.44812 -0.683418 9.88221 2.05025 12.6171L3.57128 14.1159L5.61408 16.101L5.74691 16.2188C6.52168 16.8468 7.65623 16.8076 8.38611 16.1012L10.8223 13.7312L11.9497 12.6171ZM2.75499 3.4183C5.09944 1.07282 8.90055 1.07282 11.245 3.4183C13.5294 5.70364 13.5879 9.3725 11.4207 11.7288L11.245 11.912L9.92371 13.216L7.69315 15.3846L7.60016 15.4642C7.24594 15.732 6.7543 15.732 6.40012 15.4642L6.30713 15.3845L3.3263 12.4791L2.75499 11.912L2.57927 11.7288C0.412077 9.3725 0.47065 5.70364 2.75499 3.4183Z", fill: "currentColor" })));
    }
};
LocationIcon.style = LocationIconStyle0;

const iconCss$6 = ".sc-location-off-icon-h{display:flex}";
const LocationOffIconStyle0 = iconCss$6;

const LocationOffIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '18';
    }
    render() {
        return (index$1.h("svg", { key: '954a088889bb64d20861c53c37e449d5575c3bee', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '1a4e4176eb9c90697f936001e12384823775dbfe', d: "M0.146447 0.808556C0.341709 0.613294 0.658291 0.613294 0.853553 0.808556L15.8536 15.8086C16.0488 16.0038 16.0488 16.3204 15.8536 16.5157C15.6583 16.7109 15.3417 16.7109 15.1464 16.5157L12.0938 13.463L11.8223 13.7312L9.38611 16.1012C8.65623 16.8076 7.52168 16.8468 6.74691 16.2188L6.61408 16.101L4.57128 14.1159L3.05025 12.6171C0.607421 10.1732 0.347525 6.37239 2.27056 3.63976L0.146447 1.51566C-0.0488155 1.3204 -0.0488155 1.00382 0.146447 0.808556ZM9.07768 10.4469C8.74346 10.576 8.38024 10.6468 8.0005 10.6468C6.34839 10.6468 5.00909 9.30689 5.00909 7.65406C5.00909 7.27461 5.07967 6.91166 5.20843 6.57763L2.98793 4.35713C1.49206 6.62038 1.68917 9.67377 3.57927 11.7288L3.75499 11.912L4.3263 12.4791L7.30713 15.3845L7.40012 15.4642C7.7543 15.732 8.24594 15.732 8.60016 15.4642L8.69315 15.3846L10.9237 13.216L11.3883 12.7575L9.07768 10.4469ZM9.85409 8.39486L10.5983 9.13904C10.8487 8.70143 10.9919 8.19447 10.9919 7.65406C10.9919 6.00122 9.65261 4.66134 8.0005 4.66134C7.45986 4.66134 6.95271 4.80482 6.51504 5.05581L7.25921 5.79998C7.48839 5.70819 7.73855 5.6577 8.0005 5.6577C9.10258 5.6577 9.99599 6.5515 9.99599 7.65406C9.99599 7.91581 9.94564 8.16581 9.85409 8.39486ZM4.35291 2.89368C6.70671 1.08827 10.0908 1.26314 12.245 3.4183C14.3986 5.57283 14.5739 8.95702 12.771 11.3118L13.4812 12.022C15.6702 9.27273 15.493 5.25762 12.9497 2.71326C10.4058 0.168159 6.39081 -0.00843871 3.64269 2.18347L4.35291 2.89368Z", fill: "currentColor" })));
    }
};
LocationOffIcon.style = LocationOffIconStyle0;

const iconCss$5 = ".sc-microsoft-teams-icon-h{display:flex}";
const MicrosoftTeamsIconStyle0 = iconCss$5;

const GoogleMeetIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: 'ad350fe3bca24d482bc9a85433b826a8858e2859', width: this.width, height: this.height, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("g", { key: '8e542158e23e2ca96978975475772ba724a0ee05', "clip-path": "url(#clip0_22_6280)" }, index$1.h("path", { key: '179db0cd7d374f4b4a74a2bdfca0f8e47dc7c3c4', d: "M13.7109 7.60168H18.8769C19.365 7.60168 19.7607 7.99734 19.7607 8.4854V13.191C19.7607 14.9848 18.3065 16.4389 16.5127 16.4389H16.4974C14.7036 16.4391 13.2493 14.9852 13.249 13.1914C13.249 13.1913 13.249 13.1911 13.249 13.191V8.06355C13.249 7.80847 13.4558 7.60168 13.7109 7.60168Z", fill: "#5059C9" }), index$1.h("path", { key: 'd60b03d000bfdb77b020111d23da3aa52fc9d465', d: "M17.2024 6.67152C18.3583 6.67152 19.2954 5.73444 19.2954 4.5785C19.2954 3.42255 18.3583 2.48547 17.2024 2.48547C16.0465 2.48547 15.1094 3.42255 15.1094 4.5785C15.1094 5.73444 16.0465 6.67152 17.2024 6.67152Z", fill: "#5059C9" }), index$1.h("path", { key: '96df34d7b86f70258d6d941095397ad58bc6784a', d: "M10.6912 6.67152C12.3609 6.67152 13.7145 5.31796 13.7145 3.64826C13.7145 1.97856 12.3609 0.625 10.6912 0.625C9.02153 0.625 7.66797 1.97856 7.66797 3.64826C7.66797 5.31796 9.02153 6.67152 10.6912 6.67152Z", fill: "#7B83EB" }), index$1.h("path", { key: '531631cb9aea938b263571f7d640f4b7eaef4e32', d: "M14.7223 7.60168H6.19482C5.71257 7.61362 5.33108 8.01384 5.34227 8.49611V13.8631C5.27492 16.7571 7.56457 19.1588 10.4586 19.2296C13.3525 19.1588 15.6422 16.7571 15.5748 13.8631V8.49611C15.586 8.01384 15.2045 7.61362 14.7223 7.60168Z", fill: "#7B83EB" }), index$1.h("path", { key: 'c0c1e367bfd8614b8b913d95bae2b9694f24ae90', opacity: "0.1", d: "M10.9234 7.60168V15.1226C10.9211 15.4675 10.7121 15.7773 10.3932 15.9087C10.2917 15.9516 10.1825 15.9738 10.0723 15.9738H5.75134C5.69088 15.8203 5.63507 15.6668 5.58855 15.5087C5.42574 14.975 5.34267 14.4201 5.34204 13.8622V8.49471C5.33086 8.01321 5.71172 7.61362 6.1932 7.60168H10.9234Z", fill: "black" }), index$1.h("path", { key: '194bf1f7f9106ce7edefc1116b4c479abd09ffda', opacity: "0.2", d: "M10.4583 7.60168V15.5877C10.4583 15.698 10.4362 15.8071 10.3932 15.9087C10.2619 16.2276 9.95205 16.4366 9.60717 16.4389H5.96995C5.89088 16.2854 5.81646 16.1319 5.75134 15.9738C5.68623 15.8156 5.63507 15.6668 5.58855 15.5087C5.42574 14.975 5.34267 14.4201 5.34204 13.8622V8.49471C5.33086 8.01321 5.71172 7.61362 6.1932 7.60168H10.4583Z", fill: "black" }), index$1.h("path", { key: '7d2dc381bed0a4aa248696a013ffb110678efe83', opacity: "0.2", d: "M10.4583 7.60168V14.6575C10.4548 15.1261 10.0758 15.5051 9.60716 15.5087H5.58855C5.42574 14.975 5.34267 14.4201 5.34204 13.8622V8.49471C5.33086 8.01321 5.71172 7.61362 6.1932 7.60168H10.4583Z", fill: "black" }), index$1.h("path", { key: 'c4dbb7c0506bb7ded16eadfa293a8a0c590ec687', opacity: "0.2", d: "M9.9932 7.60168V14.6575C9.98965 15.1261 9.61065 15.5051 9.14203 15.5087H5.58855C5.42574 14.975 5.34267 14.4201 5.34204 13.8622V8.49471C5.33086 8.01321 5.71172 7.61362 6.1932 7.60168H9.9932Z", fill: "black" }), index$1.h("path", { key: 'f52993e0bb735b26b4d3b9fc534e564959cfc74d', opacity: "0.1", d: "M10.9241 5.1971V6.66222C10.845 6.66687 10.7706 6.67152 10.6915 6.67152C10.6124 6.67152 10.538 6.66687 10.4589 6.66222C10.3019 6.6518 10.1462 6.62689 9.99382 6.5878C9.05195 6.36475 8.27382 5.70421 7.90079 4.81106C7.83661 4.66107 7.78678 4.50533 7.75195 4.34595H10.0729C10.5422 4.34772 10.9223 4.72775 10.9241 5.1971Z", fill: "black" }), index$1.h("path", { key: 'a982ff3882d5d0d0f85f9414915c42c658cb88fa', opacity: "0.2", d: "M10.4585 5.66219V6.66219C10.3015 6.65177 10.1458 6.62686 9.99341 6.58778C9.05155 6.36473 8.27342 5.70418 7.90039 4.81104H9.60736C10.0767 4.81281 10.4567 5.19285 10.4585 5.66219Z", fill: "black" }), index$1.h("path", { key: '9af22fed5f55fee7d2570ded96a2608f61fd236d', opacity: "0.2", d: "M10.4585 5.66219V6.66219C10.3015 6.65177 10.1458 6.62686 9.99341 6.58778C9.05155 6.36473 8.27342 5.70418 7.90039 4.81104H9.60736C10.0767 4.81281 10.4567 5.19285 10.4585 5.66219Z", fill: "black" }), index$1.h("path", { key: '4fd90c89ca4c3b5d46a3399744ba64ce6c4ccf00', opacity: "0.2", d: "M9.99341 5.6622V6.58778C9.05155 6.36473 8.27342 5.70418 7.90039 4.81104H9.14225C9.6116 4.81282 9.99163 5.19286 9.99341 5.6622Z", fill: "black" }), index$1.h("path", { key: '3bedba68430d2e328d671c308427f7108cd8ebc4', d: "M0.613296 4.81104H9.14074C9.61159 4.81104 9.99329 5.19274 9.99329 5.66359V14.191C9.99329 14.6619 9.61158 15.0436 9.14074 15.0436H0.613296C0.14244 15.0436 -0.239258 14.6619 -0.239258 14.191V5.66359C-0.239258 5.19274 0.142449 4.81104 0.613296 4.81104Z", fill: "url(#paint0_linear_22_6280)" }), index$1.h("path", { key: '1c72fe5d120ac294e62540583a2f4dd53241f4d8', d: "M7.12025 8.05659H5.4156V12.6985H4.32956V8.05659H2.63281V7.15613H7.12025V8.05659Z", fill: "white" })), index$1.h("defs", { key: 'ada5656deafc6870bc1770c0630d95a70c18f202' }, index$1.h("linearGradient", { key: 'ea5b3b39f9f68902b89244732652c2a1d1440fbb', id: "paint0_linear_22_6280", x1: "1.53835", y1: "4.14486", x2: "8.2157", y2: "15.7098", gradientUnits: "userSpaceOnUse" }, index$1.h("stop", { key: 'adb28e7bdadc0cb55e4eff99a561f92a96b259cb', "stop-color": "#5A62C3" }), index$1.h("stop", { key: '005f873ccc9104df4f6f5eaafcd8b1abdbf57f3d', offset: "0.5", "stop-color": "#4D55BD" }), index$1.h("stop", { key: 'ec2fbe748645e606f98208041937648384d0ad20', offset: "1", "stop-color": "#3940AB" })), index$1.h("clipPath", { key: '59f4b16c90e38c9e6a62f025b46eeecfdf1ba13e', id: "clip0_22_6280" }, index$1.h("rect", { key: '429f6e8af5ae6583dc5f3bfc1f571e86cc9dec26', width: "20", height: "20", fill: "white" })))));
    }
};
GoogleMeetIcon.style = MicrosoftTeamsIconStyle0;

const nylasAdditionalParticipantsCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-additional-participants__title{color:var(--nylas-base-nylas-base-900-aaa, #101323);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-additional-participants__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-additional-participants__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-additional-participants__input_group{padding-top:8px;display:flex;flex-direction:column;gap:4px}.nylas-additional-participants__input_group label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:150%}.nylas-additional-participants__input_group label span.org-as-participant{width:max-content}.nylas-additional-participants__error{color:var(--nylas-error);font-size:14px;font-family:var(--nylas-font-family);font-weight:400;line-height:16px;margin:0;text-align:left}.nylas-additional-participants__input_wrapper{display:flex;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-300)}.nylas-additional-participants__input_wrapper.error{border-color:var(--nylas-error)}.nylas-additional-participants__input_wrapper button{padding:12px;border:none;border-left:1px solid var(--nylas-base-300);background:none;cursor:pointer}.nylas-additional-participants__input_wrapper button:hover,.nylas-additional-participants__input_wrapper button:active{color:var(--nylas-primary)}.nylas-additional-participants__input_wrapper_organizer{border:none}.nylas-additional-participants__input{flex:1;display:flex;justify-content:space-between}.nylas-additional-participants__input input{border:none;outline:none;background:none;width:100%}.nylas-additional-participants__input input-dropdown{width:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown){width:100%;height:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown-input){height:100%;border-radius:var(--nylas-border-radius-2x);border:none;border-top-right-radius:initial;border-bottom-right-radius:initial;padding-left:16px}.nylas-additional-participants__input input-component::part(ic__input){background:var(--nylas-base-50)}.nylas-additional-participants__input input-component::part(ic__label){font-size:14px}.nylas-additional-participants__input input-component div.required-input{display:flex;gap:4px}.nylas-additional-participants__input input-component div.required-input label{display:flex;gap:4px;align-items:center}.nylas-additional-participants__input input-component div.required-input label tooltip-component#organizer_participant_tooltip::part(tc__content){left:-84px}.nylas-additional-participants__add{padding:12px;display:flex;align-items:center;border:none;background:none;cursor:pointer}.nylas-additional-participants__add span{padding:0 8px;font-size:16px;font-style:normal;font-weight:500}.nylas-additional-participants__add:hover,.nylas-additional-participants__add:active{color:var(--nylas-primary)}";
const NylasAdditionalParticipantsStyle0 = nylasAdditionalParticipantsCss;

var __decorate$v = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$v = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasAdditionalParticipants = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'participants';
        this.selectedConfiguration = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.participantOptions = undefined;
        this.eventParticipants = undefined;
        this.selectedLanguage = undefined;
        this.participants = this.eventParticipants ?? [];
        this.participantErrors = {};
        this.includeOrganizerAsParticipant = true;
        this.isRoundRobinConfig = false;
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-additional-participants', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationAndCurrentUserChangedHandler(newValue, _oldValue, propName) {
        utils.debug('nylas-additional-participants', 'selectedConfigurationAndCurrentUserChangedHandler', newValue, this.currentUser);
        if (propName === 'selectedConfiguration') {
            this.updateState(newValue, this.currentUser);
        }
        else if (propName === 'currentUser') {
            this.updateState(this.selectedConfiguration, newValue);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-additional-participants', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-additional-participants', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-additional-participants', 'componentDidLoad');
        this.updateState(this.selectedConfiguration, this.currentUser);
    }
    disconnectedCallback() {
        utils.debug('nylas-additional-participants', 'disconnectedCallback');
    }
    updateState(selectedConfig, currentUser) {
        this.isRoundRobinConfig = selectedConfig?.availability?.availability_rules?.availability_method
            ? selectedConfig?.availability?.availability_rules?.availability_method !== 'collective'
            : false;
        this.participants = selectedConfig?.participants || [];
        this.includeOrganizerAsParticipant = this.isRoundRobinConfig && this.participants.find(p => p.email === currentUser?.email) ? true : false;
        this.updateOrganizerAsParticipant();
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function' && typeof this.internals.setValidity === 'function';
    }
    onInputOptionChanged(event) {
        utils.debug('nylas-additional-participants', 'onInputOptionChanged');
        const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        const index = event.detail.name;
        const participant = this.participantOptions?.find(participant => participant.email === event.detail.value);
        if (!participant && this.isRoundRobinConfig) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'For round robin configuration, participant should be selected from the dropdown.');
            this.participantErrors[index] = 'For round robin page, participant should be selected from the dropdown.';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else if (!participant && !EMAIL_REGEX.test(event.detail.value)) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please enter a valid email address');
            this.participantErrors[index] = 'Please enter a valid email address';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else {
            this.participantErrors[index] = '';
            this.participants[index].is_valid = true;
            this.isInternalsAvailable && this.internals.setValidity({});
        }
        this.participants[index].email = event.detail.value;
        this.participants[index].availability = participant && participant.calendars[0].id ? { calendar_ids: [participant.calendars[0].id] } : undefined;
        this.participants[index].booking = participant && this.isRoundRobinConfig && participant.calendars[0].id ? { calendar_id: participant.calendars[0].id } : undefined;
        this.participants[index].name = participant?.name || event.detail.value;
        this.participants = [...this.participants];
        this.updateFormValue();
    }
    updateOrganizerAsParticipant() {
        const findCurrentUserInParticipants = this.participants.find(p => p.email === this.currentUser?.email);
        if (this.isRoundRobinConfig && !findCurrentUserInParticipants && this.currentUser?.email) {
            const bookingCalendarDefault = this.currentUserCalendars?.find(calendar => calendar.is_primary)?.id || this.currentUserCalendars?.[0]?.id || 'primary';
            this.participants = [
                {
                    name: this.currentUser?.name,
                    email: this.currentUser?.email,
                    is_organizer: true,
                    availability: {
                        calendar_ids: [bookingCalendarDefault],
                    },
                    booking: {
                        calendar_id: bookingCalendarDefault,
                    },
                },
                ...this.participants,
            ];
        }
        this.updateFormValue();
    }
    addParticipant() {
        utils.debug('nylas-additional-participants', 'addParticipant');
        this.participants = [...this.participants, { name: '', email: '', is_organizer: false }];
        this.updateFormValue();
    }
    removeParticipant(index) {
        utils.debug('nylas-additional-participants', 'removeParticipant');
        this.participants = this.participants.filter((_, i) => i !== index);
        this.updateFormValue();
    }
    updateFormValue() {
        utils.debug('nylas-additional-participants', 'updateFormValue');
        const participants = this.isRoundRobinConfig ? (this.includeOrganizerAsParticipant ? this.participants : this.participants.filter(p => !p.is_organizer)) : this.participants;
        if (participants.length === 0) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please add at least one participant');
            this.error = 'Please add at least one participant';
        }
        else {
            this.isInternalsAvailable && this.internals.setValidity({});
            this.error = '';
            this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(participants), this.name);
            this.valueChanged.emit({ value: JSON.stringify(participants), name: this.name });
        }
    }
    getArrayDifference(array1, array2) {
        const filtered = array1.filter(participant1 => !array2.some(participant2 => participant1.email === participant2.email));
        return filtered.map(participant => {
            return { value: participant.email, label: participant.email };
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'ea4c8ab71ec5fc8b7b407a92e216a82cb07e5938', part: "nap" }, index$1.h("nylas-form-card", { key: '4356d11f502d22cb3d841cd51363cd870a39cca7' }, index$1.h("h3", { key: '71d104a4006bf51b0c3ad33bfcae977ec5205b01', slot: "header-title", class: "nylas-additional-participants__title", part: "nap__title" }, utils.instance.t('nylasAdditionalParticipants.headerTitle')), index$1.h("p", { key: 'a0f48316b69d2334970738bb0fd914edaf9349ec', slot: "header-subtitle", class: "nylas-additional-participants__subtitle", part: "nap__subtitle" }, utils.instance.t('nylasAdditionalParticipants.headerSubTitle')), index$1.h("div", { key: '51ee2ae0322c4e8ff25cbbffc3140607d2a4e6f7', slot: "content", class: "nylas-additional-participants__content" }, index$1.h("div", { key: 'fbb4fd7c67beb0255cdc68fd81ed01c13a7df435' }, this.participants.map((participant, index) => {
            return (index$1.h("div", { class: 'nylas-additional-participants__input_group', part: "nap__input_group" }, !participant.is_organizer && index$1.h("label", null, `${utils.instance.t('nylasAdditionalParticipants.participant')} ${index}`), index$1.h("div", { part: "nap__input_wrapper", class: {
                    'nylas-additional-participants__input_wrapper': true,
                    'nylas-additional-participants__input_wrapper_organizer': participant?.is_organizer === true,
                    'nylas-additional-participants__input_wrapper_invalid': participant.is_valid === false,
                    'error': participant.is_valid === false,
                } }, index$1.h("div", { class: { 'nylas-additional-participants__input': true, 'organizer': participant?.is_organizer === true }, part: "nap__input" }, participant.is_organizer ? (index$1.h("input-component", { class: 'label-input', name: `${index}`, key: index, label: utils.instance.t('nylasAdditionalParticipants.organizer'), required: false, readOnly: participant.is_organizer, defaultValue: participant.email }, this.isRoundRobinConfig && (index$1.h("div", { class: "required-input", slot: "additional-input" }, index$1.h("input", { type: "checkbox", name: `organizer_participant`, id: `organizer_participant`, onClick: () => {
                    this.includeOrganizerAsParticipant = !this.includeOrganizerAsParticipant;
                    this.updateFormValue();
                }, checked: this.includeOrganizerAsParticipant }), index$1.h("label", { htmlFor: `organizer_participant`, "aria-label": "Include as participant" }, index$1.h("span", { class: "org-as-participant", part: "nap__org-as-participant" }, utils.instance.t('nylasAdditionalParticipants.organizerAsParticipant')), index$1.h("tooltip-component", { id: "organizer_participant_tooltip" }, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, index$1.h("strong", null, utils.instance.t('nylasAdditionalParticipants.tooltip.includeOrganizer'), ":"), ' ', utils.instance.t('nylasAdditionalParticipants.tooltip.includeOrganizerDesc'), " ", index$1.h("br", null), index$1.h("strong", null, utils.instance.t('nylasAdditionalParticipants.tooltip.excludeOrganizer'), ":"), ' ', utils.instance.t('nylasAdditionalParticipants.tooltip.excludeOrganizerDesc')))))))) : (index$1.h("input-dropdown", { id: `${index}`, name: `${index}`, filterable: true, inputValue: participant.email, options: this.getArrayDifference(this.participantOptions || [], this.participants) })), !participant.is_organizer && (index$1.h("button", { onClick: () => this.removeParticipant(index), part: "nap__remove-participant" }, index$1.h("close-icon", null))))), !participant.is_valid && (index$1.h("p", { class: "nylas-additional-participants__error", part: "nap__error" }, this.participantErrors[index]))));
        }), index$1.h("p", { key: 'fb88e6a19e39f2d72167fb5b67109014a65a3d64', class: "nylas-additional-participants__error", part: "nap__error" }, this.error)), index$1.h("button", { key: '73b22041ab2ec94e051c262285ee72e4b5b7be1a', class: "nylas-additional-participants__add", part: "nap__add-participant", onClick: () => this.addParticipant() }, index$1.h("add-circle-icon", { key: '15bef3ca590565a885f0b7d80d825d073bdfd06f' }), ' ', index$1.h("span", { key: 'a805a79fca8e45ae974e634d344e21e5a816db3f' }, this.participants.length > 1
            ? utils.instance.t('nylasAdditionalParticipants.addParticipant', { context: 'next' })
            : utils.instance.t('nylasAdditionalParticipants.addParticipant', { context: 'first' })))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "currentUser": ["selectedConfigurationAndCurrentUserChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationAndCurrentUserChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$v([
    registerComponent.RegisterComponent({
        name: 'nylas-additional-participants',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$v("design:type", Function),
    __metadata$v("design:paramtypes", []),
    __metadata$v("design:returntype", void 0)
], NylasAdditionalParticipants.prototype, "render", null);
NylasAdditionalParticipants.style = NylasAdditionalParticipantsStyle0;

const nylasAvailabilityPickerCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-availability-picker{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-availability-picker .header{padding:1rem}.nylas-availability-picker .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-availability-picker .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-availability-picker .content{padding:1rem;color:var(--nylas-base-900);font-size:16px;font-family:var(--nylas-font-family);border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 504px){.nylas-availability-picker .content{font-size:15px}}.nylas-availability-picker .content .select-timezone{display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid var(--nylas-base-200);padding-bottom:1rem;gap:1rem}.nylas-availability-picker .content .select-timezone h4{display:flex;gap:0.5rem;align-items:center;margin:0;font-size:16px;font-weight:500;line-height:20px}@media screen and (max-width: 504px){.nylas-availability-picker .content .select-timezone h4{font-size:15px}}.nylas-availability-picker .content .availability{display:flex;flex-direction:column;gap:1rem;padding:0 0.5rem;margin:1rem 0}@media screen and (max-width: 504px){.nylas-availability-picker .content .availability{gap:0.5rem;padding:0}}.nylas-availability-picker .content .availability .availability-day{display:grid;grid-template-columns:minmax(auto, 65px) 1fr minmax(auto, 40px);gap:1rem;align-items:baseline}@media screen and (max-width: 768px){.nylas-availability-picker .content .availability .availability-day{grid-template-columns:78px 1fr auto}}@media screen and (max-width: 504px){.nylas-availability-picker .content .availability .availability-day{display:inline-grid;gap:8px;grid-template-columns:60px 1fr auto}}.nylas-availability-picker .content .availability .availability-day .day{display:flex;gap:0.5rem;align-items:center}@media screen and (max-width: 504px){.nylas-availability-picker .content .availability .availability-day .day{gap:0.25rem}}.nylas-availability-picker .content .availability .availability-day .day input[type=checkbox]{transform:scale(1.3)}.nylas-availability-picker .content .availability .availability-day .time-ranges span.unavailable{height:48px;display:flex;align-items:center;justify-content:center}.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range{display:flex;gap:1.5rem;justify-content:space-between;align-items:baseline}@media screen and (max-width: 504px){.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range{justify-content:unset;gap:0.5rem}}.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range .pickers{display:flex;gap:1rem}@media screen and (max-width: 504px){.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range .pickers{gap:0.5rem}}.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range .pickers span{margin-top:0.75rem}.nylas-availability-picker .content .availability .availability-day .time-ranges .time-range:not(:last-of-type){margin-bottom:1rem}.nylas-availability-picker .content .availability .availability-day .time-ranges p.error{color:var(--nylas-error)}.nylas-availability-picker .content .availability .availability-day button{border:none;background:transparent;height:40px;cursor:pointer;color:var(--nylas-base-800)}.nylas-availability-picker .content .availability .availability-day button:hover,.nylas-availability-picker .content .availability .availability-day button:active{color:var(--nylas-primary)}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){justify-content:initial}";
const NylasAvailabilityPickerStyle0 = nylasAvailabilityPickerCss;

var __decorate$u = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$u = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasAvailabilityPicker = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'availability';
        this.selectedConfiguration = undefined;
        this.openHours = undefined;
        this.defaultTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.hideHeader = false;
        this.selectedLanguage = undefined;
        this.schedule = {
            SUN: [],
            MON: [{ start: '09:00am', end: '05:00pm' }],
            TUE: [{ start: '09:00am', end: '05:00pm' }],
            WED: [{ start: '09:00am', end: '05:00pm' }],
            THU: [{ start: '09:00am', end: '05:00pm' }],
            FRI: [{ start: '09:00am', end: '05:00pm' }],
            SAT: [],
        };
        this.timezone = '';
        this.overlapDays = {};
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    configChangedHandler(newConfig) {
        const defaultOpenHours = newConfig?.availability?.availability_rules?.default_open_hours ?? constants.DEFAULT_OPEN_HOURS;
        const defaultOpenHoursTimezone = newConfig?.event_booking?.timezone ?? this.defaultTimezone;
        this.timezone = this.name === 'availability' ? defaultOpenHoursTimezone : this.defaultTimezone;
        if (this.openHours) {
            this.openHoursToSchedule(this.openHours);
        }
        else if (defaultOpenHours) {
            this.openHoursToSchedule(defaultOpenHours);
        }
    }
    scheduleChanged(newValue, oldValue) {
        if (newValue !== oldValue) {
            let overlapDays = {};
            Object.keys(newValue).forEach(key => {
                const dayTimeRanges = newValue[key];
                if (dayTimeRanges.length > 0) {
                    const overlaps = this.getOverlaps(dayTimeRanges);
                    if (overlaps.length > 0) {
                        overlapDays[key] = overlaps;
                    }
                }
            });
            this.overlapDays = overlapDays;
            if (typeof this.internals.setFormValue !== 'function') {
                return;
            }
            if (Object.keys(overlapDays).length > 0) {
                const element = this.host.shadowRoot?.getElementById(Object.keys(overlapDays)[0]);
                if (element) {
                    utils.debug('nylas-availability-picker', 'The time ranges are overlapping. Overlap: ', overlapDays);
                    this.internals.setValidity({ customError: true }, 'Overlapping time ranges found', element);
                }
            }
            else {
                this.internals.setValidity({ customError: false });
                this.internals.setFormValue(JSON.stringify({
                    openHours: this.scheduleToOpenHours(this.schedule),
                    timezone: this.timezone,
                }));
            }
            this.valueChanged.emit({
                value: JSON.stringify({
                    openHours: this.scheduleToOpenHours(newValue),
                    timezone: this.timezone,
                }),
                name: this.name,
            });
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.timezone = value;
            if (typeof this.internals.setFormValue !== 'function') {
                return;
            }
            const updateValue = {
                openHours: this.scheduleToOpenHours(this.schedule),
                timezone: this.timezone,
            };
            this.internals.setFormValue(JSON.stringify(updateValue));
            this.valueChanged.emit({
                value: JSON.stringify(updateValue),
                name: this.name,
            });
        }
    }
    connectedCallback() {
        utils.debug('nylas-availability-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-availability-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-availability-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-availability-picker', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.configChangedHandler(this.selectedConfiguration);
        }
        else {
            this.timezone = this.defaultTimezone;
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        const updateValue = {
            openHours: this.scheduleToOpenHours(this.schedule),
            timezone: this.timezone,
        };
        this.internals.setFormValue(JSON.stringify(updateValue));
        this.valueChanged.emit({
            value: JSON.stringify(updateValue),
            name: this.name,
        });
    }
    getOverlaps(timeRanges) {
        let timeRangesInMinutes = timeRanges.map((range, index) => ({
            start: utils.timeToMinutes(range.start),
            end: utils.timeToMinutes(range.end),
            originalIndex: index,
        }));
        timeRangesInMinutes.sort((a, b) => a.start - b.start);
        let overlaps = [];
        for (let i = 1; i < timeRangesInMinutes.length; i++) {
            if (timeRangesInMinutes[i].start < timeRangesInMinutes[i - 1].end) {
                if (!overlaps.includes(timeRangesInMinutes[i].originalIndex)) {
                    overlaps.push(timeRangesInMinutes[i].originalIndex);
                }
                if (!overlaps.includes(timeRangesInMinutes[i - 1].originalIndex)) {
                    overlaps.push(timeRangesInMinutes[i - 1].originalIndex);
                }
            }
        }
        return overlaps.sort((a, b) => a - b);
    }
    addTimeRange(day) {
        const currentTimeRanges = this.schedule[day];
        const dayStart = 0;
        const dayEnd = 1425;
        if (currentTimeRanges.length === 0) {
            this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }];
        }
        else {
            const timeRangesInMinutes = currentTimeRanges
                .map(range => ({
                start: utils.timeToMinutes(range.start),
                end: utils.timeToMinutes(range.end),
            }))
                .sort((a, b) => a.start - b.start);
            const lastRangeEnd = timeRangesInMinutes[timeRangesInMinutes.length - 1].end;
            if (lastRangeEnd + 60 <= dayEnd) {
                this.schedule[day].push({
                    start: utils.convertTo12HourFormat(utils.minutesToTime(lastRangeEnd)),
                    end: utils.convertTo12HourFormat(utils.minutesToTime(lastRangeEnd + 60)),
                });
            }
            else {
                let gapFound = false;
                if (timeRangesInMinutes[0].start > dayStart + 60) {
                    this.schedule[day].push({
                        start: utils.convertTo12HourFormat(utils.minutesToTime(dayStart)),
                        end: utils.convertTo12HourFormat(utils.minutesToTime(dayStart + 60)),
                    });
                    gapFound = true;
                }
                if (!gapFound) {
                    for (let i = 0; i < timeRangesInMinutes.length - 1; i++) {
                        const currentEnd = timeRangesInMinutes[i].end;
                        const nextStart = timeRangesInMinutes[i + 1].start;
                        if (nextStart - currentEnd >= 60) {
                            this.schedule[day].push({
                                start: utils.convertTo12HourFormat(utils.minutesToTime(currentEnd)),
                                end: utils.convertTo12HourFormat(utils.minutesToTime(currentEnd + 60)),
                            });
                            break;
                        }
                    }
                }
            }
        }
        this.schedule[day].sort((a, b) => utils.timeToMinutes(a.start) - utils.timeToMinutes(b.start));
        this.schedule = { ...this.schedule };
    }
    removeTimeRange(day, index) {
        this.schedule[day].splice(index, 1);
        this.schedule = { ...this.schedule };
    }
    setTime(event) {
        const { key, value } = event.detail;
        const [dayIndex, timeType] = key.split('_');
        const [day, index] = dayIndex.split(':');
        if (timeType === 'start') {
            this.schedule[day][index].start = value;
        }
        else if (timeType === 'end') {
            this.schedule[day][index].end = value;
        }
        this.internals.setValidity({ customError: false });
        this.schedule = { ...this.schedule };
    }
    setFormError(event) {
        const { key } = event.detail;
        const [_, timeType] = key.split('_');
        const element = this.host.shadowRoot?.getElementById(key);
        if (element) {
            this.internals.setValidity({ customError: true }, `Invalid ${timeType} time`, element);
        }
    }
    openHoursToSchedule(openHours) {
        const newSchedule = {
            SUN: [],
            MON: [],
            TUE: [],
            WED: [],
            THU: [],
            FRI: [],
            SAT: [],
        };
        openHours.forEach(openHour => {
            openHour.days.forEach(day => {
                const dayKey = this.getDayKey(day);
                const start12hr = utils.convertTo12HourFormat(openHour.start);
                const end12hr = utils.convertTo12HourFormat(openHour.end);
                const timeRange = { start: start12hr, end: end12hr };
                let timeRangeExists = false;
                if (newSchedule[dayKey]) {
                    timeRangeExists = newSchedule[dayKey].some(range => range.start === timeRange.start && range.end === timeRange.end);
                }
                if (!timeRangeExists) {
                    if (newSchedule[dayKey]) {
                        newSchedule[dayKey].push(timeRange);
                    }
                    else {
                        newSchedule[dayKey] = [timeRange];
                    }
                }
            });
        });
        this.schedule = newSchedule;
    }
    getDayKey(dayIndex) {
        const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
        return days[dayIndex];
    }
    scheduleToOpenHours(schedule) {
        const dayKeys = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
        let openHoursMap = new Map();
        dayKeys.forEach((dayKey, index) => {
            if (schedule[dayKey]) {
                schedule[dayKey].forEach(timeRange => {
                    const start24hr = utils.convertTo24HourFormat(timeRange.start);
                    const end24hr = utils.convertTo24HourFormat(timeRange.end);
                    const key = `${start24hr}-${end24hr}`;
                    if (!openHoursMap.has(key)) {
                        openHoursMap.set(key, { days: [index], start: start24hr, end: end24hr });
                    }
                    else {
                        let entry = openHoursMap.get(key);
                        if (entry) {
                            entry.days.push(index);
                            openHoursMap.set(key, entry);
                        }
                    }
                });
            }
        });
        let selectedOpenHours = [];
        openHoursMap.forEach((value, _key) => {
            selectedOpenHours.push({
                days: value.days,
                start: value.start,
                end: value.end,
                timezone: this.timezone,
            });
        });
        return selectedOpenHours;
    }
    render() {
        const timezoneOptions = Object.keys(constants.TIMEZONE_MAP).map(key => ({
            label: constants.TIMEZONE_MAP[key],
            value: key,
        }));
        const selectedTimezoneOption = timezoneOptions.find(i => i.value === this.timezone);
        return (index$1.h(index$1.Host, { key: '7f5643bbe1297934343819e75a79ddc058e01f5b' }, index$1.h("div", { key: '53d182ac0115d273cc3cc15e81a52a488b8d9e52', class: "nylas-availability-picker", part: "nap" }, !this.hideHeader && (index$1.h("div", { class: "header", part: "nap__header" }, index$1.h("h3", null, utils.instance.t('nylasAvailabilityPicker.headerTitle')), index$1.h("p", null, utils.instance.t('nylasAvailabilityPicker.headerSubTitle'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasAvailabilityPicker.tooltip.desc')))))), index$1.h("div", { key: '2818430114319c8993ade1da8be4c8e04754283d', class: "content" }, index$1.h("div", { key: '459c8d97a9ab00f2ffb1fe38121f2652b6b06b02', class: "select-timezone", part: "nap__select-timezone" }, index$1.h("h4", { key: '5d13b9bf3f44da8097d24b33b37c155500ba9a3c', class: "sub-header" }, utils.instance.t('nylasAvailabilityPicker.selectTimezone')), selectedTimezoneOption?.label && (index$1.h("select-dropdown", { name: "timezone", exportparts: "sd_dropdown: nap__timezone-container, sd_dropdown-button: nap__timezone-button, sd_dropdown-content: nap__timezone-dropdown-content", options: timezoneOptions, defaultSelectedOption: selectedTimezoneOption }, index$1.h("span", { slot: "select-icon" }, index$1.h("globe-icon", { width: "20", height: "20" }))))), index$1.h("div", { key: '055c9ad67845135ba63be4a2f3aa6b3e5f4d2469', class: "availability", part: "nap__availability" }, Object.keys(this.schedule).map(key => {
            const day = key;
            const timeRanges = this.schedule[key];
            return (index$1.h("div", { class: "availability-day" }, index$1.h("div", { class: "day", part: "nap__day" }, index$1.h("input", { type: "checkbox", name: day, id: day, checked: timeRanges.length > 0, onClick: () => {
                    if (timeRanges.length > 0) {
                        this.schedule[day] = [];
                    }
                    else {
                        this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }];
                    }
                    this.schedule = { ...this.schedule };
                } }), index$1.h("label", { htmlFor: day, "aria-label": "Select day" }, utils.instance.t(`nylasAvailabilityPicker.days.${day}`))), index$1.h("div", { class: "time-ranges", part: "nap__time-ranges" }, timeRanges.length ? null : index$1.h("span", { class: "unavailable" }, utils.instance.t('nylasAvailabilityPicker.unavailable')), timeRanges.length > 0 &&
                timeRanges.map((timeRange, timeRangeIndex) => {
                    const startKey = `${key}:${timeRangeIndex}_start`;
                    const endKey = `${key}:${timeRangeIndex}_end`;
                    return (index$1.h("div", { class: "time-range", part: "nap__time-range" }, index$1.h("div", { class: "pickers" }, index$1.h("nylas-time-window-picker", { id: startKey, hasError: this.overlapDays[day]?.includes(timeRangeIndex), time: timeRange.start, name: startKey, key: startKey, exportparts: "time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times" }), index$1.h("span", null, " - "), index$1.h("nylas-time-window-picker", { id: endKey, hasError: this.overlapDays[day]?.includes(timeRangeIndex), time: timeRange.end, name: endKey, key: endKey, minimumStartTime: timeRange.start, exportparts: "time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times" })), index$1.h("button", { onClick: () => this.removeTimeRange(day, timeRangeIndex) }, index$1.h("close-icon", null))));
                }), index$1.h("p", { class: "error" }, this.overlapDays[day] ? 'Overlapping time ranges' : '')), index$1.h("div", null, timeRanges.length > 0 ? (index$1.h("button", { onClick: () => this.addTimeRange(day), part: "nap__add-time-range" }, index$1.h("add-circle-icon", null))) : null)));
        }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["configChangedHandler"],
        "schedule": ["scheduleChanged"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$u([
    registerComponent.RegisterComponent({
        name: 'nylas-availability-picker',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata$u("design:type", Function),
    __metadata$u("design:paramtypes", []),
    __metadata$u("design:returntype", void 0)
], NylasAvailabilityPicker.prototype, "render", null);
NylasAvailabilityPicker.style = NylasAvailabilityPickerStyle0;

const nylasBookingCalendarPickerCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-calendar-picker{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-booking-calendar-picker .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-booking-calendar-picker .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-booking-calendar-picker .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading{padding-bottom:1rem;display:flex;flex-direction:column;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .label{display:flex;align-items:center;gap:0.5rem;margin:1rem 1rem 0;color:var(--nylas-base-800)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .loading-button{margin:0 1rem;padding:0;width:inherit;height:48px;color:black;font-size:16px;cursor:not-allowed;display:flex;gap:0.5rem;justify-content:space-between;align-items:center;background:transparent;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .loading-button span{padding:0 1rem}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown span.label tooltip-component{display:flex}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasBookingCalendarPickerStyle0 = nylasBookingCalendarPickerCss;

var __decorate$t = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$t = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingCalendarPicker = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.calendars = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.name = 'booking-calendar';
        this.defaultBookingCalendar = '';
        this.hideHeader = false;
        this.expressFlow = false;
        this.selectedLanguage = undefined;
        this.selectedCalendar = '';
    }
    connectedCallback() {
        utils.debug('nylas-booking-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidLoad');
        const primaryCalendar = this.calendars?.find(calendar => calendar.is_primary)?.id;
        const firstCalendar = this.calendars?.[0]?.id;
        this.defaultBookingCalendar = this.defaultBookingCalendar || primaryCalendar || firstCalendar || '';
        this.isInternalsAvailable && this.internals.setFormValue(this.defaultBookingCalendar.toString(), this.name);
        this.selectedCalendar = this.defaultBookingCalendar;
    }
    componentWillUpdate() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidRender');
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-booking-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    currentUserCalendarsChangedHandler(newValue) {
        utils.debug('nylas-booking-calendar-picker', 'currentUserCalendarsChangedHandler', newValue);
        this.currentUserCalendars = newValue;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-booking-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        this.isInternalsAvailable && this.internals.setValidity({});
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedCalendar = value;
            this.isInternalsAvailable && this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const currentUserCalendarOptions = this.currentUserCalendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const optionsFromCalendars = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const calendarOptions = optionsFromCalendars?.length > 0 ? optionsFromCalendars : currentUserCalendarOptions || [];
        const defaultOption = calendarOptions.find(cal => cal.value == this.defaultBookingCalendar);
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "nylas-booking-calendar-picker", part: "nbcp" }, !this.hideHeader && (index$1.h("div", { class: "header", part: "nbcp__header" }, index$1.h("h3", null, utils.instance.t('nylasBookingCalendarPicker.headerTitle')), index$1.h("p", null, utils.instance.t('nylasBookingCalendarPicker.headerSubTitle'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasBookingCalendarPicker.tooltip.desc')))))), calendarOptions.length > 0 ? (index$1.h("div", { class: "nylas-booking-calendar-picker__dropdown" }, index$1.h("select-dropdown", { name: "booking-calendar", options: [{ value: '', label: utils.instance.t('nylasBookingCalendarPicker.selectOptionLabel') }, ...calendarOptions], withSearch: false, required: this.expressFlow, emptyValue: utils.instance.t('nylasBookingCalendarPicker.selectOptionLabel'), errorMessage: utils.instance.t('nylasBookingCalendarPicker.selectCalendarErrorMessage'), exportparts: "sd_dropdown: nbcp__dropdown, sd_dropdown-button: nbcp__dropdown-button, sd_dropdown-content: nbcp__dropdown-content", defaultSelectedOption: defaultOption ? defaultOption : null }))) : (index$1.h("div", { class: "nylas-booking-calendar-picker__loading" }, index$1.h("span", { class: "label" }, utils.instance.t('nylasBookingCalendarPicker.tooltip.desc'), " ", index$1.h("info-icon", null)), index$1.h("div", { class: "loading-button" }, index$1.h("span", null, utils.instance.t('loading'), "...")))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "currentUserCalendars": ["currentUserCalendarsChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$t([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$t("design:type", Function),
    __metadata$t("design:paramtypes", []),
    __metadata$t("design:returntype", void 0)
], NylasBookingCalendarPicker.prototype, "render", null);
NylasBookingCalendarPicker.style = NylasBookingCalendarPickerStyle0;

const nylasBookingConfirmationRedirectCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-confirmation-redirect{width:inherit;display:flex;flex-direction:column}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.label{display:flex;align-items:center;gap:4px;margin-bottom:4px;color:var(--nylas-base-800)}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.label tooltip-component{display:flex}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown input-component::part(ic__input_wrapper){margin-top:1rem}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.error-message{color:var(--nylas-error)}";
const NylasBookingConfirmationRedirectStyle0 = nylasBookingConfirmationRedirectCss;

var __decorate$s = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$s = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingConfirmationRedirect = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-redirect';
        this.redirectUrl = '';
        this.redirectUrlErrorMessage = '';
        this.selectedLanguage = undefined;
        this.currentRedirectUrl = '';
        this.acceptUrl = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-redirect', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-redirect', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.scheduler?.confirmation_redirect_url) {
            this.currentRedirectUrl = newValue?.scheduler?.confirmation_redirect_url;
            this.acceptUrl = newValue?.scheduler?.confirmation_redirect_url !== '';
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-booking-confirmation-redirect', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-confirmation-redirect', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.currentRedirectUrl = this.redirectUrl;
            this.acceptUrl = this.redirectUrl !== '';
        }
        this.componentLoaded = true;
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.currentRedirectUrl.toString(), this.name);
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-booking-confirmation-redirect', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-booking-confirmation-redirect', 'nylasFormDropdownChangedHandler', event.detail);
        const { name, value } = event.detail;
        if (name === 'confirmation-redirect-dropdown') {
            if (value === 'custom') {
                this.acceptUrl = true;
            }
            else {
                this.acceptUrl = false;
                this.internals.setFormValue('', this.name);
                this.valueChanged.emit({ name: this.name, value: '' });
            }
        }
    }
    nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        this.currentRedirectUrl = value;
        if (this.acceptUrl && name === 'confirmation-redirect') {
            this.redirectUrlErrorMessage = '';
            if (!utils.isValidUrl(this.currentRedirectUrl)) {
                this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
                this.redirectUrlErrorMessage = 'Please enter a valid URL.';
                return;
            }
            this.internals.setValidity({});
            const valueChanged = (event) => {
                const { value } = event.detail;
                this.internals.setFormValue(value.toString(), this.name);
            };
            this.valueChanged.emit({ ...event.detail, valueChanged });
        }
    }
    formSubmittedHandler(_event) {
        if (this.acceptUrl && !utils.isValidUrl(this.currentRedirectUrl)) {
            this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
            this.redirectUrlErrorMessage = 'Please enter a valid URL.';
        }
        else {
            this.internals.setValidity({});
        }
    }
    render() {
        const redirectOptions = [
            {
                label: utils.instance.t('nylasBookingConfirmationRedirect.redirectOption', { context: 'default' }),
                value: 'default',
            },
            {
                label: utils.instance.t('nylasBookingConfirmationRedirect.redirectOption', { context: 'custom' }),
                value: 'custom',
            },
        ];
        return (index$1.h(index$1.Host, { key: '5d44420cd786a4ca2ca34692283ae220cf129aa4' }, index$1.h("div", { key: '87faa97ba4edc3c0a0d153454b57716d9032cea6', class: "nylas-booking-confirmation-redirect", part: "nbcr" }, redirectOptions.length > 0 && (index$1.h("div", { class: "nylas-booking-confirmation-redirect__dropdown" }, index$1.h("span", { class: "label" }, utils.instance.t('nylasBookingConfirmationRedirect.dropdownLabel'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasBookingConfirmationRedirect.tooltip.desc')))), this.componentLoaded && (index$1.h("select-dropdown", { name: "confirmation-redirect-dropdown", options: redirectOptions, withSearch: false, defaultSelectedOption: redirectOptions.find(option => option.value === (this.acceptUrl ? 'custom' : 'default')), exportparts: "sd_dropdown: nbcr__dropdown, sd_dropdown-button: nbcr__dropdown-button, sd_dropdown-content: nbcr__dropdown-content" })), this.acceptUrl && (index$1.h("div", null, index$1.h("input-component", { name: "confirmation-redirect", id: "confirmation-redirect", type: "text", placeholder: "Enter custom redirect URL", required: false, part: "ic__input_wrapper: nbcr__input-textfield", defaultValue: this.currentRedirectUrl }), this.redirectUrlErrorMessage && index$1.h("span", { class: "error-message" }, this.redirectUrlErrorMessage))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$s([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-confirmation-redirect',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$s("design:type", Function),
    __metadata$s("design:paramtypes", []),
    __metadata$s("design:returntype", void 0)
], NylasBookingConfirmationRedirect.prototype, "render", null);
NylasBookingConfirmationRedirect.style = NylasBookingConfirmationRedirectStyle0;

const nylasBookingConfirmationTypeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-confirmation-type{width:inherit;display:flex;flex-direction:column;margin-bottom:1rem}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown span.label tooltip-component{display:flex}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasBookingConfirmationTypeStyle0 = nylasBookingConfirmationTypeCss;

var __decorate$r = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$r = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingConfirmationType = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-type';
        this.bookingType = 'booking';
        this.showComponent = this.selectedConfiguration?.event_booking?.booking_type !== 'custom-confirmation';
        this.selectedLanguage = undefined;
        this.selectedBookingType = undefined;
        this.showDropdown = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-type', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-type', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.event_booking?.booking_type) {
            this.selectedBookingType = newValue?.event_booking?.booking_type;
            this.showDropdown = newValue?.event_booking?.booking_type !== 'custom-confirmation' && !!newValue?.scheduler?.organizer_confirmation_url;
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-booking-confirmation-type', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-confirmation-type', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedBookingType = this.bookingType || 'booking';
            this.showDropdown = this.showComponent;
        }
        this.internals.setFormValue(this.selectedBookingType.toString(), this.name);
    }
    componentWillUpdate() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-booking-confirmation-type', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedBookingType = value;
            this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ ...event.detail, valueChanged });
    }
    render() {
        const bookingOptions = [
            {
                label: utils.instance.t('nylasBookingConfirmationType.bookingOption', { context: 'booking' }),
                value: 'booking',
            },
            {
                label: utils.instance.t('nylasBookingConfirmationType.bookingOption', { context: 'organizerConfirmation' }),
                value: 'organizer-confirmation',
            },
        ];
        return (index$1.h(index$1.Host, { key: 'e50655127ac22aa67231a50d429fdbb9f85b2b46' }, this.showDropdown && (index$1.h("div", { class: "nylas-booking-confirmation-type", part: "nbct" }, bookingOptions.length > 0 && (index$1.h("div", { class: "nylas-booking-confirmation-type__dropdown" }, index$1.h("span", { class: "label" }, utils.instance.t('nylasBookingConfirmationType.dropdownLabel'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasBookingConfirmationType.tooltip.desc')))), this.selectedBookingType && (index$1.h("select-dropdown", { name: "booking-type", options: bookingOptions, withSearch: false, exportparts: "sd_dropdown: nbct__dropdown, sd_dropdown-button: nbct__dropdown-button, sd_dropdown-content: nbct__dropdown-content", defaultSelectedOption: bookingOptions.find(cal => cal.value == this.selectedBookingType) }))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$r([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-confirmation-type',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$r("design:type", Function),
    __metadata$r("design:paramtypes", []),
    __metadata$r("design:returntype", void 0)
], NylasBookingConfirmationType.prototype, "render", null);
NylasBookingConfirmationType.style = NylasBookingConfirmationTypeStyle0;

/**!
 * Sortable 1.15.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

var version = "1.15.2";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches( /**HTMLElement*/el, /**String*/selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }
      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = '';
  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');
      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
      i = 0,
      n = list.length;
    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}

/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode;

    // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect();

          // Set relative to edges of padding box of container
          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
      scaleX = elMatrix && elMatrix.a,
      scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}

/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */
function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
    elSideVal = getRect(el)[elSide];

  /* jshint boss:true */
  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
      visible = void 0;
    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}

/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
    i = 0,
    children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}

/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */
function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}

/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */
function index(el, selector) {
  var index = 0;
  if (!el || !el.parentNode) {
    return -1;
  }

  /* jshint boss:true */
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }
  return index;
}

/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */
function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
    offsetTop = 0,
    winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el),
        scaleX = elMatrix.a,
        scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}

/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */
function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
        _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function getChildContainingRectFromElement(container, options, ghostEl) {
  var rect = {};
  Array.from(container.children).forEach(function (child) {
    var _rect$left, _rect$top, _rect$right, _rect$bottom;
    if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
    var childRect = getRect(child);
    rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
    rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
    rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
    rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
  });
  rect.width = rect.right - rect.left;
  rect.height = rect.bottom - rect.top;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
    animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

        // If animating: compensate for current animation
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }
      var animating = false,
        animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
          target = state.target,
          fromRect = target.fromRect,
          toRect = getRect(target),
          prevFromRect = target.prevFromRect,
          prevToRect = target.prevToRect,
          animatingRect = state.rect,
          targetMatrix = matrix(target, true);
        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
          // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }

        // if fromRect != toRect: animate
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d,
          translateX = (currentRect.left - toRect.left) / (scaleX || 1),
          translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }
    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function () {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return;
      // Fire global events if it exists in this sortable
      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      }

      // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined
      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized;

      // Add default options from plugin
      _extends(defaults, initialized.defaults);
    });
    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);
      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return;

      // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
    rootEl = _ref.rootEl,
    name = _ref.name,
    targetEl = _ref.targetEl,
    cloneEl = _ref.cloneEl,
    toEl = _ref.toEl,
    fromEl = _ref.fromEl,
    oldIndex = _ref.oldIndex,
    newIndex = _ref.newIndex,
    oldDraggableIndex = _ref.oldDraggableIndex,
    newDraggableIndex = _ref.newDraggableIndex,
    originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
    options = sortable.options,
    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }
  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];
var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    originalEvent = _ref.evt,
    data = _objectWithoutProperties(_ref, _excluded);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};
function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}
var dragEl,
  parentEl,
  ghostEl,
  rootEl,
  nextEl,
  lastDownEl,
  cloneEl,
  cloneHidden,
  oldIndex,
  newIndex,
  oldDraggableIndex,
  newDraggableIndex,
  activeGroup,
  putSortable,
  awaitingDragStarted = false,
  ignoreNextClick = false,
  sortables = [],
  tapEvt,
  touchEvt,
  lastDx,
  lastDy,
  tapDistanceLeft,
  tapDistanceTop,
  moved,
  lastTarget,
  lastDirection,
  pastFirstInvertThresh = false,
  isCircumstantialInvert = false,
  targetMoveDistance,
  // For positioning ghost absolutely
  ghostRelativeParent,
  ghostRelativeParentInitialScroll = [],
  // (left, top)

  _silent = false,
  savedInputChecked = [];

/** @const */
var documentExists = typeof document !== 'undefined',
  PositionGhostAbsolutely = IOS,
  CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
  // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
  supportCssPointerEvents = function () {
    if (!documentExists) return;
    // false when <= IE11
    if (IE11OrLess) {
      return false;
    }
    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
  _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }
    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }
    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }
    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
  _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },
  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
  _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }
    var group = {};
    var originalGroup = options.group;
    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }
    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
  _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
  _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  };

// #1184 fix - Prevent click event on fallback if dragged but item not changed position
if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      // Create imitation event
      var event = {};
      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};

/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el; // root element
  this.options = options = _extends({}, options);

  // Export instance
  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults);

  // Set default options
  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }
  _prepareGroup(options);

  // Bind all private methods
  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  }

  // Setup drag mode
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  }

  // Bind events
  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }
  sortables.push(this.el);

  // Restore sorting
  options.store && options.store.get && this.sort(options.store.get(this) || []);

  // Add animation state manager
  _extends(this, AnimationStateManager());
}
Sortable.prototype = /** @lends Sortable.prototype */{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {
    if (!evt.cancelable) return;
    var _this = this,
      el = this.el,
      options = this.options,
      preventOnFilter = options.preventOnFilter,
      type = evt.type,
      touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
      target = (touch || evt).target,
      originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
      filter = options.filter;
    _saveInputCheckedState(el);

    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    }

    // cancel dnd if original target is content editable
    if (originalTarget.isContentEditable) {
      return;
    }

    // Safari ignores further event handling after mousedown
    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    }

    // Get the index of the dragged element within its parent
    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable);

    // Check filter
    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });
      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }
    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    }

    // Prepare `dragstart`
    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target) {
    var _this = this,
      el = _this.el,
      options = _this.options,
      ownerDocument = el.ownerDocument,
      dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';
      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        }
        // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove
        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        }

        // Bind the events: dragstart/dragend
        _this._triggerDragStart(evt, touch);

        // Drag start event
        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        });

        // Chosen item
        toggleClass(dragEl, options.chosenClass, true);
      };

      // Disable "draggable"
      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop);

      // Make dragEl draggable (must be before delay for FireFox)
      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent('delayStart', this, {
        evt: evt
      });

      // Delay is impossible for native DnD in Edge or IE
      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag
        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {
    touch = touch || evt.pointerType == 'touch' && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }
    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });
      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }
      var options = this.options;

      // Apply effect
      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost();

      // Drag start event
      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent; // store last element
        }
        /* jshint boss:true */ while (parent = parent.parentNode);
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {
    if (tapEvt) {
      var options = this.options,
        fallbackTolerance = options.fallbackTolerance,
        fallbackOffset = options.fallbackOffset,
        touch = evt.touches ? evt.touches[0] : evt,
        ghostMatrix = ghostEl && matrix(ghostEl, true),
        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
        relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
        dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
        dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

      // only set the status to dragging, when we are actually dragging
      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
        options = this.options;

      // Position absolutely
      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);

      // Set transform-origin
      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent('setupClone', this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';
      this._hideClone();
      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    }

    // #1143: IFrame support workaround
    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true);

    // Set proper drop events
    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, 'drop', _this);

      // #1276 fix:
      css(dragEl, 'transform', 'translateZ(0)');
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;
    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver( /**Event*/evt) {
    var el = this.el,
      target = evt.target,
      dragRect,
      targetRect,
      revert,
      options = this.options,
      group = options.group,
      activeSortable = Sortable.active,
      isOwner = activeGroup === group,
      canSort = options.sort,
      fromSortable = putSortable || activeSortable,
      vertical,
      _this = this,
      completedFired = false;
    if (_silent) return;
    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    }

    // Capture animation state
    function capture() {
      dragOverEvent('dragOverAnimationCapture');
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    }

    // Return invocation when dragEl is inserted (or completed)
    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        }

        // Animation
        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      }

      // Null lastTarget if it is not inside a previously swapped element
      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      }

      // no bubbling and not fallback
      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

        // Do not detect for empty insert if already inserted
        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    }

    // Call when dragEl has been inserted
    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;
      if (revert) {
        parentEl = rootEl; // actualization
        capture();
        this._hideClone();
        dragOverEvent('revert');
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list

        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        }

        // if there is a last element, it is the target
        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
          targetBeforeFirstSwap,
          differentLevel = dragEl.parentNode !== el,
          differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
          side1 = vertical ? 'top' : 'left',
          scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        }
        // If dragEl is already beside target: Do not insert
        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
          after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          }

          // Undo chrome's scroll adjustment (has no effect on other browsers)
          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode; // actualization

          // must be done before animation
          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop( /**Event*/evt) {
    var el = this.el,
      options = this.options;

    // Get the index of the dragged element within its parent
    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode;

    // Get again after plugin event
    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId);

    // Unbind events
    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, 'user-select', '');
    }
    css(dragEl, 'transform', '');
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }
        _disableDraggable(dragEl);
        dragEl.style['will-change'] = '';

        // Remove classes
        // ghostClass is added in dragStarted
        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass(dragEl, this.options.chosenClass, false);

        // Drag stop event
        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            // Remove event
            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            });

            // drag from one list and drop into another
            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          });

          // Save sorting
          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent( /**Event*/evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);
        break;
      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },
  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
      el,
      children = this.el.children,
      i = 0,
      n = children.length,
      options = this.options;
    for (; i < n; i++) {
      el = children[i];
      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order;
  },
  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
      rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];
      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;
    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);
      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }
      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },
  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);
    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    }
    // Remove draggable attributes
    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return;

      // show clone at dragEl or original position
      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};
function _globalDragOver( /**Event*/evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
    sortable = fromEl[expando],
    onMoveFn = sortable.options.onMove,
    retVal;
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
    targetLength = vertical ? targetRect.height : targetRect.width,
    targetS1 = vertical ? targetRect.top : targetRect.left,
    targetS2 = vertical ? targetRect.bottom : targetRect.right,
    invert = false;
  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}

/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */
function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}

/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
    i = str.length,
    sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}

// Fixed #973:
if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
}

// Export utils
Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};

/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */
Sortable.get = function (element) {
  return element[expando];
};

/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */
Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }
  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};

/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */
Sortable.create = function (el, options) {
  return new Sortable(el, options);
};

// Export
Sortable.version = version;

var autoScrolls = [],
  scrollEl,
  scrollRootEl,
  scrolling = false,
  lastAutoScrollX,
  lastAutoScrollY,
  touchEvt$1,
  pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt;

      // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);

        // Listener for pointer element change
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          // Detect for pointer elem change, emulating native DnD behaviour
          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
    y = (evt.touches ? evt.touches[0] : evt).clientY,
    sens = options.scrollSensitivity,
    speed = options.scrollSpeed,
    winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
    scrollCustomFn;

  // New scroll root, set scrollEl
  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent,
      rect = getRect(el),
      top = rect.top,
      bottom = rect.bottom,
      left = rect.left,
      right = rect.right,
      width = rect.width,
      height = rect.height,
      canScrollX = void 0,
      canScrollY = void 0,
      scrollWidth = el.scrollWidth,
      scrollHeight = el.scrollHeight,
      elCSS = css(el),
      scrollPosX = el.scrollLeft,
      scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }
    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */
        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
          }
          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    dragEl = _ref.dragEl,
    activeSortable = _ref.activeSortable,
    dispatchSortableEvent = _ref.dispatchSortableEvent,
    hideGhostForTarget = _ref.hideGhostForTarget,
    unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};
function Revert() {}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
      putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable) {
      putSortable.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }
    this.sortable.animateAll();
    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};
_extends(Revert, {
  pluginName: 'revertOnSpill'
});
function Remove() {}
Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
      putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};
_extends(Remove, {
  pluginName: 'removeOnSpill'
});

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

const nylasBookingFormConfigCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-form-config{width:inherit;display:flex;flex-direction:column;margin:1rem;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-booking-form-config .header{padding:1rem;display:flex;justify-content:space-between;border-bottom:1px solid var(--nylas-base-200)}.nylas-booking-form-config .header .header_text h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-booking-form-config .header .header_text p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-booking-form-config .header .header_action{display:flex}.nylas-booking-form-config .header .header_action select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-booking-form-config .content{padding:1rem;color:var(--nylas-base-900);font-size:16px;font-family:var(--nylas-font-family)}@media screen and (max-width: 504px){.nylas-booking-form-config .content{font-size:15px}}.nylas-booking-form-config .content .additional_fields{display:flex;flex-direction:column;gap:1rem;position:relative;overflow:auto}@media screen and (max-width: 504px){.nylas-booking-form-config .content .additional_fields{gap:0.5rem;padding:0}}.nylas-booking-form-config .content .additional_fields .form-field{border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);padding:1rem;user-select:none;background-color:white;position:relative}.nylas-booking-form-config .content .additional_fields .form-field.highlight{background-color:var(--nylas-base-200)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header{display:flex;justify-content:space-between;align-items:center}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .dragable{cursor:move}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_text{flex:1;text-align:left;padding-left:1rem}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_text h4{margin:0;font-size:16px;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_text p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions{display:flex;align-items:center}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .is-required{color:var(--nylas-base-500);background-color:var(--nylas-base-50);font-weight:600;padding:4px 8px;border-radius:var(--nylas-border-radius-2x)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions button{border:none;background:transparent;height:40px;margin:0 1rem;cursor:pointer;color:var(--nylas-base-800)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions button:hover,.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions button:active{color:var(--nylas-primary)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .chevron{display:flex;align-self:center;cursor:pointer}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .chevron:hover,.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .chevron:active{color:var(--nylas-primary)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .chevron.open{transform:rotate(90deg)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_header .form-field_header_actions .chevron.closed{transform:rotate(270deg)}.nylas-booking-form-config .content .additional_fields .form-field span.error{opacity:1;color:var(--nylas-error);margin-top:8px;transition:opacity 0.3s ease-out}.nylas-booking-form-config .content .additional_fields .form-field span.error.fade-out{opacity:0}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content{padding:1.5rem 0 0 2.7rem}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content.hidden{display:none}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .inputs{display:flex;flex-direction:column;gap:0.5rem}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .inputs .label-input{padding:0 1rem 0 0}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .inputs .required-input{display:flex}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .inputs .required-input label{padding:0.5rem}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .inputs .required-input input[type=checkbox]{transform:scale(1.3)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container h4{margin:0;font-size:16px;line-height:20px;font-weight:500;padding:0.5rem 0;color:var(--nylas-base-900);text-align:left}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container button{border:none;background:transparent;height:40px;margin:1rem 0;cursor:pointer;color:var(--nylas-base-800);display:flex;align-items:center;justify-content:space-between}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container button:hover,.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container button:active{color:var(--nylas-primary)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container .options{display:flex;flex-direction:column;gap:1rem}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container .options .option{display:flex;justify-content:space-between;align-items:center}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container .options .option button{border:none;background:transparent;height:40px;margin:0 1rem;cursor:pointer;color:var(--nylas-base-800)}.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container .options .option button:hover,.nylas-booking-form-config .content .additional_fields .form-field .form-field_content .options-container .options .option button:active{color:var(--nylas-primary)}";
const NylasBookingFormConfigStyle0 = nylasBookingFormConfigCss;

var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$q = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const staticFields = [
    {
        type: 'text',
        label: 'Your name',
        key: 'your_name',
        typeLabel: 'Short text',
        readonly: true,
        required: true,
        isOpen: false,
        order: 0,
    },
    {
        type: 'email',
        label: 'Your Email',
        key: 'your_email',
        typeLabel: 'Email',
        readonly: true,
        isOpen: false,
        required: true,
        order: 1,
    },
];
const NylasBookingFormConfig = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'additional-fields';
        this.additionalFields = undefined;
        this.selectedLanguage = undefined;
        this.formFields = undefined;
        this.watchFields = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        this.updateFormFields(newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-booking-form-config', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-form-config', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-form-config', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.formFields = [...staticFields];
    }
    componentDidLoad() {
        utils.debug('nylas-booking-form-config', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.updateFormFields(this.selectedConfiguration);
        }
    }
    updateFormFields(config) {
        this.watchFields = {
            title: config?.event_booking?.title || '',
            description: config?.event_booking?.description || '',
        };
        const additionalFields = Object.entries(config?.scheduler?.additional_fields || {}).map(([id, field]) => ({ ...field, key: id })) || this.additionalFields || [];
        this.formFields = [
            ...staticFields,
            ...additionalFields
                .sort((a, b) => a.order - b.order)
                .map((f, i) => {
                const fieldType = constants.FIELD_TYPES.find(field => field.type === f.type);
                if (!fieldType) {
                    return { ...f, isOpen: false, typeLabel: 'Unknown' };
                }
                const typeLabel = fieldType.label;
                f.order = i + 2;
                return { ...f, isOpen: false, typeLabel };
            }),
        ];
        const container = this.host.shadowRoot?.getElementById('fields');
        Sortable.create(container, {
            animation: 150,
            swap: true,
            swapClass: 'highlight',
            onEnd: this.swapFields.bind(this),
            handle: '.form-field_header',
            filter: '.fixed',
            onMove: evt => !evt.related.classList.contains('fixed'),
        });
    }
    watchHandler(newValue) {
        const additionalFields = newValue;
        const sortedFields = additionalFields
            .filter(f => !f.readonly)
            .sort((a, b) => a.order - b.order)
            .map((f, i) => {
            const field = {
                type: f.type,
                required: f.required,
                label: f.label,
                order: i + 1,
                options: f.options,
                key: f.key,
                default: f.default,
            };
            return { ...field };
        });
        const addFieldsMap = sortedFields.reduce((acc, field) => {
            acc[field.key] = {
                type: field.type,
                required: field.required,
                order: field.order,
                options: field.options,
                label: field.label,
                default: field.default,
            };
            return acc;
        }, {});
        this.valueChanged.emit({
            value: addFieldsMap,
            name: this.name,
        });
    }
    findNextMissingNumber(arr) {
        if (arr.length === 0) {
            return 1;
        }
        const numbers = arr
            .map(item => {
            const parts = item.split('_');
            const lastPart = parts.pop();
            const parsedNumber = parseInt(lastPart || '', 10);
            return isNaN(parsedNumber) ? null : parsedNumber;
        })
            .filter((num) => num !== null)
            .sort((a, b) => a - b);
        for (let i = 0; i < numbers.length - 1; i++) {
            if (numbers[i + 1] !== numbers[i] + 1) {
                return numbers[i] + 1;
            }
        }
        return numbers.length > 0 ? numbers[numbers.length - 1] + 1 : 1;
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'add-field') {
            const field = constants.FIELD_TYPES.find(f => f.type === value);
            const maxOrder = Math.max(...this.formFields.map(f => f.order));
            const existingFieldKeys = this.formFields.filter(f => f.type === field.type).map(f => f.key);
            const next = this.findNextMissingNumber(existingFieldKeys);
            const newField = { ...field, label: field.label, key: `${field.type}_${field.label.split(' ').join('-')}_${next}`, order: maxOrder + 1 };
            this.formFields = [...this.formFields, newField];
        }
    }
    nylasFormInputChangedHandler(event) {
        const { name } = event.detail;
        if (name.startsWith('default-value-')) {
            const fieldIndex = parseInt(name.split('-').pop() || '0');
            this.fieldDefaultValueChanged(fieldIndex, event);
        }
        else {
            const [fieldIndex, optionIndex] = name.split('_');
            if (optionIndex) {
                this.fieldOptionChange(parseInt(fieldIndex), parseInt(optionIndex), event);
            }
            else {
                this.fieldLabelChange(parseInt(fieldIndex), event);
            }
        }
    }
    valueChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'title' || name === 'description') {
            this.watchFields = {
                ...this.watchFields,
                [name]: value,
            };
        }
    }
    swapFields(event) {
        const { oldIndex, newIndex } = event;
        if (oldIndex !== undefined && newIndex !== undefined && oldIndex !== newIndex) {
            const newArray = [...this.formFields].map(f => {
                if (f.order === oldIndex) {
                    return {
                        ...f,
                        order: newIndex,
                    };
                }
                if (f.order === newIndex) {
                    return {
                        ...f,
                        order: oldIndex,
                    };
                }
                return f;
            });
            this.formFields = newArray;
        }
    }
    fieldToggle(index) {
        this.formFields = this.formFields.map((f, i) => {
            if (index == i) {
                f.isOpen = !f.isOpen;
            }
            return f;
        });
    }
    fieldRemove(index) {
        this.formFields = this.formFields.filter((_, i) => i !== index);
    }
    fieldRequired(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.required = !field.required;
            }
            return field;
        });
    }
    fieldLabelChange(ind, event) {
        const target = event.detail;
        let fieldCopy = {};
        this.formFields = this.formFields.map((field, i) => {
            if (i === ind) {
                const existingKey = field.key;
                const indexNumber = existingKey.split('_').pop();
                const label = target.value;
                fieldCopy = {
                    ...field,
                    label: label,
                    key: `${field.type}_${label.split(' ').join('-')}_${indexNumber}`,
                };
                return fieldCopy;
            }
            return field;
        });
    }
    fieldOptionAdd(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = [...field.options, ''];
            }
            return field;
        });
    }
    fieldOptionRemove(fieldIndex, index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.filter((_, i) => i !== index);
            }
            return field;
        });
    }
    fieldOptionChange(fieldIndex, index, event) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.map((o, i) => {
                    if (i === index) {
                        o = event.detail.value;
                    }
                    return o;
                });
            }
            return field;
        });
    }
    fieldDefaultValueChanged(index, event) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.default = event.detail.value;
            }
            return field;
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: '4004c0f2c2f7b342fff54e556c65a11d02151d86' }, index$1.h("div", { key: '380fc44efdfb62bf34326fa9a9afe381afb125c0', class: "nylas-booking-form-config", part: "nbfc" }, index$1.h("div", { key: 'bb019f2e7287097b6f460d2f8a74401dc2932529', class: "header", part: "nbfc__header" }, index$1.h("div", { key: '6367eb192c9d44fda1d84620f477ba72d335fcd3', class: "header_text" }, index$1.h("h3", { key: '2517ad6e9a63bf1785cf30de049b9649c51c3c44' }, utils.instance.t('nylasBookingFormConfig.headerTitle')), index$1.h("p", { key: '4edc44df3ed0fca7cf0af3ab3bcbaa4004c77768' }, utils.instance.t('nylasBookingFormConfig.headerSubTitle'))), index$1.h("div", { key: '475aa400b793b1789d67289882ef291507899284', class: "header_action" }, index$1.h("select-dropdown", { key: 'de0f3239ba3881fc9a6bb48117e12c6aefd4a0f0', name: "add-field", exportparts: "sd_dropdown: nbfc__add_field, sd_dropdown-button: nbfc__add_field-button, sd_dropdown-content: nbfc__add_field-dropdown-content", options: constants.DEFAULT_FORM_FIELD_TYPES, withSearch: false, withChevron: false, dropdownButtonText: utils.instance.t('nylasBookingFormConfig.dropdownButtonText') }, index$1.h("span", { key: '083952ce85504ba15ba4d5445bad520b5d27ad44', slot: "select-icon" }, index$1.h("plus-icon", { key: '1d3fe9fe8774ffe544e8398034ea894e6dc612be', width: "15", height: "15" }))))), index$1.h("div", { key: 'b77ba6b9af91acfe48726632696354b37056757b', class: "content" }, index$1.h("div", { key: '893b8a6060e6e9415603a47d339b2f9f1d9b7fae', id: "fields", class: "additional_fields", part: "nbfc__additional_fields" }, this.formFields.map((field, i) => {
            return (index$1.h("div", { class: `form-field draggable ${field.readonly && 'fixed'}`, part: "nbfc__form_field", key: i }, index$1.h("div", { class: "form-field_header", part: "nbfc__form_field-header" }, index$1.h("span", { class: "dragable" }, index$1.h("dragable-icon", { width: "24", height: "25" })), index$1.h("div", { class: "form-field_header_text" }, index$1.h("h4", null, field.label), index$1.h("p", null, field.typeLabel)), index$1.h("div", { class: "form-field_header_actions" }, index$1.h("span", { class: `is-required` }, field.required ? 'Required' : 'Optional'), !field.readonly && (index$1.h("button", { onClick: () => {
                    const title = this.watchFields.title;
                    const description = this.watchFields.description;
                    if (title && title.includes(field.key)) {
                        field.error = 'This field is used in the event title and cannot be removed.';
                        this.formFields = [...this.formFields];
                        setTimeout(() => {
                            field.error = '';
                            this.formFields = [...this.formFields];
                        }, 3000);
                        return;
                    }
                    if (description && description.includes(field.key)) {
                        field.error = 'This field is used in the event description and cannot be removed.';
                        this.formFields = [...this.formFields];
                        setTimeout(() => {
                            field.error = '';
                            this.formFields = [...this.formFields];
                        }, 3000);
                        return;
                    }
                    this.fieldRemove(i);
                } }, index$1.h("close-icon", null))), index$1.h("span", { class: `chevron ${field.isOpen ? 'open' : 'closed'}`, onClick: () => {
                    this.fieldToggle(i);
                } }, index$1.h("chevron-icon", { width: "24", height: "24" })))), index$1.h("span", { class: {
                    'error': true,
                    'fade-out': !field?.error || field.error === '',
                } }, field.error), index$1.h("div", { class: `form-field_content ${!field.isOpen && 'hidden'}`, part: "nbfc__form_field-content" }, index$1.h("div", { class: "inputs" }, index$1.h("input-component", { class: 'label-input', name: `${i}`, key: i, label: "Label", required: false, readOnly: field.readonly, defaultValue: field.label }, index$1.h("div", { class: "required-input", slot: "additional-input" }, index$1.h("input", { type: "checkbox", name: `required_${field.order}`, id: `required_${field.order}`, onClick: () => {
                    this.fieldRequired(i);
                }, checked: field.required, disabled: field.readonly }), index$1.h("label", { htmlFor: `required_${field.order}`, "aria-label": "Required" }, utils.instance.t('required')))), !field.readonly && field.type !== 'date' && (index$1.h("input-component", { class: 'default-value', name: `default-value-${i}`, key: i, label: "Default value", required: false, readOnly: field.readonly, defaultValue: field.default })), !field.readonly && field.type === 'date' && (index$1.h("nylas-date-component", { class: 'default-value', name: `default-value-${i}`, key: i, label: "Default value", required: false, readOnly: field.readonly, defaultValue: field.default }))), field.options != undefined && (index$1.h("div", { class: "options-container" }, index$1.h("h4", null, utils.instance.t('nylasBookingFormConfig.allOptionsHeader')), index$1.h("div", { class: "options" }, field.options.map((o, j) => {
                return (index$1.h("div", { class: "option" }, index$1.h("input-component", { key: j, name: `${i}_${j}`, label: field.typeLabel + ' option ' + (j + 1), required: true, defaultValue: o }, j > 1 && (index$1.h("div", { class: "required-input", slot: "additional-input" }, index$1.h("button", { onClick: () => {
                        this.fieldOptionRemove(i, j);
                    } }, index$1.h("close-icon", null)))))));
            })), index$1.h("button", { onClick: () => {
                    this.fieldOptionAdd(i);
                }, part: "nap__add-time-range" }, index$1.h("add-circle-icon", null), " ", utils.instance.t('nylasBookingFormConfig.addOption')))))));
        }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"],
        "formFields": ["watchHandler"]
    }; }
};
__decorate$q([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-form-config',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata$q("design:type", Function),
    __metadata$q("design:paramtypes", []),
    __metadata$q("design:returntype", void 0)
], NylasBookingFormConfig.prototype, "render", null);
NylasBookingFormConfig.style = NylasBookingFormConfigStyle0;

const nylasBufferTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-buffer-time{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-buffer-time .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-buffer-time .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-buffer-time .header p{display:flex;gap:4px;align-items:center;margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-buffer-time .nylas-buffer-time__body{display:grid;grid-template-columns:1fr auto}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body{grid-template-columns:1fr}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown{padding:1rem;display:flex;flex-direction:column;gap:1rem;border-right:1px solid var(--nylas-base-200);color:var(--nylas-base-800)}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown{border:none}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row{display:grid;grid-template-columns:auto 1fr;align-items:center;gap:1rem}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row label{width:200px}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row .dropdown-container{display:flex;gap:1rem;align-items:center;justify-content:flex-end}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__dropdown .nylas-buffer-time__row .dropdown-container span{width:-webkit-fill-available;width:fill-available;width:-moz-available;text-align:end}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview{width:208px;background:var(--nylas-base-25);border-bottom-right-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview{width:inherit;border-bottom-left-radius:var(--nylas-border-radius-2x)}}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview h4{font-size:14px;line-height:24px;color:var(--nylas-base-600);font-family:var(--nylas-font-family);font-weight:500;text-align:center;margin:0.75rem 0}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container{padding:0 2rem 1rem}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot{background-color:transparent;border-top:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot.active{background-color:var(--nylas-base-100)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .slot:last-of-type{border-bottom:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__body .nylas-buffer-time__preview .preview-container .event-slot{background-color:var(--nylas-base-600);border-top:1px solid var(--nylas-base-300)}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-button){width:104px;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-content){width:100%}.nylas-buffer-time .nylas-buffer-time__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasBufferTimeStyle0 = nylasBufferTimeCss;

var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$p = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBufferTime = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'buffer-time';
        this.buffer = this.selectedConfiguration?.availability?.availability_rules?.buffer ?? { before: 0, after: 0 };
        this.selectedLanguage = undefined;
        this.selectedBeforeBufferTime = this.buffer.before;
        this.selectedAfterBufferTime = this.buffer.after;
        this.componentLoaded = false;
    }
    connectedCallback() {
        utils.debug('nylas-buffer-time', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-buffer-time', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-buffer-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-buffer-time', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedBeforeBufferTime = this.buffer.before;
            this.selectedAfterBufferTime = this.buffer.after;
        }
        this.updateFormValue();
        this.componentLoaded = true;
    }
    componentWillUpdate() {
        utils.debug('nylas-buffer-time', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-buffer-time', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-buffer-time', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-buffer-time', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-buffer-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-buffer-time', 'selectedConfigurationChangedHandler', newValue);
        const buffer = newValue?.availability?.availability_rules?.buffer;
        this.selectedAfterBufferTime = buffer?.after ? buffer.after : this.buffer.after;
        this.selectedBeforeBufferTime = buffer?.before ? buffer.before : this.buffer.before;
        this.updateFormValue();
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-buffer-time', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value, name } = event.detail;
            if (name === 'before-buffer-time') {
                this.selectedBeforeBufferTime = parseInt(value);
            }
            else if (name === 'after-buffer-time') {
                this.selectedAfterBufferTime = parseInt(value);
            }
            this.updateFormValue();
        };
        this.valueChanged.emit({ ...event.detail, valueChanged });
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    updateFormValue() {
        const bufferTime = {
            before: this.selectedBeforeBufferTime,
            after: this.selectedAfterBufferTime,
        };
        this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(bufferTime), this.name);
    }
    renderPreview() {
        const totalSlots = 4;
        const slotHeight = 10;
        const eventSlotHeight = slotHeight * 2;
        const slotFill = minutes => {
            const fullSlots = Math.floor(minutes / 30);
            const partialFillHeight = ((minutes % 30) / 30) * slotHeight;
            return {
                fullSlots,
                partialFillHeight,
            };
        };
        const createBeforeSlots = () => {
            const { fullSlots, partialFillHeight } = slotFill(this.selectedBeforeBufferTime);
            return Array.from({ length: totalSlots }, (_, index) => {
                const isActive = this.selectedBeforeBufferTime > 0 && index > totalSlots - fullSlots - 1;
                const isPartial = this.selectedBeforeBufferTime > 0 && index === totalSlots - fullSlots - 1 && partialFillHeight > 0;
                let slotStyle = {};
                if (isActive && !isPartial) {
                    slotStyle.backgroundColor = 'var(--nylas-base-100)';
                }
                else if (isPartial) {
                    slotStyle.background = `linear-gradient(to top, var(--nylas-base-100) ${partialFillHeight}px, transparent 0)`;
                }
                return (index$1.h("div", { key: index, class: `slot ${isActive ? 'active' : ''}`, style: {
                        height: `${slotHeight}px`,
                        ...slotStyle,
                    } }));
            });
        };
        const createAfterSlots = () => {
            const { fullSlots, partialFillHeight } = slotFill(this.selectedAfterBufferTime);
            return Array.from({ length: totalSlots }, (_, index) => {
                const isActive = this.selectedAfterBufferTime > 0 && index < fullSlots;
                const isPartial = index === fullSlots && partialFillHeight > 0;
                let slotStyle = {};
                if (isActive && !isPartial) {
                    slotStyle.backgroundColor = 'var(--nylas-base-100)';
                }
                else if (isPartial) {
                    slotStyle.background = `linear-gradient(to bottom, var(--nylas-base-100) ${partialFillHeight}px, transparent 0)`;
                }
                return (index$1.h("div", { key: index, class: `slot ${isActive ? 'active' : ''}`, style: {
                        height: `${slotHeight}px`,
                        ...slotStyle,
                    } }));
            });
        };
        return (index$1.h("div", { class: "preview-container" }, createBeforeSlots(), index$1.h("div", { class: "event-slot", style: { height: `${eventSlotHeight}px` } }), createAfterSlots()));
    }
    render() {
        const minuteOptions = Array.from({ length: 25 }, (_, i) => {
            const value = i * 5;
            return {
                label: value.toString(),
                value: value,
            };
        });
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "nylas-buffer-time", part: "nbt" }, index$1.h("div", { class: "header", part: "nbt__header" }, index$1.h("h3", null, utils.instance.t('nylasBufferTime.headerTitle')), index$1.h("p", null, utils.instance.t('nylasBufferTime.headerSubTitle'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasBufferTime.tooltip.desc'))))), index$1.h("div", { class: "nylas-buffer-time__body", part: "nbt__body" }, index$1.h("div", { class: "nylas-buffer-time__dropdown" }, index$1.h("div", { class: "nylas-buffer-time__row" }, index$1.h("label", null, utils.instance.t('nylasBufferTime.beforeBufferLabel')), index$1.h("div", { class: "dropdown-container" }, this.componentLoaded && (index$1.h("select-dropdown", { id: "before-buffer-time", withSearch: false, name: "before-buffer-time", exportparts: "sd_dropdown: nbt__dropdown-before, sd_dropdown-button: nbt__dropdown-button-before, sd_dropdown-content: nbt__dropdown-content-before", options: minuteOptions, defaultSelectedOption: minuteOptions.find(min => min.value == this.selectedBeforeBufferTime) })), index$1.h("span", null, utils.instance.t('nylasBufferTime.minutesShort')))), index$1.h("div", { class: "nylas-buffer-time__row" }, index$1.h("label", null, utils.instance.t('nylasBufferTime.afterBufferLabel')), index$1.h("div", { class: "dropdown-container" }, this.componentLoaded && (index$1.h("select-dropdown", { id: "after-buffer-time", withSearch: false, name: "after-buffer-time", exportparts: "sd_dropdown: nbt__dropdown-after, sd_dropdown-button: nbt__dropdown-button-after, sd_dropdown-content: nbt__dropdown-content-after", options: minuteOptions, defaultSelectedOption: minuteOptions.find(min => min.value == this.selectedAfterBufferTime) })), index$1.h("span", null, utils.instance.t('nylasBufferTime.minutesShort'))))), index$1.h("div", { class: "nylas-buffer-time__preview", part: "nbt__preview" }, index$1.h("h4", null, utils.instance.t('nylasBufferTime.previewHeader')), this.renderPreview())))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$p([
    registerComponent.RegisterComponent({
        name: 'nylas-buffer-time',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$p("design:type", Function),
    __metadata$p("design:paramtypes", []),
    __metadata$p("design:returntype", void 0)
], NylasBufferTime.prototype, "render", null);
NylasBufferTime.style = NylasBufferTimeStyle0;

const nylasCalendarPickerCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-calendar-picker{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-calendar-picker .nylas-calendar-picker__loading{padding-bottom:1rem;display:flex;flex-direction:column;gap:4px}.nylas-calendar-picker .nylas-calendar-picker__loading .label{display:flex;align-items:center;gap:0.5rem;margin:1rem 1rem 0;color:var(--nylas-base-800)}.nylas-calendar-picker .nylas-calendar-picker__loading .label tooltip-component{display:flex}.nylas-calendar-picker .nylas-calendar-picker__loading .loading-button{margin:0 1rem;padding:0;width:inherit;height:48px;color:black;font-size:16px;cursor:not-allowed;display:flex;gap:0.5rem;justify-content:space-between;align-items:center;background:transparent;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-calendar-picker .nylas-calendar-picker__loading .loading-button span{padding:0 1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown{padding:1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown){width:100%;display:flex;flex-direction:column;gap:4px}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-button--error){border:1px solid var(--nylas-error)}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-content){width:100%;max-width:unset}.nylas-calendar-picker .nylas-calendar-picker__dropdown multi-select-dropdown::part(msd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasCalendarPickerStyle0 = nylasCalendarPickerCss;

var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$o = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCalendarPicker = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'calendar';
        this.currentUser = undefined;
        this.calendars = undefined;
        this.defaultSelectedCalendars = [];
        this.selectedLanguage = undefined;
        this.selectedCalendars = [];
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-calendar-picker', 'componentDidLoad');
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.defaultSelectedCalendars.toString(), 'calendar');
            this.valueChanged.emit({ value: this.defaultSelectedCalendars, name: this.name });
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-calendar-picker', 'componentDidRender');
    }
    selectedOptionsChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChangedHandler = (event) => {
            const { value } = event.detail;
            this.selectedCalendars = [...value];
            if (this.selectedCalendars.length === 0) {
                this.error = `Select at least one calendar.`;
                this.internals.setValidity({ customError: true }, `Select at least one calendar.`);
            }
            else {
                this.error = '';
                this.internals.setValidity({});
            }
            this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ ...event.detail, name: this.name, valueChangedHandler });
    }
    render() {
        const calendarOptions = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
                selected: this.defaultSelectedCalendars?.includes(calendar.id) ||
                    (this.defaultSelectedCalendars?.includes('primary') || this.defaultSelectedCalendars?.length === 0
                        ? calendar.id === this.currentUser?.email || calendar.id === this.name.split('participant-')[1]
                        : false),
            };
        }) ?? [];
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "nylas-calendar-picker", part: "ncp" }, calendarOptions.length > 0 ? (index$1.h("div", { class: "nylas-calendar-picker__dropdown" }, index$1.h("multi-select-dropdown", { name: this.name, options: calendarOptions, error: this.error, exportparts: "msd_dropdown: ncp__dropdown, msd_dropdown-button: ncp__dropdown-button, msd_dropdown-content: ncp__dropdown-content" }))) : (index$1.h("div", { class: "nylas-calendar-picker__loading" }, index$1.h("span", { class: "label" }, utils.instance.t('nylasCalendarPicker.calendarPickerLabel'), " ", index$1.h("info-icon", null)), index$1.h("div", { class: "loading-button" }, index$1.h("span", null, utils.instance.t('loading'), "...")))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$o([
    registerComponent.RegisterComponent({
        name: 'nylas-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChangedHandler } = event.detail;
                if (valueChangedHandler) {
                    valueChangedHandler(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$o("design:type", Function),
    __metadata$o("design:paramtypes", []),
    __metadata$o("design:returntype", void 0)
], NylasCalendarPicker.prototype, "render", null);
NylasCalendarPicker.style = NylasCalendarPickerStyle0;

const nylasCancellationPolicyCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-cancellation-policy{display:flex;flex-direction:column;gap:4px}.nylas-cancellation-policy label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-cancellation-policy label span.label-icon{margin-left:4px}.nylas-cancellation-policy label span.label-icon tooltip-component{display:flex}.nylas-cancellation-policy textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-cancellation-policy textarea::-webkit-resizer{display:none}";
const NylasCancellationPolicyStyle0 = nylasCancellationPolicyCss;

var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$n = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancellationPolicy = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.cancellationPolicy = undefined;
        this.name = 'cancelation-policy';
        this.selectedLanguage = undefined;
        this.message = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-cancellation-policy', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.message = newValue?.scheduler?.cancellation_policy || this.cancellationPolicy || '';
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-cancellation-policy', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-cancellation-policy', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-cancellation-policy', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.message = this.cancellationPolicy || '';
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-cancellation-policy', 'disconnectedCallback');
    }
    handleChange(event) {
        const value = utils.sanitize(event.target.value);
        this.message = value;
        this.internals.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    render() {
        return (index$1.h(index$1.Host, { key: '87d0ce1b18be9dcd4551684b061776df84155af3' }, index$1.h("div", { key: '207a8a785ec6ecbd9d023b68668590987da5be0c', class: "nylas-cancellation-policy", part: "ncpolicy" }, index$1.h("label", { key: 'cddb26e4bde49706b3f540952b414bbfe00ec9f3', htmlFor: this.name }, utils.instance.t('nylasCancellationPolicy.cancellationPolicyLabel'), index$1.h("span", { key: 'ac6e2d644273c79a6f061e4f677f74d5bf63e48c', class: "label-icon" }, index$1.h("tooltip-component", { key: '625d7d492507b787b53be8ab9fa215e465dabfaa' }, index$1.h("info-icon", { key: 'e9edbe226fa7cad26358b93e6b932bd0be9ba81a', slot: "tooltip-icon" }), index$1.h("span", { key: 'f0cd5e7eca9f2a7d6b22d70d704acb2f01e3176e', slot: "tooltip-content" }, utils.instance.t('nylasCancellationPolicy.tooltip.desc'))))), index$1.h("textarea", { key: '1331b4e4102f435d6278f5c055880a3caa3b982c', id: this.name, part: "ncpolicy__textarea", name: this.name, value: this.message, maxlength: "250", onInput: e => this.handleChange(e) }))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$n([
    registerComponent.RegisterComponent({
        name: 'nylas-cancellation-policy',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$n("design:type", Function),
    __metadata$n("design:paramtypes", []),
    __metadata$n("design:returntype", void 0)
], NylasCancellationPolicy.prototype, "render", null);
NylasCancellationPolicy.style = NylasCancellationPolicyStyle0;

const nylasConfirmationEmailCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-confirmation-email{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-confirmation-email .header{padding:1rem;display:grid;grid-template-columns:1fr auto;border-bottom:1px solid var(--nylas-base-200)}.nylas-confirmation-email .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-confirmation-email .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-confirmation-email .header .confirmation-email-toggle{display:flex;gap:24px;align-items:center}.nylas-confirmation-email .header .confirmation-email-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-confirmation-email .header .confirmation-email-toggle .chevron:hover,.nylas-confirmation-email .header .confirmation-email-toggle .chevron:active{color:var(--nylas-primary)}.nylas-confirmation-email .header .confirmation-email-toggle .chevron.open{transform:rotate(90deg)}.nylas-confirmation-email .header .confirmation-email-toggle .chevron.closed{transform:rotate(270deg)}.nylas-confirmation-email .header .confirmation-email-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-confirmation-email .header .confirmation-email-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-confirmation-email .nylas-confirmation-email__body{display:grid;grid-template-columns:1fr auto;background-color:var(--nylas-base-25);border-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-confirmation-email .nylas-confirmation-email__body{grid-template-columns:1fr}}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}@media screen and (max-width: 768px){.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section{border:none}}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row{display:grid;grid-template-columns:1fr auto;align-items:center;gap:1rem}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row.full-width-col{grid-template-columns:1fr;border-top:1px solid var(--nylas-base-200);padding-top:1.25rem;margin:0.25rem 0}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row label{display:flex;align-items:center}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row label span.required{color:var(--nylas-error, #cc4841)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row label span.label-icon{margin-left:4px}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row label span.label-icon tooltip-component{display:flex}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row p{margin:0.25rem 0 0 0;font-size:16px;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row .company-logo-container{display:flex;gap:32px;width:100%}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row .company-logo-container .input-container{display:flex;flex-direction:column;flex:1}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row .company-logo-container .company-logo{display:flex;justify-content:center;align-items:center;width:200px;height:100px;border:var(--nylas-base-200) solid 1px;border-radius:var(--nylas-border-radius-2x);overflow:hidden;padding:10px}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row .company-logo-container .company-logo img{max-height:100%;max-width:100%;object-fit:contain;object-position:center}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .nylas-confirmation-email__row span.selected-value{font-weight:500}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .subsection{display:flex;flex-direction:column;gap:1rem}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .subsection h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .subsection .input-container{display:flex;flex-direction:column;gap:0.25rem}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__section .subsection .input-container textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview{width:208px;background:var(--nylas-base-25);border-bottom-right-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview{width:inherit;border-bottom-left-radius:var(--nylas-border-radius-2x)}}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview h4{font-size:14px;line-height:24px;color:var(--nylas-base-600);font-family:var(--nylas-font-family);font-weight:500;text-align:center;margin:0.75rem 0}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview .preview-container{padding:0 2rem 1rem}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview .preview-container .slot{background-color:transparent;border-top:1px solid var(--nylas-base-300)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview .preview-container .slot.active{background-color:var(--nylas-base-100)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview .preview-container .slot:last-of-type{border-bottom:1px solid var(--nylas-base-300)}.nylas-confirmation-email .nylas-confirmation-email__body .nylas-confirmation-email__preview .preview-container .event-slot{background-color:var(--nylas-base-600);border-top:1px solid var(--nylas-base-300)}.nylas-confirmation-email .nylas-confirmation-email__body span.error-message{color:var(--nylas-error)}.nylas-confirmation-email .nylas-confirmation-email__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-confirmation-email .nylas-confirmation-email__summary{padding:0.75rem 1rem;display:grid;grid-template-columns:auto 1fr;column-gap:1rem}.nylas-confirmation-email .nylas-confirmation-email__summary p{margin:0;display:flex;align-items:center;column-gap:4px;font-size:0.875rem;font-weight:400;line-height:21px;color:var(--nylas-base-600);text-align:left}.nylas-confirmation-email .nylas-confirmation-email__summary p span.summary-icon{display:flex;justify-content:center;min-width:20px}toggle-switch{padding-right:8px}";
const NylasConfirmationEmailStyle0 = nylasConfirmationEmailCss;

var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$m = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasConfirmationEmail = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.confirmationEmailTemplate = {};
        this.participants = [];
        this.name = 'confirmation-email-template';
        this.isOpen = false;
        this.selectedLanguage = undefined;
        this.confirmationEmail = undefined;
        this.isConfirmationEmailOpen = this.isOpen;
        this.participantsState = this.participants;
    }
    connectedCallback() {
        utils.debug('nylas-confirmation-email', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-confirmation-email', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-confirmation-email', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-confirmation-email', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.confirmationEmail = this.confirmationEmailTemplate;
            if (!this.confirmationEmail?.show_nylas_branding) {
                this.confirmationEmail = { ...this.confirmationEmail, show_nylas_branding: true };
            }
            this.isConfirmationEmailOpen = this.isOpen;
            this.participantsState = this.participants;
        }
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-confirmation-email', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-confirmation-email', 'selectedConfigurationChangedHandler', newValue);
        this.confirmationEmail = newValue?.scheduler?.email_template || this.confirmationEmailTemplate;
        if (typeof this.confirmationEmail?.show_nylas_branding === 'undefined') {
            this.confirmationEmail = { ...this.confirmationEmail, show_nylas_branding: true };
        }
        this.isConfirmationEmailOpen = !newValue?.event_booking?.reminders?.length;
        this.participantsState = newValue?.participants || this.participants;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        const type = event.detail?.type;
        if (name === 'confirmation-email-title') {
            this.confirmationEmail = { ...this.confirmationEmail, booking_confirmed: { ...(this.confirmationEmail?.booking_confirmed || {}), title: value } };
            this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
            this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
        }
        else if (name === 'confirmation-email-body' && type === 'multi_line_text') {
            this.handleEmailBodyChange(event);
        }
    }
    valueChangedHandler(event) {
        utils.debug('nylas-confirmation-email', 'valueChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'confirmation-email-logo') {
            this.confirmationEmail = { ...this.confirmationEmail, logo: value };
            this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
            if (typeof this.internals.setValidity === 'function' && typeof this.internals.setFormValue === 'function') {
                this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
                this.internals.setValidity({});
            }
        }
    }
    async nylasFormInputImageUrlInvalidHandler(event) {
        const { value, name } = event.detail;
        if (name === 'confirmation-email-logo' && typeof this.internals.setValidity === 'function') {
            this.internals.setValidity({ customError: true }, value || 'Invalid image URL.');
        }
    }
    nyalsFormSwitchToggledHandler(event) {
        utils.debug('nylas-confirmation-email', 'nyalsFormSwitchToggledHandler', event.detail);
        if (event.detail.name === 'confirmation-email-show-branding') {
            this.confirmationEmail = { ...this.confirmationEmail, show_nylas_branding: event.detail.checked };
            this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
            this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
        }
    }
    updateConfirmationFormValue() {
        utils.debug('nylas-confirmation-email', 'updateConfirmationFormValue');
        this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
    }
    toggleConfirmationEmail() {
        this.isConfirmationEmailOpen = !this.isConfirmationEmailOpen;
    }
    handleEmailBodyChange(event) {
        const value = utils.sanitize(event.detail.value);
        this.confirmationEmail = { ...this.confirmationEmail, booking_confirmed: { ...(this.confirmationEmail?.booking_confirmed || {}), body: value } };
        this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
    }
    render() {
        const organizer = this.participantsState.find(p => p.is_organizer);
        const organizerName = organizer?.name || organizer?.email;
        return (index$1.h(index$1.Host, { key: 'f3d6c5e775d26df9e6693f6e2ebb66cbf50afb50' }, index$1.h("div", { key: 'eeb7e06b2fc8a43b137eb8ad0aa23aea7c057050', class: "nylas-confirmation-email", part: "nce" }, index$1.h("div", { key: '4d318a3ee7bfe014c4fe28f4295e706ccdb55c54', class: "header", part: "nce__header" }, index$1.h("div", { key: '3f727906b1c0146922464e8e34c7ef7c87de5def' }, index$1.h("h3", { key: 'e003e19ba7713de2bc4dbd549786d8223d62d25b' }, this.confirmationEmail?.booking_confirmed?.title ||
            utils.instance.t('nylasConfirmationEmail.headerTitle', { organizerName: `${organizerName ? ` with ${organizerName}` : ''}` })), index$1.h("p", { key: 'f6fd1e8a4b80ae811b2b1ea1e265337dfed5c0f1' }, utils.instance.t('nylasConfirmationEmail.headerSubTitle'))), this.isConfirmationEmailOpen ? (index$1.h("div", { class: "confirmation-email-toggle", part: "nce__confirmation-email-toggle--container" }, index$1.h("span", { class: `chevron ${this.isConfirmationEmailOpen ? 'open' : 'closed'} `, onClick: () => this.toggleConfirmationEmail() }, index$1.h("chevron-icon", { width: "24", height: "24" })))) : (index$1.h("button-component", { variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.toggleConfirmationEmail();
            } }, index$1.h("edit-icon", { width: "16", height: "16" }), utils.instance.t('nylasConfirmationEmail.editButtonText')))), this.isConfirmationEmailOpen ? (index$1.h("div", { class: "nylas-confirmation-email__body", part: "nce__body" }, index$1.h("div", { class: "nylas-confirmation-email__section" }, index$1.h("div", { class: "nylas-confirmation-email__row" }, index$1.h("label", null, utils.instance.t('nylasConfirmationEmail.confirmationEmail.label'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, " ", utils.instance.t('nylasConfirmationEmail.confirmationEmail.tooltip.desc'))))), index$1.h("span", { class: "selected-value" }, utils.instance.t('nylasConfirmationEmail.immediatelyUponBooking'))), index$1.h("div", { class: "nylas-confirmation-email__row" }, index$1.h("label", null, utils.instance.t('nylasConfirmationEmail.nylasBranding.label'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasConfirmationEmail.nylasBranding.tooltip.desc'))))), index$1.h("toggle-switch", { exportparts: "ts_label: nce__toggle-label, ts_input: nce_toggle-input, ts_slider: nce_toggle-slider", name: `confirmation-email-show-branding`, checked: this.confirmationEmail?.show_nylas_branding })), index$1.h("div", { class: "nylas-confirmation-email__row" }, index$1.h("div", { class: "subsection" }, index$1.h("div", { class: "input-container" }, index$1.h("label", null, utils.instance.t('nylasConfirmationEmail.companyLogoUrl.label'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasConfirmationEmail.companyLogoUrl.tooltip.desc'))))), this.confirmationEmail && (index$1.h("input-image-url", { name: "confirmation-email-logo", exportparts: "iiu__logo-input-textfield: nce__input-image-url", imageUrl: this.confirmationEmail?.logo ?? '' }))))), index$1.h("div", { class: "nylas-confirmation-email__row full-width-col" }, index$1.h("div", { class: "subsection" }, index$1.h("h3", null, utils.instance.t('nylasConfirmationEmail.emailMessage.header')), index$1.h("div", { class: "input-container" }, index$1.h("label", { htmlFor: "title" }, utils.instance.t('nylasConfirmationEmail.emailMessage.label'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasConfirmationEmail.emailMessage.tooltip.desc'))))), index$1.h("input-component", { name: "confirmation-email-title", maxLength: 60, placeholder: utils.instance.t('nylasConfirmationEmail.headerTitle', { organizerName: `${organizerName ? ` with ${organizerName}` : ''}` }), defaultValue: this.confirmationEmail?.booking_confirmed?.title ?? '' })), index$1.h("div", { class: "input-container" }, index$1.h("textarea-component", { label: utils.instance.t('nylasConfirmationEmail.emailMessage.additionalInfoLabel'), name: "confirmation-email-body", id: "confirmation-email-body", placeholder: utils.instance.t('nylasConfirmationEmail.emailMessage.additionalInfoPlaceholder'), tooltip: utils.instance.t('nylasConfirmationEmail.emailMessage.additionalInfoTooltip'), maxLength: 500, defaultValue: this.confirmationEmail?.booking_confirmed?.body ?? '' }))))))) : (index$1.h("div", { class: "nylas-confirmation-email__summary", part: "nce__summary" }, index$1.h("p", null, index$1.h("span", { class: "summary-icon" }, index$1.h("person-clipboard-icon", null)), utils.instance.t('nylasConfirmationEmail.allHosts')), index$1.h("p", null, index$1.h("span", { class: "summary-icon" }, index$1.h("clock-icon", null)), utils.instance.t('nylasConfirmationEmail.immediatelyUponBooking')))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$m([
    registerComponent.RegisterComponent({
        name: 'nylas-confirmation-email',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$m("design:type", Function),
    __metadata$m("design:paramtypes", []),
    __metadata$m("design:returntype", void 0)
], NylasConfirmationEmail.prototype, "render", null);
NylasConfirmationEmail.style = NylasConfirmationEmailStyle0;

const nylasConnectedCalendarsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-connected-calendars{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-connected-calendars .header{padding:1rem}.nylas-connected-calendars .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-connected-calendars .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-connected-calendars .content .participant-container{padding-top:12px;border-top:1px solid var(--nylas-base-200)}.nylas-connected-calendars .content .participant-container .participant-title{display:flex;justify-content:space-between;align-items:center;padding:4px 16px 16px}.nylas-connected-calendars .content .participant-container .participant-title p{margin:0}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle{display:flex;gap:24px;align-items:center}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron:hover,.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron:active{color:var(--nylas-primary)}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron.open{transform:rotate(90deg)}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron.closed{transform:rotate(270deg)}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-connected-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}nylas-calendar-picker::part(ncp){margin:0;border:none;border-top:1px solid var(--nylas-base-200);border-top-right-radius:0;border-top-left-radius:0}";
const NylasConnectedCalendarsStyle0 = nylasConnectedCalendarsCss;

var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$l = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasConnectedCalendars = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'connected-calendars';
        this.selectedConfiguration = undefined;
        this.participants = this.selectedConfiguration?.participants || [];
        this.calendars = undefined;
        this.participantOptions = undefined;
        this.selectedLanguage = undefined;
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = {};
        this.participantDefaultSelectedCalendars = {};
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-connected-calendars', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    calendarsChangedHandler(newValue) {
        utils.debug('nylas-connected-calendars', 'calendarsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
    }
    participantsChangedHandler(newValue) {
        utils.debug('nylas-connected-calendars', 'participantsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(newValue, this.participantOptions);
    }
    participantOptionsChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'participantOptionsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'selectedConfigurationChangedHandler', newValue);
        const participants = newValue?.participants || this.participants;
        if (participants && participants.length > 0) {
            this.selectedCalendars = this.setParticipants(participants);
            this.participantCalendars = this.getParticipantCalendarOptions(participants, this.participantOptions);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    getParticipantCalendarOptions(addedParticipants, availableParticipantOptions) {
        const organizer = addedParticipants?.find(participant => participant.is_organizer);
        const isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        const participantCalendars = {};
        if (availableParticipantOptions) {
            const participants = addedParticipants?.filter(participant => availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            const remainingParticipants = addedParticipants?.filter(participant => !availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            participants?.forEach(participant => {
                const participantOption = availableParticipantOptions?.find(participantOption => participantOption.email === participant.email);
                if (!participantOption)
                    return;
                this.participantDefaultSelectedCalendars[participant.email] = participant.availability?.calendar_ids || [];
                const calendars = participantOption.calendars ?? [];
                participant.availability?.calendar_ids?.forEach(calendarId => {
                    if (!calendars?.some(calendar => calendar.id === calendarId) && calendarId !== 'primary') {
                        calendars.push({ id: calendarId, name: calendarId });
                    }
                });
                participantCalendars[participant.email] = calendars;
            });
            if (isRoundRobinConfig) {
                remainingParticipants?.forEach(participant => {
                    if (participant?.availability?.calendar_ids && participant?.availability?.calendar_ids?.length > 0 && !participant.is_organizer) {
                        participantCalendars[participant.email] = this.calendars ?? [{ id: 'primary', name: participant.email }];
                        this.participantDefaultSelectedCalendars[participant.email] = participant.availability?.calendar_ids || [];
                    }
                });
            }
        }
        if (organizer) {
            participantCalendars[organizer.email] = this.calendars ?? [{ id: 'primary', name: organizer.email }];
            this.participantDefaultSelectedCalendars[organizer.email] = organizer.availability?.calendar_ids || [];
        }
        return participantCalendars;
    }
    connectedCallback() {
        utils.debug('nylas-connected-calendars', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-connected-calendars', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-connected-calendars', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-connected-calendars', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedCalendars = this.setParticipants(this.selectedConfiguration?.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.selectedConfiguration?.participants, this.participantOptions);
        }
        else {
            this.selectedCalendars = this.setParticipants(this.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
        }
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-')) {
            return;
        }
        if (!this.connectedCalendarsFormRef.checkValidity()) {
            this.internals.setValidity({ customError: true }, 'Please select at least one calendar for each participant.');
            return;
        }
        else {
            this.internals.setValidity({});
        }
        const key = name.split('participant-')[1];
        if (!this.selectedCalendars[key])
            return;
        this.selectedCalendars[key]['calendars'] = value;
        this.selectedCalendars = { ...this.selectedCalendars };
        const participantsCalendars = {};
        Object.keys(this.selectedCalendars).forEach(key => {
            participantsCalendars[key] = this.selectedCalendars[key].calendars;
        });
        this.internals.setFormValue(JSON.stringify(participantsCalendars), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantsCalendars), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            if (participant?.availability?.calendar_ids && participant?.availability?.calendar_ids?.length > 0) {
                const isOpen = participant.is_organizer ? true : false;
                selectedParticipants[participant.email] = {
                    isOpen: isOpen,
                    name: participant.name || participant.email,
                    calendars: participant.availability?.calendar_ids,
                };
            }
        });
        return selectedParticipants;
    }
    render() {
        return (index$1.h(index$1.Host, { key: '126bfccad8bb7c1075afd5238b2380d073faf6e7' }, index$1.h("div", { key: '5e7a584dd488fbda242dd4024b2a8edd466e6b6f', class: "nylas-connected-calendars", part: "nccals" }, index$1.h("div", { key: '21c614517c601a87aa5d380440711ddbcd7e3947', class: "header", part: "nccals__header" }, index$1.h("h3", { key: '0fe17c8d660657ca6f178a342ae8b1c417d817aa' }, utils.instance.t('nylasConnectedCalendars.headerTitle')), index$1.h("p", { key: 'a947256ac12b2d7e492f65acf346ad1f4d983d0b' }, utils.instance.t('nylasConnectedCalendars.headerSubTitle'), index$1.h("tooltip-component", { key: 'd8218310c1c9ac4bd22880ec8ba7bb3cb9734726' }, index$1.h("info-icon", { key: '54e9092754e422d70ff2402083c13dfa15c361d6', slot: "tooltip-icon" }), index$1.h("span", { key: '10f22b96e506ed8589daec5d0e1a0f6e9286c845', slot: "tooltip-content" }, utils.instance.t('nylasConnectedCalendars.tooltip.desc'))))), index$1.h("div", { key: 'f69d6aa2679bda2d27eda4cdb1cf842d06f604f9', class: "content", part: "nccals__content" }, index$1.h("form", { key: '69aaabbc456acb1b04158b4392e8edf8bcd40313', ref: el => (this.connectedCalendarsFormRef = el) }, Object.keys(this.participantCalendars).map((key, index) => {
            const participant = this.selectedCalendars[key];
            const participantCalendars = this.participantCalendars[key];
            if (!participant || !participant.name)
                return;
            return (index$1.h("div", { class: "participant-container", part: "nccals__container", key: `participant-conatiner-${index}` }, index$1.h("div", { class: "participant-title", part: "nccals__title" }, index$1.h("p", null, utils.instance.t('nylasConnectedCalendars.participantCalendarTitle', { participantName: participant.name })), index$1.h("div", { class: "participant-toggle", part: "nccals__toggle-container" }, index$1.h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'}`, onClick: () => {
                    this.selectedCalendars[key].isOpen = !participant.isOpen;
                    this.selectedCalendars = { ...this.selectedCalendars };
                } }, index$1.h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (index$1.h("nylas-calendar-picker", { key: key, name: `participant-${key}`, calendars: participantCalendars, defaultSelectedCalendars: this.participantDefaultSelectedCalendars[key] }))));
        }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "calendars": ["calendarsChangedHandler"],
        "participants": ["participantsChangedHandler"],
        "participantOptions": ["participantOptionsChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$l([
    registerComponent.RegisterComponent({
        name: 'nylas-connected-calendars',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$l("design:type", Function),
    __metadata$l("design:paramtypes", []),
    __metadata$l("design:returntype", void 0)
], NylasConnectedCalendars.prototype, "render", null);
NylasConnectedCalendars.style = NylasConnectedCalendarsStyle0;

const nylasCustomBookingFlowCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-custom-booking-flow__title{color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-custom-booking-flow__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-custom-booking-flow__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-custom-booking-flow__block{display:flex;justify-content:space-between;gap:0.5rem}";
const NylasCustomBookingFlowStyle0 = nylasCustomBookingFlowCss;

var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$k = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCustomBookingFlow = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedLanguage = undefined;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-custom-booking-flow', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-custom-booking-flow', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-custom-booking-flow', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-custom-booking-flow', 'componentDidLoad');
        utils.checkForMissingSlots(['inputs'], this.el);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '58cb7aa5e903ccfb94eec8f736184d0b3c5be870', part: "ncbflow" }, index$1.h("nylas-form-card", { key: '3f20d0782c85e3c2cad19e714fe824903017f6c9', exportparts: "nfc__header: ncbflow__header" }, index$1.h("h1", { key: '0ec0a40d24501a9be682f36c2205aabccaafcbc5', slot: "header-title", class: "nylas-custom-booking-flow__title", part: "ncbflow__title" }, utils.instance.t('nylasCustomBookingFlow.headerTitle')), index$1.h("div", { key: 'cb769c671be867a59e02c82983ef1bea3a4a71bc', slot: "content", class: "nylas-custom-booking-flow__content", part: "ncbflow__content" }, index$1.h("slot", { key: '78d0d4e24c7d3f5c404d2e8af1d0354da965d23c', name: "inputs" })))));
    }
    static get formAssociated() { return true; }
    get el() { return index$1.getElement(this); }
    static get watchers() { return {
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$k([
    registerComponent.RegisterComponent({
        name: 'nylas-custom-booking-flow',
        eventToProps: {},
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        fireRegisterEvent: true,
    }),
    __metadata$k("design:type", Function),
    __metadata$k("design:paramtypes", []),
    __metadata$k("design:returntype", void 0)
], NylasCustomBookingFlow.prototype, "render", null);
NylasCustomBookingFlow.style = NylasCustomBookingFlowStyle0;

const nylasCustomEventSlugCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-custom-event-slug{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-custom-event-slug .header{padding:1rem;display:grid;grid-template-columns:1fr auto}.nylas-custom-event-slug .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-custom-event-slug .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-custom-event-slug .header .drawer-toggle{display:flex;gap:24px;align-items:center}.nylas-custom-event-slug .header .drawer-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-custom-event-slug .header .drawer-toggle .chevron:hover,.nylas-custom-event-slug .header .drawer-toggle .chevron:active{color:var(--nylas-primary)}.nylas-custom-event-slug .header .drawer-toggle .chevron.open{transform:rotate(90deg)}.nylas-custom-event-slug .header .drawer-toggle .chevron.closed{transform:rotate(270deg)}.nylas-custom-event-slug .header .drawer-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-custom-event-slug .header .drawer-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-custom-event-slug .nylas-custom-event-slug__body{display:grid;grid-template-columns:1fr;background-color:var(--nylas-base-25);border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x);border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.nylas-custom-event-slug .nylas-custom-event-slug__body{grid-template-columns:1fr}}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}@media screen and (max-width: 768px){.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section{border:none}}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row{display:flex;align-items:center;gap:1rem}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row label{display:flex;align-items:center}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row label span.required{color:var(--nylas-error, #cc4841)}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row label span.label-icon{margin-left:4px}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row label span.label-icon tooltip-component{display:flex}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row p{margin:0.25rem 0 0 0;font-size:16px;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.nylas-custom-event-slug .nylas-custom-event-slug__body .nylas-custom-event-slug__section .nylas-custom-event-slug__row .input-container{width:100%}.nylas-custom-event-slug .nylas-custom-event-slug__body span.error-message{color:var(--nylas-error)}.nylas-custom-event-slug .nylas-custom-event-slug__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%;width:-moz-available;width:-webkit-fill-available;display:flex;flex-direction:row;gap:0.125rem;border-radius:var(--nylas-border-radius-2x);z-index:1}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper:focus{outline-color:var(--nylas-primary)}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper.error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper.error::placeholder{font-weight:400}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper::placeholder{color:var(--nylas-base-300)}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper.focus{outline:2px solid var(--nylas-primary)}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper.error{border-color:var(--nylas-error);outline:none}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper input-component::part(ic__input){outline:none;border:none;width:100%;font-size:16px;height:auto;padding-left:0px}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .prefix{z-index:0;margin-top:1px;color:var(--nylas-base-400);font-weight:500;font-size:24px}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .icon{margin-right:0.25rem;padding:0 0.75rem;height:100%;display:flex;align-items:center;right:0;cursor:pointer;user-select:none}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .icon.disabled{cursor:not-allowed}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .icon:hover svg path{fill:var(--nylas-primary)}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .icon:active svg path{fill:var(--nylas-base-500)}.nylas-custom-event-slug .nylas-custom-event-slug__input-wrapper .icon .copied{display:flex;align-items:center;font-size:0.875rem;gap:0.125rem}";
const NylasCustomEventSlugStyle0 = nylasCustomEventSlugCss;

var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$j = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCustomEventSlug = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.defaultUrlSlug = undefined;
        this.isOpen = true;
        this.slugErrorMessage = '';
        this.name = 'custom-event-slug';
        this.requiresSlug = false;
        this.selectedLanguage = undefined;
        this.urlSlug = undefined;
        this.focus = false;
        this.copied = false;
    }
    connectedCallback() {
        utils.debug('nylas-custom-event-slug', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-custom-event-slug', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-custom-event-slug', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-custom-event-slug', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            console.log('No selected configuration found');
            this.urlSlug = this.defaultUrlSlug || '';
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-custom-event-slug', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-custom-event-slug', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-custom-event-slug', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-custom-event-slug', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-custom-event-slug', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.urlSlug = newValue?.slug || this.defaultUrlSlug || '';
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        this.internals.setValidity({});
        if (name === 'event-slug') {
            this.urlSlug = value;
            this.internals.setFormValue(JSON.stringify(value), this.name);
            this.valueChanged.emit({ value: JSON.stringify(value), name: this.name });
        }
    }
    async nylasFormInputFocusHandler() {
        this.focus = true;
    }
    async nylasFormInputBlurHandler() {
        this.slugErrorMessage = '';
        this.internals.setValidity({});
        this.focus = false;
        if (this.requiresSlug && this.urlSlug === '') {
            this.internals.setValidity({ customError: true }, 'Slug is required');
            this.slugErrorMessage = 'Slug cannot be blank';
            return;
        }
        if (!/^[A-Za-z0-9_-]*$/.test(this.urlSlug)) {
            this.internals.setValidity({ customError: true }, 'Invalid slug: Only letters, numbers, and hyphens are allowed.');
            this.slugErrorMessage = 'Invalid slug: Only letters, numbers, and hyphens are allowed.';
        }
    }
    formSubmittedHandler(event) {
        utils.debug('nylas-event-title', 'formSubmittedHandler', event);
        this.nylasFormInputBlurHandler();
    }
    toggleDrawer() {
        this.isOpen = !this.isOpen;
    }
    async copyToClipboard() {
        try {
            await navigator.clipboard.writeText(`${this.urlSlug}`);
            this.copied = true;
            setTimeout(() => {
                this.copied = false;
            }, 1000);
        }
        catch (err) {
            console.error('Failed to copy: ', err);
        }
    }
    render() {
        if (!this.requiresSlug)
            return null;
        const isComponentReady = typeof this.urlSlug !== 'undefined';
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "nylas-custom-event-slug", part: "nces" }, index$1.h("div", { class: "header", part: "nces__header" }, index$1.h("div", null, index$1.h("h3", null, utils.instance.t('nylasCustomEventSlug.headerTitle')), index$1.h("p", null, utils.instance.t('nylasCustomEventSlug.headerSubTitle'))), index$1.h("div", { class: "drawer-toggle", part: "nces__drawer-toggle--container" }, index$1.h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleDrawer() }, index$1.h("chevron-icon", { width: "24", height: "24" })))), this.isOpen && (index$1.h("div", { class: "nylas-custom-event-slug__body", part: "nces__body" }, index$1.h("div", { class: "nylas-custom-event-slug__section" }, index$1.h("div", { class: "nylas-custom-event-slug__row" }, index$1.h("div", { class: "input-container" }, index$1.h("label", null, utils.instance.t('nylasCustomEventSlug.eventSlugLabel'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasCustomEventSlug.tooltip.desc'))))), index$1.h("div", { class: { 'nylas-custom-event-slug__input-wrapper': true, 'focus': this.focus, 'error': !!this.slugErrorMessage } }, index$1.h("div", { slot: "prefix", class: "prefix" }, "/"), isComponentReady && (index$1.h("input-component", { name: "event-slug", id: "event-slug", type: "text", required: false, placeholder: "my-link-name", exportparts: "ic_input: nces__input-textfield", defaultValue: this.urlSlug })), index$1.h("div", { slot: "icon", class: { icon: true, disabled: !this.urlSlug }, onClick: () => !this.copied && !!this.urlSlug && this.copyToClipboard() }, this.copied ? (index$1.h("div", { class: "copied" }, index$1.h("checkmark-icon", { width: "12", height: "18" }), " ", utils.instance.t('nylasCustomEventSlug.copied'))) : (index$1.h("copy-icon", { width: "12", height: "18" })))), this.slugErrorMessage && index$1.h("span", { class: "error-message" }, this.slugErrorMessage)))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$j([
    registerComponent.RegisterComponent({
        name: 'nylas-custom-event-slug',
        stateToProps: new Map([
            ['schedulerConfig.requiresSlug', 'requiresSlug'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$j("design:type", Function),
    __metadata$j("design:paramtypes", []),
    __metadata$j("design:returntype", void 0)
], NylasCustomEventSlug.prototype, "render", null);
NylasCustomEventSlug.style = NylasCustomEventSlugStyle0;

const nylasCustomizeBookingSettingsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-customize-booking-settings{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-customize-booking-settings .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-customize-booking-settings .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-customize-booking-settings .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-customize-booking-settings .nylas-customize-booking-settings__settings{display:flex;flex-direction:column;gap:1.5rem;padding:1rem;margin:1rem 0}.nylas-customize-booking-settings .nylas-customize-booking-settings__settings .nylas-customize-booking-settings__settings-div{display:flex;align-items:center;gap:4px}.label{margin-left:32px;font-size:16px;font-weight:400;color:var(--nylas-base-800);line-height:24px}.label .label-contents{margin:0;display:inline-block}@media screen and (max-width: 768px){.label .label-contents{display:block}}.label tooltip-component{display:inline-block}@media screen and (max-width: 768px){tooltip-component#guests::part(tc__content){left:58px}}tooltip-component#reschedule::part(tc__content){left:58px}@media screen and (max-width: 768px){tooltip-component#reschedule::part(tc__content){left:58px}}tooltip-component#cancel::part(tc__content){left:-58px}@media screen and (max-width: 768px){tooltip-component#cancel::part(tc__content){left:58px}}";
const NylasCustomizeBookingSettingsStyle0 = nylasCustomizeBookingSettingsCss;

var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$i = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCustomizeBookingSettings = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.defaultHideAdditionalGuests = this.selectedConfiguration?.scheduler?.hide_additional_guests ?? false;
        this.defaultHideCancellationOptions = this.selectedConfiguration?.scheduler?.hide_cancellation_options ?? false;
        this.defaultHideReschedulingOptions = this.selectedConfiguration?.scheduler?.hide_rescheduling_options ?? false;
        this.name = 'customize-booking-settings';
        this.selectedLanguage = undefined;
        this.allowGuestsToInvite = undefined;
        this.hideCancellationOptions = undefined;
        this.hideReschedulingOptions = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-customize-booking-settings', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-customize-booking-settings', 'selectedConfigurationChangedHandler', newValue);
        this.allowGuestsToInvite = !newValue?.scheduler?.hide_additional_guests;
        this.hideCancellationOptions = newValue?.scheduler?.hide_cancellation_options ?? false;
        this.hideReschedulingOptions = newValue?.scheduler?.hide_rescheduling_options ?? false;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-customize-booking-settings', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-customize-booking-settings', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-customize-booking-settings', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-customize-booking-settings', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.allowGuestsToInvite = !this.defaultHideAdditionalGuests;
            this.hideCancellationOptions = this.defaultHideCancellationOptions;
            this.hideReschedulingOptions = this.defaultHideReschedulingOptions;
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-customize-booking-settings', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-customize-booking-settings', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-customize-booking-settings', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-customize-booking-settings', 'componentDidRender');
    }
    checkboxToggledHandler(event) {
        const { name, checked } = event.detail;
        switch (name) {
            case 'hide_additional_guests':
                this.allowGuestsToInvite = checked;
                break;
            case 'hide_cancellation_options':
                this.hideCancellationOptions = checked;
                break;
            case 'hide_rescheduling_options':
                this.hideReschedulingOptions = checked;
                break;
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                additionalGuestsHidden: !this.allowGuestsToInvite,
                hideCancellationOptions: this.hideCancellationOptions,
                hideReschedulingOptions: this.hideReschedulingOptions,
            }),
            name: this.name,
        });
        this.internals.setFormValue(JSON.stringify({
            additionalGuestsHidden: !this.allowGuestsToInvite,
            hideCancellationOptions: this.hideCancellationOptions,
            hideReschedulingOptions: this.hideReschedulingOptions,
        }), this.name);
    }
    render() {
        const showComponent = typeof this.hideCancellationOptions === 'boolean' && typeof this.hideReschedulingOptions === 'boolean' && typeof this.allowGuestsToInvite === 'boolean';
        return (index$1.h(index$1.Host, { key: '12968fb39e512320aea269d04586f2943f9f4ce7' }, showComponent && (index$1.h("div", { class: "nylas-customize-booking-settings", part: "ncbs" }, index$1.h("div", { class: "header", part: "ncbs__header" }, index$1.h("h3", null, utils.instance.t('nylasCustomizeBookingSettings.headerTitle')), index$1.h("p", null, utils.instance.t('nylasCustomizeBookingSettings.headerSubTitle'))), index$1.h("div", { class: "nylas-customize-booking-settings__settings", part: "ncbs__settings" }, index$1.h("div", { class: "nylas-customize-booking-settings__settings-div", part: "ncbs__settings-div , ncbs__additional_guests" }, index$1.h("checkbox-component", { name: "hide_additional_guests", label: utils.instance.t('nylasCustomizeBookingSettings.allowGuests.label'), checked: this.allowGuestsToInvite }, index$1.h("span", { slot: "label", class: "label" }, index$1.h("p", { class: "label-contents" }, utils.instance.t('nylasCustomizeBookingSettings.allowGuests.label', { interpolation: { escapeValue: false, escape: s => `${s}`, useRawValueToEscape: true } }))))), index$1.h("div", { class: "nylas-customize-booking-settings__settings-div", part: "ncbs__settings-div , ncbs__rescheduling_options" }, index$1.h("checkbox-component", { name: "hide_rescheduling_options", label: "Hide 'Reschedule' option on booking page and emails.", checked: this.hideReschedulingOptions }, index$1.h("span", { slot: "label", class: "label" }, index$1.h("p", { class: "label-contents" }, utils.instance.t('nylasCustomizeBookingSettings.hideReschedule.label')), index$1.h("tooltip-component", { id: "reschedule" }, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasCustomizeBookingSettings.hideReschedule.tooltip.desc')))))), index$1.h("div", { class: "nylas-customize-booking-settings__settings-div", part: "ncbs__settings-div , ncbs__cancellation_options" }, index$1.h("checkbox-component", { name: "hide_cancellation_options", label: "Hide 'Cancel' option on booking page and emails.", checked: this.hideCancellationOptions }, index$1.h("span", { slot: "label", class: "label" }, index$1.h("p", { class: "label-contents" }, utils.instance.t('nylasCustomizeBookingSettings.hideCancel.label')), index$1.h("tooltip-component", { id: "cancel" }, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasCustomizeBookingSettings.hideCancel.tooltip.desc')))))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$i([
    registerComponent.RegisterComponent({
        name: 'nylas-customize-booking-settings',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata$i("design:type", Function),
    __metadata$i("design:paramtypes", []),
    __metadata$i("design:returntype", void 0)
], NylasCustomizeBookingSettings.prototype, "render", null);
NylasCustomizeBookingSettings.style = NylasCustomizeBookingSettingsStyle0;

const nylasEventDescriptionCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-description{display:flex;flex-direction:column;gap:4px;position:relative}.nylas-event-description label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-description label span.label-icon{margin-left:4px}.nylas-event-description label span.label-icon tooltip-component{display:flex}.nylas-event-description textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-event-description textarea::-webkit-resizer{display:none}.nylas-event-description div.event-description{padding:12px 16px;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);white-space:nowrap;scrollbar-width:thin;min-height:50px;overflow-y:auto;white-space:pre-wrap;line-height:1.5;}.nylas-event-description div.event-description::-webkit-scrollbar{width:6px;height:6px}.nylas-event-description div.event-description.error{border-color:var(--nylas-error);border-width:2px;outline:none}.nylas-event-description span.help-text{display:inline-block;gap:4px;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:21px;position:relative}.nylas-event-description span.help-text span.label-icon{display:inline-block}.nylas-event-description span.help-text span.label-icon tooltip-component::part(tc__container){position:unset}.nylas-event-description span.help-text span.label-icon tooltip-component::part(tc__content){position:absolute;top:4px;left:50%;transform:translateX(-50%)}.nylas-event-description .highlighted-tag{background-color:var(--nylas-base-200);border-radius:var(--nylas-border-radius);padding:2px 5px;margin-left:4px;margin-bottom:4px;display:inline-block;vertical-align:baseline}.nylas-event-description .token-options{display:block;background-color:var(--nylas-base-0);width:100%;max-height:336px;margin-top:28px;overflow:auto;z-index:1;border-radius:4px;position:absolute;bottom:108px;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.0509803922);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1019607843)}@media screen and (max-width: 768px){.nylas-event-description .token-options{right:0;width:325px;max-width:unset}}.nylas-event-description .token-options ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px;margin:0}.nylas-event-description .token-options ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.nylas-event-description .token-options ul li .token-label{display:flex;flex-direction:column;font-weight:400}.nylas-event-description .token-options ul li .token-label .token{color:var(--nylas-abse-900);font-size:16px;line-height:24px}.nylas-event-description .token-options ul li .token-label .description{color:var(--nylas-base-600);font-size:14px;line-height:21px}.nylas-event-description .token-options ul li:hover,.nylas-event-description .token-options ul li:focus,.nylas-event-description .token-options ul li:active,.nylas-event-description .token-options ul li.active{background-color:var(--nylas-base-100)}.nylas-event-description .token-options ul li:hover .token-label .token,.nylas-event-description .token-options ul li:focus .token-label .token,.nylas-event-description .token-options ul li:active .token-label .token,.nylas-event-description .token-options ul li.active .token-label .token{color:var(--nylas-primary)}.nylas-event-description .token-options .selected{background-color:var(--nylas-base-100)}";
const NylasEventDescriptionStyle0 = nylasEventDescriptionCss;

var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$h = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDescription = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventDescription = this.selectedConfiguration?.event_booking?.description;
        this.name = 'description';
        this.selectedLanguage = undefined;
        this.description = this.eventDescription || this.selectedConfiguration?.event_booking?.description || '';
        this.showTokens = false;
        this.availableTokens = constants.EVENT_TITLE_TOKENS.map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = this.availableTokens;
        this.ariaActivedescendant = '';
        this.currentWord = { $value: '', fullText: '', index: -1, focusOffset: -1 };
        this.validationError = '';
        this.additionalFieldTokens = [];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-description', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const description = newValue?.event_booking?.description || '';
        const additionalFields = newValue?.scheduler?.additional_fields || {};
        const newKeys = Object.keys(additionalFields) || [];
        const newTokens = newKeys.map(key => {
            return {
                token: `\$${key}`,
                value: `\${${key}}`,
                description: additionalFields[key].label || '',
            };
        });
        this.additionalFieldTokens = [...newTokens];
        this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = [...this.availableTokens];
        this.description = description;
        if (description) {
            this.updateEventDescriptionFromProp(description);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-description', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-description', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-description', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.description = this.eventDescription || '';
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-event-description', 'disconnectedCallback');
    }
    valueChangedHandler(event) {
        const { name, value } = event.detail;
        const additionalFields = value || {};
        if (name === 'additional-fields') {
            const newKeys = Object.keys(additionalFields) || [];
            const newTokens = newKeys.map(key => {
                return {
                    token: `\$${key}`,
                    value: `\${${key}}`,
                    description: additionalFields[key].label || '',
                };
            });
            this.additionalFieldTokens = [...newTokens];
            this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
                label: token.token,
                value: token.value,
                labelHTML: token,
            }));
            this.filteredTokens = [...this.availableTokens];
        }
    }
    updateEventDescriptionFromProp(newValue) {
        utils.debug('nylas-event-description', 'updateEventDescriptionFromProp', newValue);
        const description = newValue || this.description;
        if (this.descriptionRef) {
            this.descriptionRef.innerHTML = this.highlightTokens(description);
        }
    }
    highlightTokens(description) {
        let outputHtml = description;
        [...constants.EVENT_TITLE_TOKENS, ...this.additionalFieldTokens].forEach(tokenObj => {
            const token = tokenObj.value;
            const regex = new RegExp(`(\\${token})(?!\\w)`, 'g');
            outputHtml = outputHtml?.replace(regex, '<span class="highlighted-tag">$1</span>') || '';
        });
        return outputHtml;
    }
    getCurrentSelectionForBrowser() {
        const getSelectionTextData = (nodeValue, offset, node, allSelected) => {
            const text = nodeValue.replace(/[\u200B-\u200D\uFEFF]/g, '');
            const dollarIndex = text.lastIndexOf('$');
            const lastWord = text.substring(dollarIndex).split(' ')[0];
            return {
                focusOffset: offset,
                dollarIndex,
                lastWord,
                currentText: text,
                node,
                allSelected,
            };
        };
        const isAllSelected = (selection) => selection.anchorOffset === 0 && selection.focusOffset === selection.focusNode?.nodeValue?.length;
        const currentBrowser = utils.getBrowser();
        switch (currentBrowser) {
            case 'Chrome':
                const shadowRootSelection = this.host.shadowRoot?.getSelection();
                const focusNode = shadowRootSelection?.focusNode;
                const focusNodeValue = focusNode?.nodeValue || '';
                const allSelected = shadowRootSelection && isAllSelected(shadowRootSelection);
                return getSelectionTextData(focusNodeValue, shadowRootSelection?.focusOffset || -1, focusNode, allSelected);
            case 'Firefox':
                const selection = document.getSelection();
                const anchorNodeValue = selection?.anchorNode?.nodeValue || '';
                const allSelectedFirefox = selection && isAllSelected(selection);
                return getSelectionTextData(anchorNodeValue, selection?.focusOffset || -1, selection?.anchorNode, allSelectedFirefox);
            case 'Safari':
                const windowSelection = window.getSelection();
                const anchorNode = windowSelection?.getComposedRanges(this.host.shadowRoot)[0];
                const currentText = anchorNode?.startContainer?.nodeValue || '';
                const allSelectedSafari = windowSelection && isAllSelected(windowSelection);
                return getSelectionTextData(currentText, anchorNode?.endOffset || -1, anchorNode?.startContainer, allSelectedSafari);
            default:
                console.warn('Browser not supported');
                return null;
        }
    }
    handleChange(event) {
        let textContent = event.target.textContent || '';
        textContent = utils.sanitize(textContent);
        const currentSelection = this.getCurrentSelectionForBrowser();
        if (!currentSelection) {
            this.updateEventDescription(textContent);
            this.resetDropdown();
            return;
        }
        const { focusOffset, dollarIndex, lastWord, currentText } = currentSelection;
        if (dollarIndex === -1 || focusOffset < dollarIndex) {
            this.updateEventDescription(textContent);
            this.resetDropdown();
            return;
        }
        if (lastWord.startsWith('$')) {
            this.showTokens = true;
            this.currentWord = {
                $value: lastWord,
                fullText: currentText,
                index: dollarIndex,
                focusOffset,
            };
            this.populateSuggestionsDropdown(lastWord);
        }
        else {
            this.resetDropdown();
        }
        this.updateEventDescription(textContent);
    }
    handleInputKeyDown(event) {
        const selection = this.getCurrentSelectionForBrowser();
        if (selection?.allSelected && !utils.isNonPrintableKey(event)) {
            this.descriptionRef.innerHTML = '';
        }
        if (event.key === 'Enter') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                activeOption.click();
                this.ariaActivedescendant = '';
            }
        }
        else if (event.key === 'ArrowDown') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const nextOption = activeOption.nextElementSibling;
                if (nextOption) {
                    this.ariaActivedescendant = nextOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[0].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[0].label;
            }
        }
        else if (event.key === 'ArrowUp') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const prevOption = activeOption.previousElementSibling;
                if (prevOption) {
                    this.ariaActivedescendant = prevOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
            }
        }
        else if (event.key === 'Escape') {
            event.preventDefault();
            this.resetDropdown();
        }
        else if (event.key === 'Backspace' || event.key === 'Delete') {
            const parentNode = selection?.node?.parentNode;
            if (selection?.currentText.startsWith('${') && parentNode && parentNode.nodeName === 'SPAN') {
                event.preventDefault();
                parentNode.removeChild(selection.node);
                parentNode.remove();
                this.resetDropdown();
            }
            if (this.descriptionRef.textContent === '' || selection?.allSelected) {
                this.descriptionRef.innerHTML = '';
                this.updateEventDescription('');
            }
        }
    }
    selectOption(e, option) {
        e.preventDefault();
        const word = this.currentWord.fullText;
        const dollarWord = this.currentWord.$value;
        let currentNode = this.descriptionRef.firstChild;
        let textNode = null;
        while (currentNode) {
            if (currentNode.nodeType === 3) {
                const currentNodeText = currentNode.textContent?.replace(/[\u200B-\u200D\uFEFF]/g, '') || '';
                const wordText = word.replace(/[\u200B-\u200D\uFEFF]/g, '');
                if (currentNodeText.includes(wordText)) {
                    textNode = currentNode;
                    break;
                }
            }
            currentNode = currentNode.nextSibling;
        }
        if (!textNode) {
            return;
        }
        const text = textNode.textContent || '';
        const index = text.indexOf(dollarWord);
        const textBefore = text.substring(0, index);
        const textAfter = text.substring(index + dollarWord.length);
        const newTextNode = document.createTextNode(textBefore);
        const newRange = document.createRange();
        const tagSpan = document.createElement('span');
        tagSpan.classList.add('highlighted-tag');
        tagSpan.textContent = `${option.value}`;
        const newTextNodeAfter = document.createTextNode(textAfter);
        if (textAfter !== '') {
            textNode.replaceWith(newTextNode, tagSpan, newTextNodeAfter);
            newRange.setStart(newTextNodeAfter, 1);
        }
        else {
            const afterNode = document.createTextNode('\u200B');
            textNode.replaceWith(newTextNode, tagSpan, afterNode);
            newRange.setStart(afterNode, 1);
        }
        this.resetDropdown();
        this.descriptionRef.focus();
        const sel = window.getSelection();
        newRange.collapse(true);
        sel?.removeAllRanges();
        sel?.addRange(newRange);
        this.updateEventDescription(this.descriptionRef.textContent || '');
    }
    populateSuggestionsDropdown(query = '') {
        this.filteredTokens = this.availableTokens.filter(obj => {
            return obj.label.startsWith(query.toString()) || obj.value.startsWith(query.toString());
        });
        if (this.filteredTokens.length > 0) {
            this.ariaActivedescendant = this.filteredTokens[0].label;
        }
    }
    get isInternalsAvailable() {
        return typeof this.internals !== 'undefined' && typeof this.internals.setValidity === 'function' && typeof this.internals.setFormValue === 'function';
    }
    updateEventDescription(text) {
        const value = text.replace(/ +/g, ' ');
        this.isInternalsAvailable && this.internals?.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    resetDropdown() {
        this.showTokens = false;
        this.ariaActivedescendant = '';
    }
    getLabelHTML(token) {
        return (index$1.h("div", { class: "token-label" }, index$1.h("span", { class: "token" }, token.token), index$1.h("span", { class: "description" }, token.description)));
    }
    render() {
        return (index$1.h(index$1.Host, { key: '8b4913f5335b683eb20c2dcad08e6bf7d51fbfc7' }, index$1.h("div", { key: '3500070d6310d91ff27d2dd27b1a404e55f302bf', class: "nylas-event-description", part: "nedesc" }, index$1.h("label", { key: '9e4adbd5e0e89f3b09d65aefcb2b25f917760c91', htmlFor: "description" }, utils.instance.t('nylasEventDescription.headerTitle'), index$1.h("span", { key: '671f9cb5866a6fa6ee5d290abfeee2aab063b404', class: "label-icon" }, index$1.h("tooltip-component", { key: 'e931671a86e9286bb7a65deab016d502b0caf05a' }, index$1.h("info-icon", { key: 'f7f7745e60afd89122ed623a26a6a83bb62a3452', slot: "tooltip-icon" }), index$1.h("span", { key: '0ae1140d554c5d9c2d080dab390c393d60f968e8', slot: "tooltip-content" }, utils.instance.t('nylasEventDescription.tooltip.desc'))))), index$1.h("div", { key: '8a696082ddf7d0a02ae321aa4bf9bff4257fb175', id: "event-description", class: { 'event-description': true }, part: "nedesc__textarea", contentEditable: "true", onInput: e => this.handleChange(e), onKeyDown: event => this.handleInputKeyDown(event), ref: el => (this.descriptionRef = el) }), this.showTokens && this.filteredTokens?.length > 0 && (index$1.h("div", { class: "token-options", part: "nedesc__dropdown-content" }, index$1.h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant }, this.filteredTokens.map(option => (index$1.h("li", { tabindex: "0", key: option.label, id: option.label, class: { active: this.ariaActivedescendant === option.label }, onClick: e => this.selectOption(e, option), role: "option" }, this.getLabelHTML(option.labelHTML))))))), index$1.h("span", { key: '7e7b0ccdcd51db7cde89ef9f5bf3c202d62f1ac3', class: "help-text" }, utils.instance.t('nylasEventTitle.helpText', { context: 'start', field: utils.instance.t('nylasEventTitle.description') }), " ", index$1.h("code", { key: '5e9b9b6f5ad50aa3cb78a9bec621db7ad3878758' }, "$"), ' ', utils.instance.t('nylasEventTitle.helpText', { context: 'end' }), index$1.h("span", { key: 'abe23b6835fe9d0f7aef9a81897809669163a2a5', class: "label-icon" }, index$1.h("tooltip-component", { key: 'fc1297d3839f01f478e85c2ce0eeb5bf22b9b6eb' }, index$1.h("info-icon", { key: '8e8fa87ac1060ec2f6a7fb656bc9d22908450299', slot: "tooltip-icon" }), index$1.h("span", { key: 'c37ffca9c75e862a486c5f6e9a553dd94546ad9f', slot: "tooltip-content" }, utils.instance.t('nylasEventTitle.tooltip.desc'), " ", index$1.h("code", { key: '85835b17c04e36bfea09b0343f05fdae28104eb8' }, '${invitee}'))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$h([
    registerComponent.RegisterComponent({
        name: 'nylas-event-description',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$h("design:type", Function),
    __metadata$h("design:paramtypes", []),
    __metadata$h("design:returntype", void 0)
], NylasEventDescription.prototype, "render", null);
NylasEventDescription.style = NylasEventDescriptionStyle0;

const nylasEventDurationCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-duration{display:flex;flex-direction:column;gap:4px}.nylas-event-duration label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-duration label span.required{color:var(--nylas-error, #cc4841)}.nylas-event-duration label span.label-icon{margin-left:4px}.nylas-event-duration label span.label-icon tooltip-component{display:flex}.nylas-event-duration__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-event-duration__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-event-duration__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-event-duration__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:200px}.nylas-event-duration__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-event-duration__wrapper select-dropdown{width:100%}}.nylas-event-duration__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";
const NylasEventDurationStyle0 = nylasEventDurationCss;

var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$g = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDuration = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'duration';
        this.eventDurationMinutes = undefined;
        this.selectedLanguage = undefined;
        this.duration = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = undefined;
        this.durationIncrement = undefined;
        this.durationMinutesOptions = [
            { value: 15, label: '15' },
            { value: 30, label: '30' },
            { value: 45, label: '45' },
            { value: 60, label: '60' },
        ];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-duration', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const configDuration = newVal?.availability?.duration_minutes;
        if (configDuration) {
            this.duration = configDuration >= 60 ? configDuration / 60 : configDuration;
            this.durationMinutes = configDuration ? configDuration : 30;
            this.durationIncrement = configDuration >= 60 ? 60 : 1;
        }
    }
    durationMinutesChangedHandler(newValue, oldValue) {
        utils.debug('nylas-event-duration', 'durationMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-duration', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-duration', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-duration', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        this.duration = this.duration ? this.duration : this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = this.durationMinutes ? this.durationMinutes : this.duration ? this.duration : 30;
        this.durationIncrement = this.durationIncrement ? this.durationIncrement : this.duration >= 60 ? 60 : 1;
        this.setDurationMintueOptions();
        this.isInternalsAvailable && this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    disconnectedCallback() {
        utils.debug('nylas-event-duration', 'disconnectedCallback');
    }
    get isInternalsAvailable() {
        return typeof this.internals !== 'undefined' && typeof this.internals.setFormValue === 'function';
    }
    setDurationMintueOptions() {
        if (this.durationIncrement === 1) {
            this.durationMinutesOptions = [
                { value: 15, label: '15' },
                { value: 30, label: '30' },
                { value: 45, label: '45' },
                { value: 60, label: '60' },
            ];
        }
        else {
            this.durationMinutesOptions = Array.from({ length: 23 }, (_, i) => ({ value: i + 1, label: (i + 1).toString() }));
        }
        return this.durationMinutesOptions;
    }
    handleChange(event) {
        this.duration = event.target.value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.isInternalsAvailable && this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.durationIncrement = parseInt(value);
        if (this.durationIncrement === 1) {
            this.duration = 60;
        }
        else {
            this.duration = 1;
        }
        this.setDurationMintueOptions();
        this.durationMinutes = this.duration * this.durationIncrement;
        this.isInternalsAvailable && this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    inputOptionChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.duration = value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.isInternalsAvailable && this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    render() {
        const durationOptions = [
            { value: 1, label: utils.instance.t('timeDuration', { context: 'minute' }) },
            { value: 60, label: utils.instance.t('timeDuration', { context: 'hour' }) },
        ];
        return (index$1.h(index$1.Host, { key: '4d4abb5d962a2997a9bfc9837d8afc564f7e3ef7' }, index$1.h("div", { key: '794e1476f644152cd5fb382e75ea277b6cf42c59', class: "nylas-event-duration", part: "ned" }, index$1.h("label", { key: '8623f4570bf92e4f606c5ac624f197a26216f66c', htmlFor: "duration" }, utils.instance.t('nylasEventDuration.headerTitle'), index$1.h("span", { key: 'aaaaf86dcffd338964736ae513512eacfcd166ec', class: "required" }, "*")), index$1.h("div", { key: '55bfb48285ea8872a129daecacb067c448122d7b', class: "nylas-event-duration__wrapper" }, index$1.h("input-dropdown", { key: '8dadaa1e245cd1623ecf45ec11a0b8fe4eac1e41', name: 'event-duration', options: this.durationMinutesOptions, inputValue: this.duration.toString(), exportparts: "id_dropdown: ned__input_dropdown, id_dropdown-input: ned__input_dropdown-input, id_dropdown-content: ned__input_dropdown-content", defaultInputOption: this.durationMinutesOptions.find(i => i.value == this.duration) }), this.durationIncrement && (index$1.h("select-dropdown", { name: 'event-duration', options: durationOptions, pluralizedLabel: this.duration > 1 ? 's' : '', exportparts: "sd_dropdown: ned__dropdown, sd_dropdown-button: ned__dropdown-button, sd_dropdown-content: ned__dropdown-content", defaultSelectedOption: durationOptions.find(i => i.value == this.durationIncrement), withSearch: false }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "durationMinutes": ["durationMinutesChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$g([
    registerComponent.RegisterComponent({
        name: 'nylas-event-duration',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$g("design:type", Function),
    __metadata$g("design:paramtypes", []),
    __metadata$g("design:returntype", void 0)
], NylasEventDuration.prototype, "render", null);
NylasEventDuration.style = NylasEventDurationStyle0;

const nylasEventInfoCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-info__title{color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-event-info__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-event-info__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-event-info__block{display:flex;justify-content:space-between;gap:0.5rem}";
const NylasEventInfoStyle0 = nylasEventInfoCss;

var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$f = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventInfo = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedLanguage = undefined;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-info', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-info', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-event-info', 'componentDidLoad');
        utils.checkForMissingSlots(['inputs'], this.el);
    }
    disconnectedCallback() {
        utils.debug('nylas-event-info', 'disconnectedCallback');
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'bc38653b8c5e4073e489128f0a7311b6796ea08c' }, index$1.h("nylas-form-card", { key: 'eb8c3f03b81873f7073526c227f3fb65e3ff5def', exportparts: "nfc__header: nei__header" }, index$1.h("h1", { key: '18636006ebde96ee874bc0f4f6200b2c30985371', slot: "header-title", class: "nylas-event-info__title", part: "nei__title" }, utils.instance.t('nylasEventInfo.headerTitle')), index$1.h("div", { key: '150b7b72eb936c1e50cf9053224939dbe7fb893f', slot: "content", class: "nylas-event-info__content" }, index$1.h("slot", { key: '93b7b7b333009214666dd6e10612cd8a4e11292a', name: "inputs" })))));
    }
    static get formAssociated() { return true; }
    get el() { return index$1.getElement(this); }
    static get watchers() { return {
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$f([
    registerComponent.RegisterComponent({
        name: 'nylas-event-info',
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$f("design:type", Function),
    __metadata$f("design:paramtypes", []),
    __metadata$f("design:returntype", void 0)
], NylasEventInfo.prototype, "render", null);
NylasEventInfo.style = NylasEventInfoStyle0;

const nylasEventLimitsCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-limits__title{color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-event-limits__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-event-limits__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-event-limits__block{display:flex;justify-content:space-between;gap:0.5rem}";
const NylasEventLimitsStyle0 = nylasEventLimitsCss;

var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$e = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventLimits = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedLanguage = undefined;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-limits', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-limits', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-event-limits', 'componentDidLoad');
        utils.checkForMissingSlots(['inputs'], this.el);
    }
    disconnectedCallback() {
        utils.debug('nylas-event-limits', 'disconnectedCallback');
    }
    render() {
        return (index$1.h(index$1.Host, { key: '93516fbfa45ce2eb8d5547d220c340e7805135ec' }, index$1.h("nylas-form-card", { key: 'ddbe78badd581cac4d92adea6aa3a391149cce46', exportparts: "nfc__header: nel__header" }, index$1.h("h1", { key: '4be5660d2d31f98f64dfeea7f64c0d4f50469ab4', slot: "header-title", class: "nylas-event-limits__title" }, utils.instance.t('nylasEventLimits.headerTitle')), index$1.h("div", { key: 'c044112ad30d6bb8965e68e13617466665d4e368', slot: "content", class: "nylas-event-limits__content" }, index$1.h("slot", { key: '9ce9fd30ee452a3812f9483e44922a986504cf4a', name: "inputs" })))));
    }
    static get formAssociated() { return true; }
    get el() { return index$1.getElement(this); }
    static get watchers() { return {
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$e([
    registerComponent.RegisterComponent({
        name: 'nylas-event-limits',
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$e("design:type", Function),
    __metadata$e("design:paramtypes", []),
    __metadata$e("design:returntype", void 0)
], NylasEventLimits.prototype, "render", null);
NylasEventLimits.style = NylasEventLimitsStyle0;

const nylasEventLocationCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-location{display:flex;flex-direction:column;gap:4px;font-family:var(--nylas-font-family)}.nylas-event-location label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-location label span.label-icon{margin-left:4px}.nylas-event-location label span.label-icon tooltip-component{display:flex}.nylas-event-location span[slot=select-icon]{border-right:1px solid var(--nylas-base-200);padding:16px 0.75rem 16px 0.5rem;border-radius:var(--nylas-border-radius-2x);border-bottom-right-radius:0;border-top-right-radius:0;height:20px}.nylas-event-location div.location-input{display:grid;grid-template-columns:auto 1fr;width:100%;gap:0.5rem}@media screen and (max-width: 768px){.nylas-event-location div.location-input{grid-template-columns:1fr}}.nylas-event-location div.location-input input{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:12px 16px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-event-location select-dropdown{width:208px}@media screen and (max-width: 768px){.nylas-event-location select-dropdown{width:100%}}.nylas-event-location select-dropdown::part(sd_dropdown){width:100%}.nylas-event-location select-dropdown::part(sd_dropdown-content){left:calc(35px + 0.5rem)}.nylas-event-location select-dropdown::part(sd_dropdown-button){display:flex;justify-content:space-between;width:100%;border:1px solid var(--nylas-base-200);padding:0 0.5rem}.nylas-event-location select-dropdown::part(sd_dropdown-button-selected-label){display:inline-flex;align-self:center;padding:14px 0;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasEventLocationStyle0 = nylasEventLocationCss;

var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$d = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const labels = {
    none: 'None',
    custom: 'Custom location',
    google: 'Google Meet',
    microsoft: 'Microsoft Teams',
    zoom: 'Zoom Meeting',
};
const NylasEventLocation = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'location';
        this.currentUser = undefined;
        this.userProvider = undefined;
        this.eventConferencing = undefined;
        this.conferenceProviders = undefined;
        this.selectedConfiguration = undefined;
        this.eventLocation = undefined;
        this.selectedLanguage = undefined;
        this.location = this.eventLocation ?? '';
        this.grantId = this.eventConferencing ? this.setDefaultGrantID(this.eventConferencing) : '';
        this.selectedLocationOption = undefined;
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.locationOptions = [
            { value: 'none', label: labels['none'], labelHTML: this.getLabelHTML('none') },
            { value: 'custom', label: labels['custom'], labelHTML: this.getLabelHTML('custom') },
        ];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-location', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const configLocation = newValue?.event_booking?.location;
        const configConferencing = newValue?.event_booking?.conferencing;
        if (configConferencing?.provider) {
            this.selectedLocationOption = this.setDefaultLocationOption(configConferencing, configLocation ?? '');
            this.grantId = this.setDefaultGrantID(configConferencing);
            this.location = configLocation ? configLocation : '';
        }
        else if (configLocation) {
            this.selectedLocationOption = configLocation ? 'custom' : 'none';
            this.location = configLocation;
        }
        else {
            this.selectedLocationOption = 'none';
            this.location = '';
        }
    }
    currentUserChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'currentUserChangedHandler', newValue);
        if (newValue?.provider) {
            this.userProviderState = newValue?.provider;
            this.setLocationOptionsForProvider(this.userProviderState);
        }
    }
    conferenceProvidersChanged(newValue) {
        if (newValue?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-location', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-location', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-location', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedLocationOption = this.setDefaultLocationOption(this.eventConferencing || null, this.eventLocation ?? '');
        }
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.setLocationOptionsForProvider(this.userProviderState);
        if (this.conferenceProviders?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-event-location', 'disconnectedCallback');
    }
    nylasFormDropdownChangedHandler(event) {
        this.selectedLocationOption = event.detail.value;
        let payload;
        switch (this.selectedLocationOption) {
            case 'none':
                this.location = '';
                this.setFormValue('', this.name);
                this.valueChanged.emit({ value: '', name: this.name });
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'custom':
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'google':
                this.location = '';
                this.setFormValue('', this.name);
                const googleConfGrantId = this.conferenceProviders?.['google'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.google,
                    autocreate: googleConfGrantId
                        ? {
                            conf_grant_id: googleConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'microsoft':
                this.location = '';
                this.setFormValue('', this.name);
                const microsoftConfGrantId = this.conferenceProviders?.['microsoft'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.microsoft,
                    autocreate: microsoftConfGrantId
                        ? {
                            conf_grant_id: microsoftConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'zoom':
                this.location = '';
                this.setFormValue('', this.name);
                const zoomConfGrantId = this.conferenceProviders?.['zoom'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.zoom,
                    autocreate: zoomConfGrantId
                        ? {
                            conf_grant_id: zoomConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
        }
    }
    setLocationOptionsForProvider(provider) {
        switch (provider) {
            case 'google':
                if (!this.locationOptions.some(option => option.value === 'google')) {
                    this.locationOptions.push({ value: 'google', label: labels['google'], labelHTML: this.getLabelHTML('google') });
                }
                break;
            case 'microsoft':
                if (!this.locationOptions.some(option => option.value === 'microsoft')) {
                    this.locationOptions.push({ value: 'microsoft', label: labels['microsoft'], labelHTML: this.getLabelHTML('microsoft') });
                }
                break;
        }
    }
    setDefaultLocationOption(eventConferencing, eventLocation) {
        if (eventConferencing != null && eventConferencing?.provider != null && eventConferencing?.autocreate != null) {
            return constants.CONFERENCE_PROVIDER_MAP[eventConferencing?.provider];
        }
        return eventLocation ? 'custom' : 'none';
    }
    setDefaultGrantID(eventConferencing) {
        if (eventConferencing != null && eventConferencing?.autocreate != null) {
            return eventConferencing?.autocreate?.conf_grant_id;
        }
        return '';
    }
    setFormValue(value, name) {
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(value, name);
        }
    }
    handleChange(event) {
        const value = utils.sanitize(event.target.value);
        this.location = value;
        this.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    getIcon(location) {
        switch (location) {
            case 'none':
                return index$1.h("location-off-icon", null);
            case 'custom':
                return index$1.h("location-icon", null);
            case 'google':
                return index$1.h("google-meet-icon", null);
            case 'microsoft':
                return index$1.h("microsoft-teams-icon", null);
            case 'zoom':
                return index$1.h("zoom-icon", null);
        }
    }
    getLabelHTML(location) {
        return (index$1.h("span", { class: "location-label", style: {
                display: 'flex',
                alignItems: 'center',
                gap: '16px',
                width: '-webkit-fill-available',
            } }, this.getIcon(location), index$1.h("span", { class: "location-text", style: {
                fontSize: '14px',
                fontWeight: '400',
            } }, labels[location])));
    }
    render() {
        const defaultOption = typeof this.selectedLocationOption !== 'undefined' ? this.locationOptions.find(i => i.value == this.selectedLocationOption) : null;
        return (index$1.h(index$1.Host, { key: '0096982c14e2b388a2324a10ea8ea2f3e15ea56e' }, index$1.h("div", { key: '56911162c07d534ba63be02e9c43686ed51c35fe', class: "nylas-event-location", part: "nel" }, index$1.h("label", { key: 'a1a20275ebe5568b2b1e5272c3513b9166841614', htmlFor: "location" }, utils.instance.t('nylasEventLocation.headerTitle'), index$1.h("span", { key: 'ada51f2282f1934f972815dfa93586f50965a6dd', class: "label-icon" }, index$1.h("tooltip-component", { key: '15cd36b04166c37b35ab46e56c44cfc07a30291e' }, index$1.h("info-icon", { key: 'bf4a6b7a80ba59bcba143b9200f1d60dd0fa909e', slot: "tooltip-icon" }), index$1.h("span", { key: '9985da6d6c668b8f01667b48a8d39cb02c5fad74', slot: "tooltip-content" }, utils.instance.t('nylasEventLocation.tooltip.desc'))))), index$1.h("div", { key: '02b96e763b3501411b90633da009345819c398f2', class: "location-input" }, defaultOption && defaultOption?.label && (index$1.h("select-dropdown", { withSearch: false, name: "location", options: this.locationOptions, defaultSelectedOption: defaultOption, exportparts: "sd_dropdown: nel__dropdown, sd_dropdown-button: nel__dropdown-button, sd_dropdown-content: nel__dropdown-content" }, index$1.h("span", { slot: "select-icon" }, this.getIcon(this.selectedLocationOption)))), this.selectedLocationOption === 'custom' && (index$1.h("input", { type: "text", part: "nel__location", id: "location", name: "location", maxlength: "1024", value: this.location, onInput: e => this.handleChange(e) }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "currentUser": ["currentUserChangedHandler"],
        "conferenceProviders": ["conferenceProvidersChanged"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$d([
    registerComponent.RegisterComponent({
        name: 'nylas-event-location',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.conferenceProviders', 'conferenceProviders'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$d("design:type", Function),
    __metadata$d("design:paramtypes", []),
    __metadata$d("design:returntype", void 0)
], NylasEventLocation.prototype, "render", null);
NylasEventLocation.style = NylasEventLocationStyle0;

const nylasEventTitleCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-title{display:flex;flex-direction:column;gap:4px;position:relative;text-align:left}.nylas-event-title div.title{padding:12px 16px;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);overflow:scroll;white-space:nowrap;scrollbar-width:thin}.nylas-event-title div.title::-webkit-scrollbar{width:6px;height:6px}.nylas-event-title div.title.error{border-color:var(--nylas-error);border-width:2px;outline:none}.nylas-event-title input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200)}.nylas-event-title span.help-text{display:inline-block;gap:4px;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:21px;position:relative}.nylas-event-title span.help-text span.label-icon{display:inline-block}.nylas-event-title span.help-text span.label-icon tooltip-component::part(tc__container){position:unset}.nylas-event-title span.help-text span.label-icon tooltip-component::part(tc__content){position:absolute;top:4px;left:50%;transform:translateX(-50%)}.nylas-event-title span.error-message{color:var(--nylas-error)}.nylas-event-title label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-title label span.required{color:var(--nylas-error, #cc4841)}.nylas-event-title label span.label-icon{margin-left:4px}.nylas-event-title label span.label-icon tooltip-component{display:flex}.highlighted-tag{background-color:var(--nylas-base-200);border-radius:var(--nylas-border-radius);padding:5px;margin-left:4px}.token-options{display:block;background-color:var(--nylas-base-0);width:100%;max-height:336px;overflow:auto;z-index:1;border-radius:4px;position:absolute;top:80px;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.0509803922);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1019607843)}@media screen and (max-width: 768px){.token-options{right:0;width:325px;max-width:unset}}.token-options ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px;margin:0}.token-options ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.token-options ul li .token-label{display:flex;flex-direction:column;font-weight:400}.token-options ul li .token-label .token{color:var(--nylas-abse-900);font-size:16px;line-height:24px}.token-options ul li .token-label .description{color:var(--nylas-base-600);font-size:14px;line-height:21px}.token-options ul li:hover,.token-options ul li:focus,.token-options ul li:active,.token-options ul li.active{background-color:var(--nylas-base-100)}.token-options ul li:hover .token-label .token,.token-options ul li:focus .token-label .token,.token-options ul li:active .token-label .token,.token-options ul li.active .token-label .token{color:var(--nylas-primary)}.token-options .selected{background-color:var(--nylas-base-100)}";
const NylasEventTitleStyle0 = nylasEventTitleCss;

var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$c = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventTitle = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventTitle = this.selectedConfiguration?.event_booking?.title;
        this.name = 'title';
        this.selectedLanguage = undefined;
        this.showTokens = false;
        this.availableTokens = constants.EVENT_TITLE_TOKENS.map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = this.availableTokens;
        this.ariaActivedescendant = '';
        this.currentWord = { $value: '', fullText: '', index: -1, focusOffset: -1 };
        this.validationError = '';
        this.configEventTitle = '';
        this.additionalFieldTokens = [];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-title', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    ariaActivedescendantChangedHandler(newValue) {
        utils.debug('nylas-event-title', 'ariaActivedescendantChangedHandler', newValue);
        if (newValue !== '') {
            const activeOption = this.host.shadowRoot?.getElementById(newValue);
            activeOption?.classList.add('active');
        }
        else {
            const options = this.host.shadowRoot?.querySelectorAll('.token-options li.active');
            options?.forEach(option => option.classList.remove('active'));
        }
    }
    configChangedHandler(newVal) {
        const title = newVal?.event_booking?.title;
        const additionalFields = newVal?.scheduler?.additional_fields || {};
        const newKeys = Object.keys(additionalFields) || [];
        const newTokens = newKeys.map(key => {
            return {
                token: `\$${key}`,
                value: `\${${key}}`,
                description: additionalFields[key].label || '',
            };
        });
        this.additionalFieldTokens = [...newTokens];
        this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = [...this.availableTokens];
        this.configEventTitle = title;
        if (title) {
            this.updateEventTitleFromProp(title);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-title', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-title', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-title', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.eventTitle = this.selectedConfiguration?.event_booking?.title;
        }
        this.updateEventTitleFromProp(this.eventTitle || '');
    }
    disconnectedCallback() {
        utils.debug('nylas-event-title', 'disconnectedCallback');
    }
    formSubmittedHandler(event) {
        utils.debug('nylas-event-title', 'formSubmittedHandler', event);
        if (!this.internals?.validity?.valid) {
            this.validationError = 'Event title is required';
        }
        else {
            this.validationError = '';
        }
    }
    valueChangedHandler(event) {
        const { name, value } = event.detail;
        const additionalFields = value || {};
        if (name === 'additional-fields') {
            const newKeys = Object.keys(additionalFields) || [];
            const newTokens = newKeys.map(key => {
                return {
                    token: `\$${key}`,
                    value: `\${${key}}`,
                    description: additionalFields[key].label || '',
                };
            });
            this.additionalFieldTokens = [...newTokens];
            this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
                label: token.token,
                value: token.value,
                labelHTML: token,
            }));
            this.filteredTokens = [...this.availableTokens];
        }
    }
    updateEventTitleFromProp(newValue) {
        utils.debug('nylas-event-title', 'eventTitleChangedHandler', newValue);
        const title = newValue || this.configEventTitle;
        if (this.titleRef) {
            this.titleRef.innerHTML = this.highlightTokens(title);
            if (typeof this.internals.setValidity === 'function') {
                if (!title || title === '') {
                    this.titleRef.focus();
                    this.internals?.setValidity({ customError: true }, `Event title is required`, this.titleRef);
                }
                else {
                    this.internals?.setValidity({ customError: false });
                }
            }
        }
    }
    highlightTokens(title) {
        let outputHtml = title;
        [...constants.EVENT_TITLE_TOKENS, ...this.additionalFieldTokens].forEach(tokenObj => {
            const token = tokenObj.value;
            const regex = new RegExp(`(\\${token})(?!\\w)`, 'g');
            outputHtml = outputHtml?.replace(regex, '<span class="highlighted-tag">$1</span>') || '';
        });
        return outputHtml;
    }
    getCurrentSelectionForBrowser() {
        const getSelectionTextData = (nodeValue, offset, node, allSelected) => {
            const text = nodeValue.replace(/[\u200B-\u200D\uFEFF]/g, '');
            const dollarIndex = text.lastIndexOf('$');
            const lastWord = text.substring(dollarIndex).split(' ')[0];
            return {
                focusOffset: offset,
                dollarIndex,
                lastWord,
                currentText: text,
                node,
                allSelected,
            };
        };
        const isAllSelected = (selection) => selection.anchorOffset === 0 && selection.focusOffset === selection.focusNode?.nodeValue?.length;
        const currentBrowser = utils.getBrowser();
        switch (currentBrowser) {
            case 'Chrome':
                const shadowRootSelection = this.host.shadowRoot?.getSelection();
                const focusNode = shadowRootSelection?.focusNode;
                const focusNodeValue = focusNode?.nodeValue || '';
                const allSelected = shadowRootSelection && isAllSelected(shadowRootSelection);
                return getSelectionTextData(focusNodeValue, shadowRootSelection?.focusOffset || -1, focusNode, allSelected);
            case 'Firefox':
                const selection = document.getSelection();
                const anchorNodeValue = selection?.anchorNode?.nodeValue || '';
                const allSelectedFirefox = selection && isAllSelected(selection);
                return getSelectionTextData(anchorNodeValue, selection?.focusOffset || -1, selection?.anchorNode, allSelectedFirefox);
            case 'Safari':
                const windowSelection = window.getSelection();
                const anchorNode = windowSelection?.getComposedRanges(this.host.shadowRoot)[0];
                const currentText = anchorNode?.startContainer?.nodeValue || '';
                const allSelectedSafari = windowSelection && isAllSelected(windowSelection);
                return getSelectionTextData(currentText, anchorNode?.endOffset || -1, anchorNode?.startContainer, allSelectedSafari);
            default:
                console.warn('Browser not supported');
                return null;
        }
    }
    handleChange(event) {
        let textContent = event.target.textContent || '';
        textContent = utils.sanitize(textContent);
        const currentSelection = this.getCurrentSelectionForBrowser();
        if (!currentSelection) {
            this.updateEventTitle(textContent);
            this.resetDropdown();
            return;
        }
        const { focusOffset, dollarIndex, lastWord, currentText } = currentSelection;
        if (dollarIndex === -1 || focusOffset < dollarIndex) {
            this.updateEventTitle(textContent);
            this.resetDropdown();
            return;
        }
        if (lastWord.startsWith('$')) {
            this.showTokens = true;
            this.currentWord = {
                $value: lastWord,
                fullText: currentText,
                index: dollarIndex,
                focusOffset,
            };
            this.populateSuggestionsDropdown(lastWord);
        }
        else {
            this.resetDropdown();
        }
        this.updateEventTitle(textContent);
    }
    handleInputKeyDown(event) {
        const selection = this.getCurrentSelectionForBrowser();
        if (selection?.allSelected && !utils.isNonPrintableKey(event)) {
            this.titleRef.innerHTML = '';
        }
        if (event.key === 'Enter') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                activeOption.click();
                this.ariaActivedescendant = '';
            }
        }
        else if (event.key === 'ArrowDown') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const nextOption = activeOption.nextElementSibling;
                if (nextOption) {
                    this.ariaActivedescendant = nextOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[0].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[0].label;
            }
        }
        else if (event.key === 'ArrowUp') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const prevOption = activeOption.previousElementSibling;
                if (prevOption) {
                    this.ariaActivedescendant = prevOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
            }
        }
        else if (event.key === 'Escape') {
            event.preventDefault();
            this.resetDropdown();
        }
        else if (event.key === 'Backspace' || event.key === 'Delete') {
            const parentNode = selection?.node?.parentNode;
            if (selection?.currentText.startsWith('${') && parentNode && parentNode.nodeName === 'SPAN') {
                event.preventDefault();
                parentNode.removeChild(selection.node);
                parentNode.remove();
                this.resetDropdown();
                this.updateEventTitle(this.titleRef?.textContent || '');
            }
            if (this.titleRef.textContent === '' || selection?.allSelected) {
                this.titleRef.innerHTML = '';
                this.updateEventTitle('');
            }
        }
    }
    selectOption(e, option) {
        e.preventDefault();
        const word = this.currentWord.fullText;
        const dollarWord = this.currentWord.$value;
        let currentNode = this.titleRef.firstChild;
        let textNode = null;
        while (currentNode) {
            if (currentNode.nodeType === 3) {
                const currentNodeText = currentNode.textContent?.replace(/[\u200B-\u200D\uFEFF]/g, '') || '';
                const wordText = word.replace(/[\u200B-\u200D\uFEFF]/g, '');
                if (currentNodeText.includes(wordText)) {
                    textNode = currentNode;
                    break;
                }
            }
            currentNode = currentNode.nextSibling;
        }
        if (!textNode) {
            return;
        }
        const text = textNode.textContent || '';
        const index = text.indexOf(dollarWord);
        const textBefore = text.substring(0, index);
        const textAfter = text.substring(index + dollarWord.length);
        const newTextNode = document.createTextNode(textBefore);
        const newRange = document.createRange();
        const tagSpan = document.createElement('span');
        tagSpan.classList.add('highlighted-tag');
        tagSpan.textContent = `${option.value}`;
        const newTextNodeAfter = document.createTextNode(textAfter);
        if (textAfter !== '') {
            textNode.replaceWith(newTextNode, tagSpan, newTextNodeAfter);
            newRange.setStart(newTextNodeAfter, 1);
        }
        else {
            const afterNode = document.createTextNode('\u200B');
            textNode.replaceWith(newTextNode, tagSpan, afterNode);
            newRange.setStart(afterNode, 1);
        }
        this.resetDropdown();
        this.titleRef.focus();
        const sel = window.getSelection();
        newRange.collapse(true);
        sel?.removeAllRanges();
        sel?.addRange(newRange);
        this.updateEventTitle(this.titleRef.textContent || '');
    }
    populateSuggestionsDropdown(query = '') {
        this.filteredTokens = this.availableTokens.filter(obj => {
            return obj.label.startsWith(query.toString()) || obj.value.startsWith(query.toString());
        });
        if (this.filteredTokens.length > 0) {
            this.ariaActivedescendant = this.filteredTokens[0].label;
        }
    }
    get isInternalsAvailable() {
        return typeof this.internals !== 'undefined' && typeof this.internals.setValidity === 'function' && typeof this.internals.setFormValue === 'function';
    }
    updateEventTitle(text) {
        const value = text.replace(/ +/g, ' ');
        if (value === '' || /^[\s]*$/.test(value)) {
            this.validationError = 'Event title is required';
            this.isInternalsAvailable && this.internals?.setValidity({ customError: true }, `Event title is required`, this.titleRef);
        }
        else {
            this.validationError = '';
            this.isInternalsAvailable && this.internals?.setValidity({ customError: false });
        }
        this.isInternalsAvailable && this.internals?.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    resetDropdown() {
        this.showTokens = false;
        this.ariaActivedescendant = '';
    }
    getLabelHTML(token) {
        return (index$1.h("div", { class: "token-label" }, index$1.h("span", { class: "token" }, token.token), index$1.h("span", { class: "description" }, token.description)));
    }
    render() {
        return (index$1.h(index$1.Host, { key: '939a9d39a09fc21d9ddc3a9439531e67eb3c3ca4' }, index$1.h("div", { key: '64b4c5803d47507ce973901a2b72bd6e282d69ec', class: "nylas-event-title", part: "net" }, index$1.h("label", { key: '1e767bdcb14c5856116c292f1528ae48426fa629', htmlFor: "title" }, utils.instance.t('nylasEventTitle.headerTitle'), index$1.h("span", { key: 'f067d784f17ce438f6691470ae78014028fe0ae9', class: "required" }, "*")), index$1.h("div", { key: '043eaabcf1c15d4935717e00b04d62d087f75a87', class: {
                title: true,
                error: this.validationError !== '',
            }, part: "net__title", ref: el => (this.titleRef = el), contentEditable: "true", onInput: e => this.handleChange(e), onKeyDown: event => this.handleInputKeyDown(event) }), this.showTokens && this.filteredTokens?.length > 0 && (index$1.h("div", { class: "token-options", part: "net__dropdown-content" }, index$1.h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant }, this.filteredTokens.map(option => (index$1.h("li", { tabindex: "0", key: option.label, id: option.label, class: { active: this.ariaActivedescendant === option.label }, onClick: e => this.selectOption(e, option), role: "option" }, this.getLabelHTML(option.labelHTML))))))), index$1.h("span", { key: '90cb59742f5f9feb4f1a95ecc11fdb0f6626c1b4', class: "help-text" }, utils.instance.t('nylasEventTitle.helpText', { context: 'start', field: utils.instance.t('nylasEventTitle.title') }), " ", index$1.h("code", { key: '4ccb07d90b5366e29b7ec041d9ea96e2dbe2f17f' }, "$"), ' ', utils.instance.t('nylasEventTitle.helpText', { context: 'end' }), index$1.h("span", { key: '762784688425f7c75c00d02650602d55a4c39a7f', class: "label-icon" }, index$1.h("tooltip-component", { key: '6c896cb600dfb33eea7d3d34d02dbf4957daaccb' }, index$1.h("info-icon", { key: '8510b9ff47f14773f3c156b01d9ee692a2e23b9d', slot: "tooltip-icon" }), index$1.h("span", { key: '55dc64d424f76c3e53380957d2a2194161509c05', slot: "tooltip-content" }, utils.instance.t('nylasEventTitle.tooltip.desc'), " ", index$1.h("code", { key: '02cacd5eca30da22d0ea5a74991238d3a0b68524' }, '${invitee}'))))), this.validationError != '' && index$1.h("span", { class: "error-message" }, this.validationError))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "ariaActivedescendant": ["ariaActivedescendantChangedHandler"],
        "selectedConfiguration": ["configChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$c([
    registerComponent.RegisterComponent({
        name: 'nylas-event-title',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$c("design:type", Function),
    __metadata$c("design:paramtypes", []),
    __metadata$c("design:returntype", void 0)
], NylasEventTitle.prototype, "render", null);
NylasEventTitle.style = NylasEventTitleStyle0;

const nylasFeedbackFormCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.card-wrapper{background:var(--nylas-base-0);display:flex;flex-direction:column;font-family:var(--nylas-font-family);background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;padding:32px;width:562px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.card-wrapper{width:100%;border-radius:0px}}.header{overflow-wrap:anywhere;display:flex;flex-direction:column;font-size:16px;font-weight:400}.header h2{color:var(--nylas-base-900);font-size:24px;font-weight:600;text-align:left;margin:0}.description.title-desc{margin-bottom:2rem}.description.footer-desc{margin-top:2rem}.description.footer-desc a{color:var(--nylas-primary);text-decoration:none}.description p{margin:0;font-size:18px;color:var(--nylas-base-600)}.footer{margin-top:1rem;padding-top:1rem;display:flex;justify-content:flex-end;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.close-button{width:100%;display:flex;justify-content:flex-end}.close-button button-component button{padding:0;height:auto}.close-button button-component button:hover{background-color:transparent !important}button-component{--dot-color:var(--nylas-base-700)}";
const NylasFeedbackFormStyle0 = nylasFeedbackFormCss;

var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$b = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasFeedbackForm = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.feedbackModalClosed = index$1.createEvent(this, "feedbackModalClosed", 7);
        this.feedbackSubmitted = index$1.createEvent(this, "feedbackSubmitted", 7);
        this.triggerValidation = index$1.createEvent(this, "triggerValidation", 7);
        this.handleConfirmBookingButtonClicked = () => {
            const validationEvent = this.triggerValidation.emit();
            if (validationEvent.defaultPrevented) {
                return;
            }
            this.feedbackSubmitted.emit({ feedback: this.feedbackMessage });
        };
        this.themeConfig = undefined;
        this.feedbackMessage = '';
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-feedback-form] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-feedback-form] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    handleFormInputChanged(event) {
        utils.debug(`[nylas-feedback-form] Form input changed`);
        if (!event.detail.value) {
            return;
        }
        this.triggerValidation.emit();
        if (event.detail.name === 'feedback') {
            this.feedbackMessage = event.detail.value;
        }
    }
    closeModal(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        this.feedbackModalClosed.emit();
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'd9e46e03000d836deb146a105ad5af7314fc93d3', part: "nfbf" }, index$1.h("div", { key: '6924101eb302c203949378720eea5a6c0ecb34a3', class: "card-wrapper", part: "nfbfc__card" }, index$1.h("div", { key: '29ad795443767409c2d9812f55b20678d79188ba', class: "close-button" }, index$1.h("button-component", { key: '6a2c2454351b7d1fdff44e03e5557da13eb75ade', tooltip: "Close", id: "close", variant: 'invisible', onClick: e => this.closeModal(e), part: "nfbf__close-button" }, index$1.h("close-icon", { key: 'cad67f709930a3d4f439de83f15d2cc4bf48ded5' }))), index$1.h("div", { key: '4060b186ead7f5dceb82275ca7c5f3daae6603e8', class: "header" }, index$1.h("h2", { key: 'dc5d83a6e9d0c8898011d2f490940bc7e9bcce8b', slot: "card-title", part: "nfbf__title" }, utils.instance.t('feedbackFormTitle'))), index$1.h("div", { key: '8f5519ff02c341fe26613e640b76556b6edcd4ac', class: "description title-desc" }, index$1.h("p", { key: '2bd0aa700560b3381ab3902be2da9bb6765ca1bb' }, utils.instance.t('feedbackFormDescription'))), index$1.h("textarea-component", { key: '959082460c4ed316ba7d74e8ce2a95225b53deb4', label: utils.instance.t('feedbackMessageLabel'), required: true, maxLength: 500, part: "nfbf__description", name: "feedback", placeholder: utils.instance.t('feedbackMessagePlaceholder') }), index$1.h("div", { key: 'b0b085c8d8c7d5855ade8a9e91ed172e710f5b7d', class: 'description footer-desc' }, index$1.h("p", { key: 'd64ed3e021f0590ee0d792f8d37fcf860332d50d' }, "By sending this report, you agree to Nylas\u2019 access to the data necessary to respond to this issue, subject to Nylas\u2019", ' ', index$1.h("a", { key: '7dc7c199ee9f4abd84274cd5bfca904f6aa8d19c', href: "https://www.nylas.com/privacy-policy/", target: "_blank", rel: "nofollow noreferrer noopener" }, "Privacy Policy"), ".")), index$1.h("div", { key: 'aa907c4c9462c5218b279b0cb6495aa7177a68aa', class: {
                footer: true,
            } }, index$1.h("button-component", { key: '049883425d2a7657b84dfd9cf1829b61771c23bc', variant: 'invisible', onClick: e => this.closeModal(e), part: "nfbf__button-outline nfbf__cancel-cta" }, `${utils.instance.t('feedbackModalCloseButton')}`), index$1.h("button-component", { key: '5a97be9f193e984237835f1707af9ce541a4f063', variant: 'primary', onClick: this.handleConfirmBookingButtonClicked, part: "nfbf__button-outline nfbf__reschedule-cta" }, `${utils.instance.t('feedbackModalSubmitButton')}`)))));
    }
    get host() { return index$1.getElement(this); }
};
__decorate$b([
    registerComponent.RegisterComponent({
        name: 'nylas-feedback-form',
        stateToProps: new Map([]),
        eventToProps: {
            feedbackSubmitted: async (_event, _nylasSchedulerConnector) => {
            },
        },
        localPropsToProp: new Map([['themeConfig', 'themeConfig']]),
        fireRegisterEvent: true,
    }),
    __metadata$b("design:type", Function),
    __metadata$b("design:paramtypes", []),
    __metadata$b("design:returntype", void 0)
], NylasFeedbackForm.prototype, "render", null);
NylasFeedbackForm.style = NylasFeedbackFormStyle0;

const nylasLimitFutureBookingsCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-limit-future-bookings{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-limit-future-bookings{flex-direction:column;gap:0.5rem}}.nylas-limit-future-bookings label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-limit-future-bookings label span.label-icon{margin-left:4px}.nylas-limit-future-bookings label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";
const NylasLimitFutureBookingsStyle0 = nylasLimitFutureBookingsCss;

var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$a = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLimitFutureBookings = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.availableDaysInFuture = undefined;
        this.name = 'limit-future-bookings';
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-limit-future-bookings', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const daysInFuture = newVal?.scheduler?.available_days_in_future || this.availableDaysInFuture || 1;
        if (daysInFuture) {
            this.updateNumberAndPeriodFromDays(daysInFuture);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(daysInFuture?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-limit-future-bookings', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-limit-future-bookings', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-limit-future-bookings', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromDays(this.availableDaysInFuture || 1);
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-limit-future-bookings', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let availableDaysInFuture;
        if (period === 'day') {
            availableDaysInFuture = number;
        }
        else if (period === 'week') {
            availableDaysInFuture = number * 7;
        }
        else {
            availableDaysInFuture = number * 30;
        }
        this.valueChanged.emit({ value: availableDaysInFuture, name: 'availableDaysInFuture' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(availableDaysInFuture.toString(), this.name);
    }
    updateNumberAndPeriodFromDays(days) {
        let number, period;
        if (days >= 30 && days % 30 === 0) {
            number = days / 30;
            period = 'month';
        }
        else if (days >= 7 && days % 7 === 0) {
            number = days / 7;
            period = 'week';
        }
        else {
            number = days;
            period = 'day';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTImePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (index$1.h(index$1.Host, { key: '5b673eeb329bc7d5159ced515ca79da4bc4f53e6' }, index$1.h("div", { key: '29cf8a9f181b71c98a5d001dc87d8c46249e8c35', class: "nylas-limit-future-bookings", part: "nlfb" }, index$1.h("label", { key: 'de9d2983117081c324c851fef9de5a873ea941df' }, utils.instance.t('nylasLimitFutureBookings.headerTitle'), index$1.h("span", { key: 'fd8e2e5457019bb259cb4c7374dff235c284e214', class: "label-icon" }, index$1.h("tooltip-component", { key: '549860a6d6bfa59a40abe5d00bd36acad51c0cf7' }, index$1.h("info-icon", { key: 'dcc2eecc7b3125dccfcb6287fbd9dd0bd58878d0', slot: "tooltip-icon" }), index$1.h("span", { key: 'f0a713a404d20dd97808546abe9060df0c63a56b', slot: "tooltip-content" }, utils.instance.t('nylasLimitFutureBookings.tooltip.desc'))))), showTImePeriodSelector && (index$1.h("time-period-selector", { id: "limit-future-bookings", timePeriods: [utils.instance.t('timePeriod', { context: 'day' }), utils.instance.t('timePeriod', { context: 'week' }), utils.instance.t('timePeriod', { context: 'month' })], exportparts: "tps__number-dropdown: nlfb__number-dropdown, tps__number-dropdown-button: nlfb__number-dropdown-button, tps__number-dropdown-content: nlfb__number-dropdown-content, tps__period-dropdown: nlfb__period-dropdown, tps__period-dropdown-button: nlfb__period-dropdown-button, tps__period-dropdown-content: nlfb__period-dropdown-content", defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$a([
    registerComponent.RegisterComponent({
        name: 'nylas-limit-future-bookings',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$a("design:type", Function),
    __metadata$a("design:paramtypes", []),
    __metadata$a("design:returntype", void 0)
], NylasLimitFutureBookings.prototype, "render", null);
NylasLimitFutureBookings.style = NylasLimitFutureBookingsStyle0;

const nylasMinBookingNoticeCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-min-booking-notice{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-min-booking-notice{flex-direction:column;gap:0.5rem}}.nylas-min-booking-notice label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-min-booking-notice label span.label-icon{margin-left:4px}.nylas-min-booking-notice label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";
const NylasMinBookingNoticeStyle0 = nylasMinBookingNoticeCss;

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMinBookingNotice = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'min-booking-notice';
        this.minBookingNotice = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-min-booking-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minBookingNotice = newVal?.scheduler?.min_booking_notice || this.minBookingNotice || 1;
        if (minBookingNotice) {
            this.updateNumberAndPeriodFromMinutes(minBookingNotice);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(minBookingNotice?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-min-booking-notice', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-min-booking-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-min-booking-notice', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromMinutes(this.minBookingNotice || 1);
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-min-booking-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minBookingNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (index$1.h(index$1.Host, { key: '0b342c9472d4aef359ddd8ef21fdc16b6bfed179' }, index$1.h("div", { key: 'c7cd29ee7944f377cd4c642059134ffb75d4b75d', class: "nylas-min-booking-notice", part: "nmbn" }, index$1.h("label", { key: '7875e08a6cd797a10a002fcbb7f57c0260871d82' }, utils.instance.t('nylasMinBookingNotice.headerTitle'), index$1.h("span", { key: '446ade5ffe5932db03bff62d9adccb70b5c71e39', class: "label-icon" }, index$1.h("tooltip-component", { key: '2be4c615539573060d848e7f7054c30b3f4b5fb2' }, index$1.h("info-icon", { key: 'e2790b6ff311a22bbf035578bda53b065c87891c', slot: "tooltip-icon" }), index$1.h("span", { key: '86eec2ec174f174628e02684d085c419e6073c75', slot: "tooltip-content" }, utils.instance.t('nylasMinBookingNotice.tooltip.desc'))))), showTimePeriodSelector && (index$1.h("time-period-selector", { id: "min-booking-notice", exportparts: "tps__number-dropdown: nmbn__number-dropdown, tps__number-dropdown-button: nmbn__number-dropdown-button, tps__number-dropdown-content: nmbn__number-dropdown-content, tps__period-dropdown: nmbn__period-dropdown, tps__period-dropdown-button: nmbn__period-dropdown-button, tps__period-dropdown-content: nmbn__period-dropdown-content", timePeriods: [
                utils.instance.t('timeDuration', { context: 'minute' }),
                utils.instance.t('timeDuration', { context: 'hour' }),
                utils.instance.t('timePeriod', { context: 'day' }),
                utils.instance.t('timePeriod', { context: 'week' }),
            ], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$9([
    registerComponent.RegisterComponent({
        name: 'nylas-min-booking-notice',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$9("design:type", Function),
    __metadata$9("design:paramtypes", []),
    __metadata$9("design:returntype", void 0)
], NylasMinBookingNotice.prototype, "render", null);
NylasMinBookingNotice.style = NylasMinBookingNoticeStyle0;

const nylasMinCancellationNoticeCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-min-cancellation-notice{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-min-cancellation-notice{flex-direction:column;gap:0.5rem}}.nylas-min-cancellation-notice label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-min-cancellation-notice label span.label-icon{margin-left:4px}.nylas-min-cancellation-notice label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";
const NylasMinCancellationNoticeStyle0 = nylasMinCancellationNoticeCss;

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMinCancellationNotice = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'min-cancellation-notice';
        this.minCancellationNotice = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-min-cancellation-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minCancellationNotice = typeof newVal?.scheduler?.min_cancellation_notice !== 'undefined' ? newVal?.scheduler?.min_cancellation_notice : this.minCancellationNotice || 0;
        if (typeof minCancellationNotice === 'number') {
            this.updateNumberAndPeriodFromMinutes(minCancellationNotice);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(minCancellationNotice?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-min-cancellation-notice', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-min-cancellation-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-min-cancellation-notice', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromMinutes(this.minCancellationNotice || 0);
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-min-cancellation-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minCancellationNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes == 0) {
            number = 0;
            period = 'minute';
        }
        else if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (index$1.h(index$1.Host, { key: '0687dca4c2ef8c3dd4496e905d11e0f97f4726bf' }, index$1.h("div", { key: 'a0a371d43f9988479eb444feb8be4fc753311105', class: "nylas-min-cancellation-notice", part: "nmcn" }, index$1.h("label", { key: '0adcbf86ef15737302b2a4f76b7a8b1b1b94bb95' }, utils.instance.t('nylasMinCancellationNotice.headerTitle'), index$1.h("span", { key: '2e0981cf4b37e033acf00cba54c1dd0ad28b7477', class: "label-icon" }, index$1.h("tooltip-component", { key: '0e1c20968919ae6adacc170eab834cd48da74690' }, index$1.h("info-icon", { key: '59b638d661f41eac21035c3cee34d1d20990abdd', slot: "tooltip-icon" }), index$1.h("span", { key: 'ea7aee5f2b520bb54f312f39b807f0ffd065473b', slot: "tooltip-content" }, utils.instance.t('nylasMinCancellationNotice.tooltip.desc'))))), showTimePeriodSelector && (index$1.h("time-period-selector", { id: "min-cancellation-notice", exportparts: "tps__number-dropdown: nmcn__number-dropdown, tps__number-dropdown-button: nmcn__number-dropdown-button, tps__number-dropdown-content: nmcn__number-dropdown-content, tps__period-dropdown: nmcn__period-dropdown, tps__period-dropdown-button: nmcn__period-dropdown-button, tps__period-dropdown-content: nmcn__period-dropdown-content", timePeriods: [
                utils.instance.t('timeDuration', { context: 'minute' }),
                utils.instance.t('timeDuration', { context: 'hour' }),
                utils.instance.t('timePeriod', { context: 'day' }),
                utils.instance.t('timePeriod', { context: 'week' }),
            ], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$8([
    registerComponent.RegisterComponent({
        name: 'nylas-min-cancellation-notice',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$8("design:type", Function),
    __metadata$8("design:paramtypes", []),
    __metadata$8("design:returntype", void 0)
], NylasMinCancellationNotice.prototype, "render", null);
NylasMinCancellationNotice.style = NylasMinCancellationNoticeStyle0;

const nylasPageNameCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-page-name{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-page-name .header{padding:1rem;display:grid;grid-template-columns:1fr auto}.nylas-page-name .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-page-name .header p{display:flex;gap:4px;align-items:center;margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-page-name .header .drawer-toggle{display:flex;gap:24px;align-items:center}.nylas-page-name .header .drawer-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-page-name .header .drawer-toggle .chevron:hover,.nylas-page-name .header .drawer-toggle .chevron:active{color:var(--nylas-primary)}.nylas-page-name .header .drawer-toggle .chevron.open{transform:rotate(90deg)}.nylas-page-name .header .drawer-toggle .chevron.closed{transform:rotate(270deg)}.nylas-page-name .header .drawer-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-page-name .header .drawer-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-page-name .nylas-page-name__body{display:grid;grid-template-columns:1fr;background-color:var(--nylas-base-25);border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x);border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.nylas-page-name .nylas-page-name__body{grid-template-columns:1fr}}.nylas-page-name .nylas-page-name__body .nylas-page-name__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}@media screen and (max-width: 768px){.nylas-page-name .nylas-page-name__body .nylas-page-name__section{border:none}}.nylas-page-name .nylas-page-name__body .nylas-page-name__section .nylas-page-name__row{display:flex;align-items:center;gap:1rem}.nylas-page-name .nylas-page-name__body .nylas-page-name__section .nylas-page-name__row label{display:flex;align-items:center}.nylas-page-name .nylas-page-name__body .nylas-page-name__section .nylas-page-name__row label span.required{color:var(--nylas-error, #cc4841)}.nylas-page-name .nylas-page-name__body .nylas-page-name__section .nylas-page-name__row p{margin:0.25rem 0 0 0;font-size:16px;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.nylas-page-name .nylas-page-name__body .nylas-page-name__section .nylas-page-name__row .input-container{width:100%}.nylas-page-name .nylas-page-name__input-wrapper{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%;width:-moz-available;width:-webkit-fill-available;display:flex;flex-direction:row;gap:0.125rem;border-radius:var(--nylas-border-radius-2x);z-index:1}.nylas-page-name .nylas-page-name__input-wrapper:focus{outline-color:var(--nylas-primary)}.nylas-page-name .nylas-page-name__input-wrapper.error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}.nylas-page-name .nylas-page-name__input-wrapper.error::placeholder{font-weight:400}.nylas-page-name .nylas-page-name__input-wrapper::placeholder{color:var(--nylas-base-300)}.nylas-page-name .nylas-page-name__input-wrapper input-component::part(ic__input){outline:none;border:none;width:100%;font-size:16px;height:auto;padding-left:0px}";
const NylasPageNameStyle0 = nylasPageNameCss;

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasPageName = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'page-name';
        this.pageName = undefined;
        this.showToggle = true;
        this.isOpen = true;
        this.selectedLanguage = undefined;
        this.currentPageName = undefined;
    }
    connectedCallback() {
        utils.debug('nylas-page-name', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-page-name', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-page-name', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-page-name', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.currentPageName = this.pageName ?? '';
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-page-name', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-page-name', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-page-name', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-page-name', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-page-name', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.currentPageName = newValue?.name ?? this.pageName ?? '';
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        if (name === 'page-name') {
            this.currentPageName = value;
            this.internals.setFormValue(JSON.stringify(value), this.name);
            this.valueChanged.emit({ value: JSON.stringify(value), name: this.name });
        }
    }
    toggleDrawer() {
        this.isOpen = !this.isOpen;
    }
    render() {
        const isComponentReady = typeof this.currentPageName !== 'undefined';
        return (index$1.h(index$1.Host, { key: 'aff0da976c6bcf75be7f9f79552ff2b93f985207' }, index$1.h("div", { key: '47c6dc4a5de16c7097a8cc7b55a824da294e6a56', class: "nylas-page-name", part: "nces" }, index$1.h("div", { key: '6a245a0f7d1c33564ed61570660d7cc54ec47d70', class: "header", part: "nces__header" }, index$1.h("div", { key: 'ac421d52f0d5941dfdb1908dc04420359ff1c94c' }, index$1.h("h3", { key: '8706712f959dfc8c0af73309ff2b8ed1f3d6534e' }, utils.instance.t('nylasPageName.headerTitle')), index$1.h("p", { key: 'a9eb11c0248e5ce9acc634f05533810054312984' }, utils.instance.t('nylasPageName.headerSubTitle'), index$1.h("tooltip-component", { key: '022dd2e261b1c93e14b1d1a9800472d21b90dce9' }, index$1.h("info-icon", { key: 'b78838bc225be2ef8bfc6cc681b1d5005291c1ea', slot: "tooltip-icon" }), index$1.h("span", { key: '95bedf8954c9d7459edb08cc521c574ae4747f16', slot: "tooltip-content" }, utils.instance.t('nylasPageName.tooltip.desc'))))), this.showToggle && (index$1.h("div", { class: "drawer-toggle", part: "nces__drawer-toggle--container" }, index$1.h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleDrawer() }, index$1.h("chevron-icon", { width: "24", height: "24" }))))), this.isOpen && (index$1.h("div", { class: "nylas-page-name__body", part: "nces__body" }, index$1.h("div", { class: "nylas-page-name__section" }, index$1.h("div", { class: "nylas-page-name__row" }, index$1.h("div", { class: "input-container" }, index$1.h("div", { class: "nylas-page-name__input-wrapper" }, isComponentReady && (index$1.h("input-component", { name: "page-name", id: "page-name", type: "text", required: false, exportparts: "ic_input: npn__input-textfield", defaultValue: this.currentPageName ?? '' })))))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$7([
    registerComponent.RegisterComponent({
        name: 'nylas-page-name',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$7("design:type", Function),
    __metadata$7("design:paramtypes", []),
    __metadata$7("design:returntype", void 0)
], NylasPageName.prototype, "render", null);
NylasPageName.style = NylasPageNameStyle0;

const nylasPageStylingCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-page-styling{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-page-styling.no-border{border:none}.nylas-page-styling .header{padding:1rem;display:grid;grid-template-columns:1fr auto;border-bottom:1px solid var(--nylas-base-200)}.nylas-page-styling .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-page-styling .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-page-styling .header .drawer-toggle{display:flex;gap:24px;align-items:center}.nylas-page-styling .header .drawer-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-page-styling .header .drawer-toggle .chevron:hover,.nylas-page-styling .header .drawer-toggle .chevron:active{color:var(--nylas-primary)}.nylas-page-styling .header .drawer-toggle .chevron.open{transform:rotate(90deg)}.nylas-page-styling .header .drawer-toggle .chevron.closed{transform:rotate(270deg)}.nylas-page-styling .header .drawer-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-page-styling .header .drawer-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-page-styling .nylas-page-styling__body{display:grid;grid-template-columns:1fr auto;background-color:var(--nylas-base-25);border-radius:0 0 var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-page-styling .nylas-page-styling__body{grid-template-columns:1fr}}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section.no-padding{padding:0}@media screen and (max-width: 768px){.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section{border:none}}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row{display:grid;grid-template-columns:1fr;align-items:center}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label{display:flex;align-items:center}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.required{color:var(--nylas-error, #cc4841)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.label-icon{margin-left:4px}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.label-icon tooltip-component{display:flex}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row p{margin:0.25rem 0 0 0;font-size:16px;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection{display:flex;flex-direction:column;gap:1rem}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection.hide{display:none}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection .input-container,.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection>*{display:flex;flex-direction:column;column-gap:2rem;row-gap:0.25rem;width:100%;flex:1}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection .input-container textarea,.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection>* textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-page-styling .nylas-page-styling__body span.error-message{color:var(--nylas-error)}.nylas-page-styling .nylas-page-styling__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}";
const NylasPageStylingStyle0 = nylasPageStylingCss;

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasPageStyling = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        this.bookingFormSubmitted = index$1.createEvent(this, "bookingFormSubmitted", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'page-styling';
        this.appearance = undefined;
        this.isOpen = true;
        this.selectedLanguage = undefined;
        this.currentAppearance = undefined;
        this.customInputsSlot = null;
    }
    connectedCallback() {
        utils.debug('nylas-page-styling', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-page-styling', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-page-styling', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-page-styling', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-page-styling', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-page-styling', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-page-styling', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-page-styling', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    customInputsSlotChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'customInputsSlotChangedHandler', newValue);
        const appearance = this.currentAppearance;
        function updateInputDefaultValues(element) {
            if (element.hasAttribute && element.hasAttribute('name')) {
                const key = element.getAttribute('name');
                if (appearance && key && key in appearance && appearance[key] !== undefined) {
                    const componentType = element.getAttribute('component-type');
                    element.setAttribute('data-page-styling', 'true');
                    if (componentType === 'checkbox') {
                        element.setAttribute('checked', appearance[key]);
                    }
                    else if (componentType === 'radio-group') {
                        element.setAttribute('default-selected-value', appearance[key]);
                    }
                    else if (componentType === 'color-picker') {
                        element.setAttribute('default-selected-color', appearance[key]);
                    }
                    else if (componentType === 'select-dropdown') {
                        const options = element.getAttribute('options');
                        const selectedOption = options ? JSON.parse(options).find((option) => option.value === appearance[key]) : null;
                        element.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                    else if (componentType === 'image-url') {
                        element.setAttribute('image-url', appearance[key]);
                    }
                    else {
                        element.setAttribute('default-value', appearance[key]);
                    }
                }
            }
            element.childNodes.forEach(child => {
                if (child.nodeType === Node.ELEMENT_NODE) {
                    updateInputDefaultValues(child);
                }
            });
        }
        if (newValue) {
            updateInputDefaultValues(newValue);
        }
    }
    cloneAndCopyProps(element) {
        const clonedElement = element.cloneNode(false);
        const componentType = element.getAttribute('component-type');
        const key = element.getAttribute('name');
        if (element.options) {
            const options = element.getAttribute('options');
            console.log('page-styling options', element, options);
            if (typeof options === 'string') {
                try {
                    const parsedOptions = JSON.parse(options);
                    clonedElement.options = parsedOptions;
                    if (componentType === 'select-dropdown' && key && key in this.currentAppearance) {
                        const selectedOption = parsedOptions.find((option) => option.value === this.currentAppearance[key]);
                        clonedElement.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                }
                catch (e) {
                    console.error('Error parsing options', e);
                }
            }
            else {
                clonedElement.options = element.options;
            }
        }
        if (element.value) {
            clonedElement.value = element.value;
        }
        element.childNodes.forEach(child => {
            if (child.nodeType === Node.ELEMENT_NODE) {
                const clonedChild = this.cloneAndCopyProps(child);
                clonedElement.appendChild(clonedChild);
            }
            else if (child.nodeType === Node.TEXT_NODE) {
                clonedElement.appendChild(child.cloneNode(true));
            }
        });
        return clonedElement;
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'selectedConfigurationChangedHandler', newValue);
        this.currentAppearance = newValue?.appearance || {};
        const editor = document.querySelector('nylas-scheduler-editor');
        const slotElement = editor?.shadowRoot?.querySelector('slot[name="custom-page-style-inputs"]');
        if (!slotElement) {
            return;
        }
        const divElement = document.createElement('div');
        const slottedElements = slotElement?.assignedElements({ flatten: true });
        slottedElements?.forEach(element => {
            const clonedElement = this.cloneAndCopyProps(element);
            this.customInputsSlotChangedHandler(clonedElement);
            divElement.appendChild(clonedElement);
        });
        const bodyElement = this.host.shadowRoot?.querySelector('.nylas-page-styling');
        const slotContainer = bodyElement?.querySelector('.nylas-page-styling__body .subsection');
        if (slotContainer) {
            slotContainer.innerHTML = '';
            divElement.childNodes.forEach(child => {
                slotContainer.appendChild(child);
            });
            this.customInputsSlot = divElement;
        }
    }
    checkIfElementIsInSlot(name) {
        const findElement = document?.querySelector(`[slot="custom-page-style-inputs"] [name="${name}"]`);
        return findElement ? true : false;
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        const type = event.detail?.type;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        switch (name) {
            case 'submit_button_label':
                this.currentAppearance = { ...this.currentAppearance, submit_button_label: value };
                break;
            case 'thank_you_message':
                if (type === 'multi_line_text') {
                    const value = utils.sanitize(event.detail.value);
                    this.currentAppearance = { ...this.currentAppearance, thank_you_message: value };
                }
                break;
            default:
                this.currentAppearance = { ...this.currentAppearance, [name]: value };
                break;
        }
        this.updateConfirmationFormValue();
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-page-styling', 'nylasFormDropdownChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'color') {
            this.currentAppearance = { ...this.currentAppearance, color: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    valueChangedHandler(event) {
        utils.debug('nylas-page-styling', 'valueChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'company_logo_url') {
            this.currentAppearance = { ...this.currentAppearance, company_logo_url: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    checkboxToggledHandler(event) {
        const { checked, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: checked };
        this.updateConfirmationFormValue();
    }
    radioChangedHandler(event) {
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: value };
        this.updateConfirmationFormValue();
    }
    updateConfirmationFormValue() {
        utils.debug('nylas-page-styling', 'updateConfirmationFormValue');
        this.internals.setFormValue(JSON.stringify(this.currentAppearance), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.currentAppearance), name: this.name });
    }
    toggleConfirmationEmail() {
        this.isOpen = !this.isOpen;
    }
    render() {
        return (index$1.h(index$1.Host, { key: '68e1c2f32b4268726ba8df026df3e21dbe68e5dc' }, index$1.h("div", { key: '1ae19e1b16b921ff07532f766f4d3cd66cd4eab7', part: "nps", class: { 'nylas-page-styling': true, 'no-border': !this.customInputsSlot } }, this.customInputsSlot ? (index$1.h("div", { class: "header", part: "nps__header" }, index$1.h("div", null, index$1.h("h3", null, utils.instance.t('nylasPageStyling.headerTitle'))), index$1.h("div", { class: "drawer-toggle", part: "nps__drawer-toggle--container" }, index$1.h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleConfirmationEmail() }, index$1.h("chevron-icon", { width: "24", height: "24" }))))) : null, index$1.h("div", { key: '444f71a9a295a038e08fdf46ffd3a48191b1da31', id: "nylas-page-styling__body", class: "nylas-page-styling__body", part: "nps__body" }, index$1.h("div", { key: '4033d47d7ffefbf28cdce4742ed90902ec9f5c0d', class: { 'nylas-page-styling__section': true, 'no-padding': !this.customInputsSlot } }, index$1.h("div", { key: 'e2b2ad42964df5f04fb0297a667f8724040dd41a', class: "nylas-page-styling__row" }, index$1.h("div", { key: '6c74558fa601b9be224758352f9fec1346ce86b7', class: { subsection: true, hide: !this.isOpen } })))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate$6([
    registerComponent.RegisterComponent({
        name: 'nylas-page-styling',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", []),
    __metadata$6("design:returntype", void 0)
], NylasPageStyling.prototype, "render", null);
NylasPageStyling.style = NylasPageStylingStyle0;

const nylasParticipantBookingCalendarsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-participant-booking-calendars{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-participant-booking-calendars .header{padding:1rem}.nylas-participant-booking-calendars .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-participant-booking-calendars .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-participant-booking-calendars .content .participant-container{padding-top:12px;border-top:1px solid var(--nylas-base-200)}.nylas-participant-booking-calendars .content .participant-container .participant-title{display:flex;justify-content:space-between;align-items:center;padding:4px 16px 16px}.nylas-participant-booking-calendars .content .participant-container .participant-title p{margin:0}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle{display:flex;gap:24px;align-items:center}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron:hover,.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron:active{color:var(--nylas-primary)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.open{transform:rotate(90deg)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.closed{transform:rotate(270deg)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}nylas-booking-calendar-picker::part(nbcp){margin:0;border:none;border-top:1px solid var(--nylas-base-200);border-top-right-radius:0;border-top-left-radius:0}";
const NylasParticipantBookingCalendarsStyle0 = nylasParticipantBookingCalendarsCss;

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasParticipantBookingCalendars = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'participant-booking-calendars';
        this.participants = this.selectedConfiguration?.participants || [];
        this.calendars = undefined;
        this.participantOptions = undefined;
        this.selectedLanguage = undefined;
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = {};
        this.participantDefaultSelectedCalendar = {};
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    calendarsChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'calendarsChangedHandler', newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
    }
    participantsChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'participantsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(newValue, this.participantOptions);
    }
    participantOptionsChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'participantOptionsChangedHandler', newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'selectedConfigurationChangedHandler', newValue);
        const participants = newValue?.participants || this.participants;
        if (participants && participants.length > 0) {
            this.selectedCalendars = this.setParticipants(participants);
            this.participantCalendars = this.getParticipantCalendarOptions(participants, this.participantOptions);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    getParticipantCalendarOptions(addedParticipants, availableParticipantOptions) {
        const organizer = addedParticipants?.find(participant => participant.is_organizer);
        const participantCalendars = {};
        const showAdditionalParticipantBookingCalendars = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        if (availableParticipantOptions && showAdditionalParticipantBookingCalendars) {
            const participants = addedParticipants?.filter(participant => availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            const remainingParticipants = addedParticipants?.filter(participant => !availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            participants?.forEach(participant => {
                const participantOption = availableParticipantOptions?.find(participantOption => participantOption.email === participant.email);
                if (!participantOption)
                    return;
                this.participantDefaultSelectedCalendar[participant.email] = participant.booking?.calendar_id ?? 'primary';
                const calendars = participantOption.calendars ?? [];
                participantCalendars[participant.email] = calendars;
            });
            remainingParticipants?.forEach(participant => {
                if (participant?.booking?.calendar_id) {
                    participantCalendars[participant.email] = this.calendars ?? [{ id: 'primary', name: participant.email }];
                    this.participantDefaultSelectedCalendar[participant.email] = participant?.booking?.calendar_id ?? 'primary';
                }
            });
        }
        if (organizer) {
            participantCalendars[organizer.email] = this.calendars ?? [{ id: 'primary', name: organizer.email }];
            this.participantDefaultSelectedCalendar[organizer.email] = organizer?.booking?.calendar_id ?? 'primary';
        }
        return participantCalendars;
    }
    connectedCallback() {
        utils.debug('nylas-participant-booking-calendars', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-participant-booking-calendars', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-participant-booking-calendars', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-participant-booking-calendars', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedCalendars = this.setParticipants(this.selectedConfiguration?.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.selectedConfiguration?.participants, this.participantOptions);
        }
        else {
            this.selectedCalendars = this.setParticipants(this.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
        }
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-booking-')) {
            return;
        }
        if (!this.bookingCalendarsFormRef.checkValidity()) {
            this.internals.setValidity({ customError: true }, 'Please select at least one calendar for each participant.');
            return;
        }
        else {
            this.internals.setValidity({});
        }
        const key = name.split('participant-booking-')[1];
        if (!this.selectedCalendars[key])
            return;
        this.selectedCalendars[key]['calendar'] = value;
        this.selectedCalendars = { ...this.selectedCalendars };
        const participantsCalendars = {};
        Object.keys(this.selectedCalendars).forEach(key => {
            participantsCalendars[key] = this.selectedCalendars[key]?.calendar;
        });
        this.internals.setFormValue(JSON.stringify(participantsCalendars), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantsCalendars), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            if (participant?.booking?.calendar_id) {
                const isOpen = participant.is_organizer ? true : false;
                selectedParticipants[participant.email] = {
                    isOpen: isOpen,
                    calendar: participant.booking?.calendar_id || 'primary',
                    name: participant.name || participant.email,
                };
            }
        });
        return selectedParticipants;
    }
    render() {
        return (index$1.h(index$1.Host, { key: '66f4bc0dbff0da769a2be3f7b71f5379d31e6769' }, index$1.h("div", { key: '1a69ddfa00c013875f6132199e435721f876e2ea', class: "nylas-participant-booking-calendars", part: "npbc" }, index$1.h("div", { key: '9cf4ce2f4bd0a1de534c3973fd565ab5963f19c4', class: "header", part: "npbc__header" }, index$1.h("h3", { key: 'ee664665d3df068cfd050391d77d87df60e89ca7' }, utils.instance.t('nylasParticipantBookingCalendars.headerTitle')), index$1.h("p", { key: '8198b999d918f29c0d657e6c6c4d6a9d2eeb6344' }, utils.instance.t('nylasParticipantBookingCalendars.headerSubTitle'))), index$1.h("div", { key: '65f24555d0921877088eb5e836da2cde5f8f0e67', class: "content", part: "npbc__content" }, index$1.h("form", { key: '1facf3b632b9ef302b193c48ede7119496499a72', ref: el => (this.bookingCalendarsFormRef = el) }, this.participantCalendars &&
            Object.keys(this.participantCalendars).map((key, index) => {
                const participant = this.selectedCalendars[key];
                const participantCalendars = this.participantCalendars[key];
                if (!participant || !participant.name)
                    return;
                return (index$1.h("div", { class: "participant-container", part: "npbc__participant-container", key: `participant-conatiner-${index}` }, index$1.h("div", { class: "participant-title", part: "npbc__participant-title" }, index$1.h("p", null, utils.instance.t('nylasParticipantBookingCalendars.participantBookingCalendarTitle', { participantName: participant.name })), index$1.h("div", { class: "participant-toggle", part: "npbc__participant-toggle-container" }, index$1.h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'}`, onClick: () => {
                        this.selectedCalendars[key].isOpen = !participant.isOpen;
                        this.selectedCalendars = { ...this.selectedCalendars };
                    } }, index$1.h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (index$1.h("nylas-booking-calendar-picker", { key: key, name: `participant-booking-${key}`, calendars: participantCalendars, hideHeader: true, defaultBookingCalendar: this.participantDefaultSelectedCalendar[key] }))));
            }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "calendars": ["calendarsChangedHandler"],
        "participants": ["participantsChangedHandler"],
        "participantOptions": ["participantOptionsChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$5([
    registerComponent.RegisterComponent({
        name: 'nylas-participant-booking-calendars',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$5("design:type", Function),
    __metadata$5("design:paramtypes", []),
    __metadata$5("design:returntype", void 0)
], NylasParticipantBookingCalendars.prototype, "render", null);
NylasParticipantBookingCalendars.style = NylasParticipantBookingCalendarsStyle0;

const nylasParticipantsCustomAvailabilityCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-participants-custom-availability{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-participants-custom-availability .header{padding:1rem}.nylas-participants-custom-availability .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-participants-custom-availability .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-participants-custom-availability .content .participant-container{padding-top:8px;border-top:1px solid var(--nylas-base-200)}.nylas-participants-custom-availability .content .participant-container .participant-title{display:flex;justify-content:space-between;align-items:center;padding:4px 16px 12px}.nylas-participants-custom-availability .content .participant-container .participant-title p{margin:0}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle{display:flex;gap:24px;align-items:center}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron:hover,.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron:active{color:var(--nylas-primary)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.open{transform:rotate(90deg)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.closed{transform:rotate(270deg)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-participants-custom-availability .content .participant-container nylas-availability-picker::part(nap){margin:0;border:none}";
const NylasParticipantsCustomAvailabilityStyle0 = nylasParticipantsCustomAvailabilityCss;

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasParticipantsCustomAvailability = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'participant-custom-availability';
        this.participants = this.selectedConfiguration?.participants || [];
        this.selectedLanguage = undefined;
        this.selectedParticipants = this.setParticipants(this.participants);
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-participants-custom-availability', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    participantsChangedHandler(newValue, oldValue) {
        utils.debug('nylas-participants-custom-availability', 'participantsChangedHandler', newValue, oldValue);
        this.selectedParticipants = this.setParticipants(newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        utils.debug('nylas-participants-custom-availability', 'selectedConfigurationChangedHandler', newValue, oldValue);
        if (newValue?.participants) {
            this.selectedParticipants = this.setParticipants(newValue?.participants);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-participants-custom-availability', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-participants-custom-availability', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-participants-custom-availability', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-participants-custom-availability', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedParticipants = this.setParticipants(this.selectedConfiguration?.participants);
        }
        else {
            this.selectedParticipants = this.setParticipants(this.participants);
        }
    }
    nylasFormSwitchToggledHandler(event) {
        utils.debug('nylas-participants-custom-availability', 'nylasFormSwitchToggledHandler', event.detail);
        const existingParticipant = this.selectedConfiguration?.participants.find(participant => participant.email === event.detail.name);
        const existingOpenHours = existingParticipant?.availability?.open_hours;
        const openHours = existingOpenHours || this.selectedConfiguration?.availability?.availability_rules?.default_open_hours || [];
        const timeZone = existingOpenHours && existingOpenHours.length > 0
            ? existingParticipant?.timezone
            : this.selectedConfiguration?.availability?.availability_rules?.default_open_hours?.at(0)?.timezone ||
                this.selectedConfiguration?.event_booking?.timezone ||
                window.Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedParticipants[event.detail.name]['isOpen'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['setCustom'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['openHours'] = event.detail.checked ? (openHours?.length > 0 ? openHours : constants.DEFAULT_OPEN_HOURS) : [];
        this.selectedParticipants[event.detail.name]['timezone'] = event.detail.checked ? timeZone : undefined;
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-')) {
            return;
        }
        if (this.isInternalsAvailable) {
            if (!this.participantFormRef.checkValidity()) {
                this.internals.setValidity({ customError: true }, 'Please fix the overlapping time ranges.');
                return;
            }
            else {
                this.internals.setValidity({});
            }
        }
        const jsonValue = JSON.parse(value);
        const key = name.split('-')[2];
        if (!this.selectedParticipants[key])
            return;
        this.selectedParticipants[key]['openHours'] = jsonValue.openHours;
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    updateFormValue() {
        const participantOpenHours = {};
        const participants = this.selectedConfiguration?.participants || this.participants;
        participants.forEach(participant => {
            participantOpenHours[participant.email] = this.selectedParticipants[participant.email].openHours;
        });
        this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(participantOpenHours), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantOpenHours), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            selectedParticipants[participant.email] = {
                isOpen: false,
                setCustom: Boolean(participant.availability?.open_hours),
                openHours: participant.availability?.open_hours || [],
                name: participant.name || participant.email,
                availability: participant.availability,
                timezone: participant.timezone,
            };
        });
        return selectedParticipants;
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function' && typeof this.internals.setValidity === 'function';
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'ff6765c725b2c24a63e131ac7d4d52e0572c8f52' }, index$1.h("div", { key: 'dae18b83f3d342db5e3c058f9c782aa280811637', class: "nylas-participants-custom-availability", part: "npca" }, index$1.h("div", { key: 'a76dcaa11e0e2eb6b56aec6b58eb7c12d910e571', class: "header", part: "npca__header" }, index$1.h("h3", { key: 'd2c05942fca786c6ae06aa912dd81eb84607f27b' }, utils.instance.t('nylasParticipantCustomAvailability.headerTitle')), index$1.h("p", { key: '3d7b2e15f6e5c9a528886c5e3b8702bfee33a36e' }, utils.instance.t('nylasParticipantCustomAvailability.headerSubTitle'))), index$1.h("div", { key: '46520d59984a8dcea6e28fa72a0da64c6468b5ca', class: "content", part: "npca__content" }, index$1.h("form", { key: 'ce08bb8a25d1133ddfeb765c98088dbc3e3a2ec9', ref: el => (this.participantFormRef = el) }, Object.keys(this.selectedParticipants).map((key, index) => {
            const participant = this.selectedParticipants[key];
            const participantOpenHours = participant.availability?.open_hours || [];
            if (!participant || !participant.name || !participant.availability)
                return;
            return (index$1.h("div", { class: "participant-container", part: "npca__participant-container", key: `participant-conatiner-${index}` }, index$1.h("div", { class: "participant-title", part: "npca__participant-title" }, index$1.h("p", null, utils.instance.t('nylasParticipantCustomAvailability.participantOpenHoursTitle', { participantName: participant.name })), index$1.h("div", { class: "participant-toggle", part: "npca__participant-toggle--container" }, index$1.h("toggle-switch", { exportparts: "ts_label: npca__toggle-label, ts_input: npca_toggle-input, ts_slider: npca_toggle-slider", name: key, checked: !!participant?.openHours && participant?.openHours.length > 0 }), index$1.h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'} ${participant.setCustom ? '' : 'disabled'}`, onClick: () => {
                    if (!participant.setCustom)
                        return;
                    this.selectedParticipants[key].isOpen = !participant.isOpen;
                    this.selectedParticipants = { ...this.selectedParticipants };
                } }, index$1.h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (index$1.h("nylas-availability-picker", { key: index, name: `participant-${index}-${key}`, openHours: participantOpenHours, defaultTimezone: participant.timezone, hideHeader: true }))));
        }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "participants": ["participantsChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$4([
    registerComponent.RegisterComponent({
        name: 'nylas-participants-custom-availability',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", []),
    __metadata$4("design:returntype", void 0)
], NylasParticipantsCustomAvailability.prototype, "render", null);
NylasParticipantsCustomAvailability.style = NylasParticipantsCustomAvailabilityStyle0;

const nylasReminderEmailsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.cards-container{margin-bottom:4rem}.cards-container .nylas-reminder-email{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.cards-container .nylas-reminder-email .reminder-open-close-toggle{display:flex;gap:16px}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron{display:flex;align-self:center;cursor:pointer}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron:hover,.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron:active{color:var(--nylas-primary)}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron.open{transform:rotate(90deg)}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron.closed{transform:rotate(270deg)}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .reminder-open-close-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .header{padding:1rem;display:grid;grid-template-columns:1fr auto;border-bottom:1px solid var(--nylas-base-200)}.cards-container .nylas-reminder-email .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.cards-container .nylas-reminder-email .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .header .confirmation-email-toggle{display:flex;gap:24px;align-items:center}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron{display:flex;align-self:center;cursor:pointer}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron:hover,.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron:active{color:var(--nylas-primary)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.open{transform:rotate(90deg)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.closed{transform:rotate(270deg)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body{display:grid;grid-template-columns:1fr auto;background-color:var(--nylas-base-25);border-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body{grid-template-columns:1fr}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section{border:none}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__block{display:flex;flex-direction:column;gap:0.5rem;border-top:1px solid var(--nylas-base-200);padding-top:1rem;margin-top:0.5rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row{display:grid;grid-template-columns:1fr auto;align-items:center;gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row.full-width-col{grid-template-columns:1fr}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label{display:flex;align-items:center}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.required{color:var(--nylas-error, #cc4841)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.label-icon{margin-left:4px}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.label-icon tooltip-component{display:flex}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row p{margin:0.25rem 0 0 0;font-size:16px;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container{display:flex;gap:32px;width:100%}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .input-container{display:flex;flex-direction:column;flex:1}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .company-logo{display:flex;justify-content:center;align-items:center;width:200px;height:100px;border:var(--nylas-base-200) solid 1px;border-radius:var(--nylas-border-radius-2x);overflow:hidden;padding:10px}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .company-logo img{max-height:100%;max-width:100%;object-fit:contain;object-position:center}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row span.selected-value{font-weight:500}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection{display:flex;flex-direction:column;gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection .input-container{display:flex;flex-direction:column;gap:0.25rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection .input-container textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview{width:208px;background:var(--nylas-base-25);border-bottom-right-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview{width:inherit;border-bottom-left-radius:var(--nylas-border-radius-2x)}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview h4{font-size:14px;line-height:24px;color:var(--nylas-base-600);font-family:var(--nylas-font-family);font-weight:500;text-align:center;margin:0.75rem 0}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container{padding:0 2rem 1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot{background-color:transparent;border-top:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot.active{background-color:var(--nylas-base-100)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot:last-of-type{border-bottom:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .event-slot{background-color:var(--nylas-base-600);border-top:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body span.error-message{color:var(--nylas-error)}.cards-container .nylas-reminder-email .nylas-reminder-email__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__summary{padding:0.75rem 1rem;display:grid;grid-template-columns:auto 1fr;column-gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__summary p{margin:0;display:flex;align-items:center;column-gap:4px;font-size:0.875rem;font-weight:400;line-height:21px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__summary p span.summary-icon{display:flex;justify-content:center;min-width:20px}sp-divider{background-color:var(--nylas-base-200);height:1px;margin:0.25rem 0}button-component.create-reminder button{margin:1rem;width:calc(100% - 2rem)}button-component.delete-btn button{color:var(--nylas-error) !important}";
const NylasReminderEmailsStyle0 = nylasReminderEmailsCss;

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasReminderEmails = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventReminders = undefined;
        this.name = 'reminder-overrides';
        this.selectedLanguage = undefined;
        this.reminders = this.selectedConfiguration?.event_booking?.reminders ?? this.eventReminders ?? [];
        this.reminderErrors = {};
        this.participants = this.selectedConfiguration?.participants ?? [];
    }
    connectedCallback() {
        utils.debug('nylas-reminder-emails', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-reminder-emails', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-reminder-emails', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-reminder-emails', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.reminders = this.eventReminders ?? [];
            this.updateRemindersFormValue();
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-reminder-emails', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-reminder-emails', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-reminder-emails', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-reminder-emails', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-reminder-emails', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        utils.debug('nylas-reminder-emails', 'selectedConfigurationChangedHandler', newVal);
        this.reminders = newVal?.event_booking?.reminders ?? [];
        this.participants = newVal?.participants ?? [];
        this.updateRemindersFormValue();
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    handleValueChanged(event) {
        utils.debug('nylas-reminder-emails', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (name.startsWith('reminder-time-')) {
            const [_, reminderIndex] = name.split(/(\d+)/);
            const updatedReminders = [...this.reminders];
            updatedReminders[reminderIndex].minutes_before_event = parseInt(value);
            this.reminders = [...updatedReminders];
            this.updateRemindersFormValue();
        }
    }
    handleNylasFormDropdownChanged(event) {
        utils.debug('nylas-reminder-emails', 'handleNylasFormDropdownChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('recipient-')) {
            return;
        }
        const [_, reminderIndex] = name.split(/(\d+)/);
        const updatedReminders = [...this.reminders];
        updatedReminders[reminderIndex].recipient = value;
        this.reminders = [...updatedReminders];
        this.updateRemindersFormValue();
    }
    handleNylasFormInputChanged(event) {
        utils.debug('nylas-reminder-emails', 'handleNylasFormInputChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('reminder-subject-')) {
            return;
        }
        const [_, reminderIndex] = name.split(/(\d+)/);
        const updatedReminders = [...this.reminders];
        updatedReminders[reminderIndex].email_subject = value;
        this.reminders = [...updatedReminders];
        this.updateRemindersFormValue();
    }
    addReminder() {
        utils.debug('nylas-reminder-emails', 'addReminder');
        this.reminders = [
            ...this.reminders,
            {
                type: 'email',
                minutes_before_event: 30,
                editing: true,
                recipient: 'all',
            },
        ];
        this.updateRemindersFormValue();
    }
    deleteReminder(index) {
        this.reminders = this.reminders.filter((_, i) => i !== index).map(p => ({ ...p }));
        this.updateRemindersFormValue();
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    updateRemindersFormValue() {
        utils.debug('nylas-reminder-emails', 'updateRemindersFormValue');
        const eventReminders = this.reminders.map(reminder => {
            const rem = { ...reminder };
            rem?.editing && delete rem.editing;
            return rem;
        });
        this.valueChanged.emit({
            value: JSON.stringify(eventReminders),
            name: 'reminder-overrides',
        });
        this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(eventReminders), 'reminder-overrides');
    }
    formatReminderTime(reminderTime) {
        switch (true) {
            case reminderTime > 24 * 60:
                return `${reminderTime / 60 / 24} days`;
            case reminderTime === 24 * 60:
                return '1 day';
            case reminderTime > 90 || reminderTime === 60:
                return `${reminderTime / 60} hours`;
            default:
                return `${reminderTime} minute${reminderTime > 1 ? 's' : ''} `;
        }
    }
    render() {
        const organizerName = this.participants.find(p => p.is_organizer)?.name;
        const recipientOptions = [
            {
                label: utils.instance.t('nylasReminderEmails.recipientOptions', { context: 'all' }),
                value: 'all',
            },
            {
                label: utils.instance.t('nylasReminderEmails.recipientOptions', { context: 'guest' }),
                value: 'guest',
            },
            {
                label: utils.instance.t('nylasReminderEmails.recipientOptions', { context: 'host' }),
                value: 'host',
            },
        ];
        return (index$1.h(index$1.Host, { key: 'b0be143161728aa82e29124cd7daca684481362e' }, index$1.h("div", { key: '5d272b3d2016c20cd38dc0b3a5e488bec54d1fb6', class: "cards-container" }, this.reminders.map((reminder, index) => {
            return reminder.type !== 'webhook' ? (index$1.h("div", { class: "nylas-reminder-email", part: "nre" }, index$1.h("div", { class: "header", part: "nre__header" }, index$1.h("div", null, index$1.h("h3", null, utils.instance.t('nylasReminderEmails.headerTitle', { organizerName: organizerName ? ` with ${organizerName} ` : '' })), index$1.h("p", null, utils.instance.t('nylasReminderEmails.headerSubTitle'))), !reminder.editing ? (index$1.h("button-component", { variant: 'basic', key: `edit-${index} `, clickHandler: event => {
                    event.preventDefault();
                    reminder.editing = true;
                    this.reminders = [...this.reminders];
                } }, index$1.h("edit-icon", { width: "16", height: "16" }), utils.instance.t('nylasReminderEmails.editButtonText'))) : (index$1.h("div", { class: "reminder-open-close-toggle" }, index$1.h("button-component", { variant: 'basic', class: "delete-btn", tooltip: "Delete reminder", key: `delete -${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.deleteReminder(index);
                } }, index$1.h("trash-icon", { width: "16", height: "16" })), index$1.h("span", { class: `chevron ${reminder.editing ? 'open' : 'closed'}`, onClick: () => {
                    reminder.editing = !reminder.editing;
                    this.reminders = [...this.reminders];
                } }, index$1.h("chevron-icon", { width: "24", height: "24" }))))), reminder.editing ? (index$1.h("div", { class: "nylas-reminder-email__body", part: "nre__body" }, index$1.h("div", { class: "nylas-reminder-email__section" }, index$1.h("div", { class: "nylas-reminder-email__row" }, index$1.h("label", null, utils.instance.t('nylasReminderEmails.emailRecipients.label')), index$1.h("select-dropdown", { name: `recipient-${index}`, options: recipientOptions, defaultSelectedOption: recipientOptions.find(i => i.value === reminder.recipient) ?? recipientOptions[0], withSearch: false })), index$1.h("div", { class: "nylas-reminder-email__row" }, index$1.h("label", null, utils.instance.t('nylasReminderEmails.sendConfirmation.label'), index$1.h("span", { class: "label-icon" }, index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, utils.instance.t('nylasReminderEmails.sendConfirmation.tooltip.desc'))))), index$1.h("nylas-reminder-time", { name: `reminder-time-${index}`, eventReminderTimeMinutes: reminder.minutes_before_event, exportparts: "nrt, nrt__number-dropdown, nrt__number-dropdown-button, nrt__number-dropdown-content, nrt__period-dropdown, nrt__period-dropdown-button, nrt__period-dropdown-content, nrt__time-period-selector" })), index$1.h("div", { class: "nylas-reminder-email__block" }, index$1.h("label", null, utils.instance.t('nylasReminderEmails.emailSubject.label')), index$1.h("input-component", { name: `reminder-subject-${index}`, maxLength: 60, placeholder: utils.instance.t('nylasReminderEmails.emailSubject.placeholder', { organizerName: organizerName ? ` with ${organizerName}` : '' }), defaultValue: reminder?.email_subject || '' }))))) : (index$1.h("div", { class: "nylas-reminder-email__summary", part: "nre__summary" }, index$1.h("p", null, index$1.h("span", { class: "summary-icon" }, index$1.h("person-clipboard-icon", null)), recipientOptions.find(i => i.value === reminder.recipient)?.label), index$1.h("p", null, index$1.h("span", { class: "summary-icon" }, index$1.h("clock-icon", null)), this.formatReminderTime(reminder.minutes_before_event), " before the event"))))) : null;
        })), index$1.h("button-component", { key: '48bd0ab7e17afdbb185e41aa780218fcf18da0a2', class: "create-reminder", variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.addReminder();
            } }, index$1.h("plus-icon", { key: '3734f73c9916f80e2bbf771281c014ced6541fcd', width: "16", height: "16" }), utils.instance.t('nylasReminderEmails.newReminderButtonText'))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$3([
    registerComponent.RegisterComponent({
        name: 'nylas-reminder-emails',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", void 0)
], NylasReminderEmails.prototype, "render", null);
NylasReminderEmails.style = NylasReminderEmailsStyle0;

const nylasReminderTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-reminder-time{display:flex;flex-direction:column;gap:4px}.nylas-reminder-time label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-reminder-time label span.required{color:var(--nylas-error, #cc4841)}.nylas-reminder-time label span.label-icon{margin-left:4px}.nylas-reminder-time label span.label-icon tooltip-component{display:flex}.nylas-reminder-time__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-reminder-time__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:160px}.nylas-reminder-time__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-reminder-time__wrapper select-dropdown{width:100%}}.nylas-reminder-time__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";
const NylasReminderTimeStyle0 = nylasReminderTimeCss;

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasReminderTime = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'reminder-time';
        this.eventReminderTimeMinutes = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-reminder-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    eventReminderTimeMinutesChangedHandler(newValue, _oldValue) {
        utils.debug('nylas-reminder-time', 'eventReminderTimeMinutesChangedHandler', newValue);
        this.updateNumberAndPeriodFromMinutes(newValue);
        this.isInternalsAvailable && this.internals.setFormValue(newValue?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-reminder-time', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-reminder-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-reminder-time', 'componentDidLoad');
        this.updateNumberAndPeriodFromMinutes(this.eventReminderTimeMinutes || 30);
    }
    disconnectedCallback() {
        utils.debug('nylas-reminder-time', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: this.name });
        this.isInternalsAvailable && this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (index$1.h(index$1.Host, { key: '1938d2ad21925d6252edb8b8468a6acf38f48b5d' }, index$1.h("div", { key: '690085428071362f16eccd4607d95352a63f8ddb', class: "nylas-reminder-time", part: "nrt" }, index$1.h("div", { key: 'baf5110057c4771a82a2b53aef615c0acc334233', class: "nylas-reminder-time__wrapper" }, showTimePeriodSelector && (index$1.h("time-period-selector", { id: "limit-future-bookings", part: "nrt__time-period-selector", timePeriods: [utils.instance.t('timeDuration', { context: 'minute' }), utils.instance.t('timeDuration', { context: 'hour' }), utils.instance.t('timePeriod', { context: 'day' })], exportparts: "tps__number-dropdown: nrt__number-dropdown, tps__number-dropdown-button: nrt__number-dropdown-button, tps__number-dropdown-content: nrt__number-dropdown-content, tps__period-dropdown: nrt__period-dropdown, tps__period-dropdown-button: nrt__period-dropdown-button, tps__period-dropdown-content: nrt__period-dropdown-content", defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "eventReminderTimeMinutes": ["eventReminderTimeMinutesChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$2([
    registerComponent.RegisterComponent({
        name: 'nylas-reminder-time',
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata$2("design:type", Function),
    __metadata$2("design:paramtypes", []),
    __metadata$2("design:returntype", void 0)
], NylasReminderTime.prototype, "render", null);
NylasReminderTime.style = NylasReminderTimeStyle0;

const nylasSchedulingMethodCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-scheduling-method{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-scheduling-method .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-scheduling-method .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-scheduling-method .nylas-scheduling-method__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-scheduling-method .nylas-scheduling-method__dropdown span.nylas-scheduling-method__dropdown-label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800);margin:0.25rem 0 0 0;font-size:14px;font-weight:400;line-height:20px;text-align:left}.nylas-scheduling-method .nylas-scheduling-method__dropdown span.nylas-scheduling-method__dropdown-label tooltip-component{display:flex}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-scheduling-method .nylas-scheduling-method__dropdown input-component::part(ic__input){background:var(--nylas-base-50);outline:none;cursor:not-allowed}";
const NylasSchedulingMethodStyle0 = nylasSchedulingMethodCss;

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasSchedulingMethod = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'availability-method';
        this.participantOptions = undefined;
        this.readOnly = false;
        this.selectedLanguage = undefined;
        this.selectedBookingType = '';
    }
    connectedCallback() {
        utils.debug('nylas-scheduling-method', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-scheduling-method', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-scheduling-method', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-scheduling-method', 'componentDidLoad');
        const bookingtType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        if (bookingtType && typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(bookingtType, 'booking-calendar');
        }
        this.selectedBookingType = bookingtType || 'collective';
        this.valueChanged.emit({ value: this.selectedBookingType, name: this.name });
    }
    componentWillUpdate() {
        utils.debug('nylas-scheduling-method', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-scheduling-method', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-scheduling-method', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-scheduling-method', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-scheduling-method', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-scheduling-method', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            if (value) {
                this.selectedBookingType = value;
                this.internals.setFormValue(value, this.name);
            }
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const bookingTypeOptions = [
            { label: utils.instance.t('nylasSchedulingMethod.schedulingMethodOptions', { context: 'collective' }), value: 'collective' },
            { label: utils.instance.t('nylasSchedulingMethod.schedulingMethodOptions', { context: 'maxFairness' }), value: 'max-fairness' },
            { label: utils.instance.t('nylasSchedulingMethod.schedulingMethodOptions', { context: 'maxAvailability' }), value: 'max-availability' },
        ];
        const defaultBookingType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        const hasAdditionalParticipants = this.participantOptions &&
            this.participantOptions?.length > 0 &&
            !!this.participantOptions[0].email &&
            !!this.participantOptions[0].name &&
            !!this.participantOptions[0].calendars &&
            this.participantOptions[0].calendars.length > 0;
        if ((defaultBookingType || !hasAdditionalParticipants) && !this.readOnly) {
            return null;
        }
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "nylas-scheduling-method", part: "nsm" }, index$1.h("div", { class: "header", part: "nsm__header" }, index$1.h("h3", null, utils.instance.t('nylasSchedulingMethod.headerTitle'))), index$1.h("div", { class: "nylas-scheduling-method__dropdown" }, index$1.h("span", { class: "nylas-scheduling-method__dropdown-label" }, utils.instance.t('nylasSchedulingMethod.headerSubTitle'), index$1.h("tooltip-component", null, index$1.h("info-icon", { slot: "tooltip-icon" }), index$1.h("span", { slot: "tooltip-content" }, index$1.h("strong", null, utils.instance.t('nylasSchedulingMethod.tooltip.standard.label')), index$1.h("br", null), "- ", utils.instance.t('nylasSchedulingMethod.tooltip.standard.desc'), index$1.h("br", null), index$1.h("br", null), index$1.h("strong", null, utils.instance.t('nylasSchedulingMethod.tooltip.maxFairness.label')), index$1.h("br", null), "- ", utils.instance.t('nylasSchedulingMethod.tooltip.maxFairness.desc'), index$1.h("br", null), index$1.h("br", null), index$1.h("strong", null, utils.instance.t('nylasSchedulingMethod.tooltip.maxAvailability.label')), index$1.h("br", null), "- ", utils.instance.t('nylasSchedulingMethod.tooltip.maxAvailability.desc'), index$1.h("br", null)))), this.readOnly ? (index$1.h("input-component", { name: "availability-method-read-only", type: "text", exportparts: "ic__label: nsm__input-label, ic__input: nsm__input, ic__input_wrapper: nsm__input_wrapper", readOnly: true, defaultValue: bookingTypeOptions.find(cal => cal.value == defaultBookingType)?.label ?? bookingTypeOptions[0].label })) : (index$1.h("select-dropdown", { name: this.name, options: bookingTypeOptions, withSearch: false, exportparts: "sd_dropdown: nsm__dropdown, sd_dropdown-button: nsm__dropdown-button, sd_dropdown-content: nsm__dropdown-content", defaultSelectedOption: bookingTypeOptions.find(cal => cal.value == defaultBookingType) ?? bookingTypeOptions[0] }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate$1([
    registerComponent.RegisterComponent({
        name: 'nylas-scheduling-method',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        localPropsToProp: new Map([['additionalParticipants', 'participantOptions']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", []),
    __metadata$1("design:returntype", void 0)
], NylasSchedulingMethod.prototype, "render", null);
NylasSchedulingMethod.style = NylasSchedulingMethodStyle0;

const nylasTimeslotIntervalCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-timeslot-interval{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-timeslot-interval .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-timeslot-interval .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-timeslot-interval .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown span.label tooltip-component{display:flex}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown{margin-bottom:1.5rem}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-timeslot-interval .nylas-timeslot-interval__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";
const NylasTimeslotIntervalStyle0 = nylasTimeslotIntervalCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const defaultRoundToMinutes = 15;
const NylasTimeslotInterval = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.valueChanged = index$1.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'timeslot-picker';
        this.eventDurationMinutes = this.selectedConfiguration?.availability?.duration_minutes;
        this.selectedLanguage = undefined;
        this.internalEventDurationMinutes = undefined;
        this.selectedInterval = undefined;
        this.selectedRoundTo = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-timeslot-interval', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-timeslot-interval', 'selectedConfigurationChangedHandler', newValue);
        this.internalEventDurationMinutes = newValue?.availability?.duration_minutes ?? this.eventDurationMinutes ?? 30;
        const internalIntervalMinutes = newValue?.availability?.interval_minutes ?? this.internalEventDurationMinutes ?? 30;
        this.selectedInterval = newValue?.availability?.interval_minutes ?? internalIntervalMinutes ?? 10;
        const roundToMinutes = newValue?.availability?.round_to || null;
        this.selectedRoundTo = roundToMinutes && roundToMinutes === internalIntervalMinutes ? true : false;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-timeslot-interval', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-timeslot-interval', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-timeslot-interval', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-timeslot-interval', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.internalEventDurationMinutes = this.eventDurationMinutes ?? 30;
            const internalIntervalMinutes = this.internalEventDurationMinutes;
            this.selectedInterval = internalIntervalMinutes ?? 10;
            this.selectedRoundTo = false;
        }
        this.componentLoaded = true;
    }
    componentWillUpdate() {
        utils.debug('nylas-timeslot-interval', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-timeslot-interval', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-timeslot-interval', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-timeslot-interval', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-timeslot-interval', 'nylasFormDropdownChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'duration') {
            this.selectedInterval = this.internalEventDurationMinutes ?? 10;
        }
        else {
            this.selectedInterval = parseInt(event.detail.value);
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    nylasFormRadioChangedHandler(event) {
        utils.debug('nylas-timeslot-interval', 'nylasFormRadioChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'no-rounding') {
            this.selectedRoundTo = false;
        }
        else {
            this.selectedRoundTo = true;
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    render() {
        const intervalPreferenceOptions = [
            { value: 'duration', label: 'Length of the booking' },
            { value: '5', label: '5 mins' },
            { value: '10', label: '10 mins' },
            { value: '15', label: '15 mins' },
            { value: '20', label: '20 mins' },
            { value: '30', label: '30 mins' },
            { value: '45', label: '45 mins' },
            { value: '60', label: '60 mins' },
        ];
        const defaultSelectedInterval = typeof this.selectedInterval !== 'undefined'
            ? this.selectedInterval == this.internalEventDurationMinutes
                ? intervalPreferenceOptions[0]
                : intervalPreferenceOptions.find(op => op.value == this.selectedInterval.toString()) ?? intervalPreferenceOptions[0]
            : undefined;
        return (index$1.h(index$1.Host, { key: '6a6ef80a26f96539f3bd76f490e80e3b5b5ec732' }, index$1.h("div", { key: '4a9b1ca06115bf4545b055ad346bb4a089817118', class: "nylas-timeslot-interval", part: "nti" }, index$1.h("div", { key: '18f1512a34b383264fd3a97c21c18809b7526be3', class: "header", part: "nti__header" }, index$1.h("h3", { key: '432759c6caf4396b5af467441b2877e707f4e6d5' }, utils.instance.t('nylasTimeslotInterval.headerTitle'))), index$1.h("div", { key: '033ce3e6b214b3e708755274737cc0c3577f9842', class: "nylas-timeslot-interval__dropdown" }, index$1.h("span", { key: '907d5c81914918ce0997640f9b38f3c26ab0f297', class: "label", part: "nti__input-label" }, utils.instance.t('nylasTimeslotInterval.timeslotInterval.label')), defaultSelectedInterval?.label && (index$1.h("select-dropdown", { name: "interval-minutes", options: intervalPreferenceOptions, withSearch: false, exportparts: "sd_dropdown: nti__dropdown, sd_dropdown-button: nti__dropdown-button, sd_dropdown-content: nti__dropdown-content", defaultSelectedOption: defaultSelectedInterval })), index$1.h("span", { key: '1237ae4014d733f962bd0471e2b3d4811526dae9', slot: "label", class: "label", part: "nti__input-label" }, utils.instance.t('nylasTimeslotInterval.timeslotRounding.label'), index$1.h("tooltip-component", { key: '04216f6b0eb529abeb7f0ed28dba4153a5b8a526' }, index$1.h("info-icon", { key: '4011e72276a72537bb6f95fcbfe533be4e769d27', slot: "tooltip-icon" }), index$1.h("span", { key: '51129510ca1781dc2a25f9fd81bbdecbe01c9cd4', slot: "tooltip-content" }, utils.instance.t('nylasTimeslotInterval.timeslotRounding.tooltip.desc')))), this.componentLoaded && (index$1.h("radio-button-group", { name: "interval-preference", defaultSelectedValue: this.selectedRoundTo ? 'rounding' : 'no-rounding', options: [
                {
                    value: 'no-rounding',
                    label: utils.instance.t('nylasTimeslotInterval.timeslotRoundingOptions.noRounding.label'),
                    description: utils.instance.t('nylasTimeslotInterval.timeslotRoundingOptions.noRounding.desc'),
                },
                {
                    value: 'rounding',
                    label: utils.instance.t('nylasTimeslotInterval.timeslotRoundingOptions.rounding.label'),
                    description: utils.instance.t('nylasTimeslotInterval.timeslotRoundingOptions.rounding.desc'),
                },
            ] }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-timeslot-interval',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotInterval.prototype, "render", null);
NylasTimeslotInterval.style = NylasTimeslotIntervalStyle0;

const iconCss$4 = ".sc-paintbrush-fill-icon-h{display:flex}";
const PaintbrushFillIconStyle0 = iconCss$4;

const PaintbrushFillIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '13';
    }
    render() {
        return (index$1.h("svg", { key: 'c00baec0670c95269ad2f090f3c6f19a93f992db', width: "16", height: "17", viewBox: "-3 0 16 17", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '67150476ec8a2b7fcac658a426d76870c2a24b51', d: "M5 2.875V0.375H0.5C0.223858 0.375 0 0.598858 0 0.875V7.37585H10V0.875C10 0.598858 9.77614 0.375 9.5 0.375H8V3.87722C8 4.15337 7.77614 4.37722 7.5 4.37722C7.22386 4.37722 7 4.15337 7 3.87722V0.375H6V2.875C6 3.15114 5.77614 3.375 5.5 3.375C5.22386 3.375 5 3.15114 5 2.875ZM10 8.37585H0V9.37938C0 10.4839 0.895431 11.3794 2 11.3794H3.5V14.8767C3.5 15.7051 4.17157 16.3767 5 16.3767C5.82843 16.3767 6.5 15.7051 6.5 14.8767V11.3794H8C9.10457 11.3794 10 10.4839 10 9.37938V8.37585Z", fill: "currentColor" })));
    }
};
PaintbrushFillIcon.style = PaintbrushFillIconStyle0;

const iconCss$3 = ".sc-paintbrush-icon-h{display:flex}";
const PaintbrushIconStyle0 = iconCss$3;

const PaintbrushIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '16';
        this.height = '13';
    }
    render() {
        return (index$1.h("svg", { key: 'd1b4b244a8b106d20b6ecf546dc6736f2a260c89', width: "16", height: "16", viewBox: "-3 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '10b597ab42722cf3ac4e7d47e6e504dafada70c2', d: "M0.5 -0.000976562C0.223858 -0.000976562 0 0.222881 0 0.499023L1.90735e-05 9.00337C1.90735e-05 10.1079 0.89545 11.0034 2.00002 11.0034H3.00411V14.0007C3.00411 15.1053 3.89954 16.0007 5.00411 16.0007C6.10868 16.0007 7.00411 15.1053 7.00411 14.0007V11.0034H8.00002C9.10459 11.0034 10 10.1079 10 9.00337V7.50339L10 7.49897V0.499023C10 0.222881 9.77614 -0.000976562 9.5 -0.000976562H0.5ZM1.00002 8.00342H9.00002V9.00337C9.00002 9.55566 8.5523 10.0034 8.00002 10.0034H6.50411C6.22797 10.0034 6.00411 10.2272 6.00411 10.5034V14.0007C6.00411 14.553 5.5564 15.0007 5.00411 15.0007C4.45183 15.0007 4.00411 14.553 4.00411 14.0007V10.5034C4.00411 10.2272 3.78026 10.0034 3.50411 10.0034H2.00002C1.44773 10.0034 1.00002 9.55566 1.00002 9.00337V8.00342ZM9 7.00339H1V0.999023H5V2.49902C5 2.77517 5.22386 2.99902 5.5 2.99902C5.77614 2.99902 6 2.77517 6 2.49902V0.999023H7V3.50122C7 3.77736 7.22386 4.00122 7.5 4.00122C7.77614 4.00122 8 3.77736 8 3.50122V0.999023H9V7.00339Z", fill: "currentColor" })));
    }
};
PaintbrushIcon.style = PaintbrushIconStyle0;

const iconCss$2 = ".sc-people-icon-h{display:flex}";
const PeopleIconStyle0 = iconCss$2;

const PeopleIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '50ea9db5229f6e8c672fcc103f94edc9a84e1394', xmlns: "http://www.w3.org/2000/svg", width: this.width, height: this.height, fill: "none", viewBox: "0 0 20 20" }, index$1.h("path", { key: '002266b3361fc2fdca3edeb319e7cc112d882f52', fill: "currentColor", d: "M11 10a2 2 0 0 1 2 2v1.5c0 2.054-2.088 3.5-5.5 3.5S2 15.554 2 13.5V12a2 2 0 0 1 2-2h7Zm0 1H4a1 1 0 0 0-1 1v1.5C3 14.907 4.579 16 7.5 16c2.921 0 4.5-1.093 4.5-2.5V12a1 1 0 0 0-1-1Zm5-1a2 2 0 0 1 2 2v.5c0 2.089-1.568 3.5-4.5 3.5-.141 0-.28-.003-.414-.01.208-.242.382-.502.522-.781l.097-.213h.039C15.976 14.931 17 13.96 17 12.5V12a1 1 0 0 0-1-1h-2.171a3 3 0 0 0-.594-1H16ZM7.5 2a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7Zm7 2a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Zm-7-1a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm7 2a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Z" })));
    }
};
PeopleIcon.style = PeopleIconStyle0;

const iconCss$1 = ".sc-trash-icon-h{display:flex}";
const TrashIconStyle0 = iconCss$1;

const TrashIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '21';
    }
    render() {
        return (index$1.h("svg", { key: '8ae039082a2e896dafbb6e2cf02741cac38760bc', width: this.width, height: this.height, viewBox: "0 0 20 21", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '79e7dc705693fc18a431027efcfdc66b31dedf00', d: "M10 0.25C11.733 0.25 13.1492 1.60645 13.2449 3.31558L13.25 3.5H18.5C18.9142 3.5 19.25 3.83579 19.25 4.25C19.25 4.6297 18.9678 4.94349 18.6018 4.99315L18.5 5H17.704L16.4239 18.0192C16.2912 19.3683 15.1984 20.41 13.8626 20.4945L13.6871 20.5H6.31293C4.95734 20.5 3.81365 19.5145 3.59883 18.1934L3.57614 18.0192L2.295 5H1.5C1.1203 5 0.806509 4.71785 0.756847 4.35177L0.75 4.25C0.75 3.8703 1.03215 3.55651 1.39823 3.50685L1.5 3.5H6.75C6.75 1.70507 8.20507 0.25 10 0.25ZM16.197 5H3.802L5.06893 17.8724C5.12768 18.4696 5.60033 18.9343 6.18585 18.9936L6.31293 19H13.6871C14.2872 19 14.7959 18.5751 14.9123 17.9982L14.9311 17.8724L16.197 5ZM11.75 7.75C12.1297 7.75 12.4435 8.03215 12.4932 8.39823L12.5 8.5V15.5C12.5 15.9142 12.1642 16.25 11.75 16.25C11.3703 16.25 11.0565 15.9678 11.0068 15.6018L11 15.5V8.5C11 8.08579 11.3358 7.75 11.75 7.75ZM8.25 7.75C8.6297 7.75 8.94349 8.03215 8.99315 8.39823L9 8.5V15.5C9 15.9142 8.66421 16.25 8.25 16.25C7.8703 16.25 7.55651 15.9678 7.50685 15.6018L7.5 15.5V8.5C7.5 8.08579 7.83579 7.75 8.25 7.75ZM10 1.75C9.08183 1.75 8.32881 2.45711 8.2558 3.35647L8.25 3.5H11.75C11.75 2.5335 10.9665 1.75 10 1.75Z", fill: "currentColor" })));
    }
};
TrashIcon.style = TrashIconStyle0;

const iconCss = ".sc-zoom-icon-h{display:flex}";
const ZoomIconStyle0 = iconCss;

const ZoomIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.width = '20';
        this.height = '20';
    }
    render() {
        return (index$1.h("svg", { key: '9cdd00809a7f59332378e6edfde53fcf33368adc', width: this.width, height: this.height, fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index$1.h("path", { key: '801e7d871d9c5023867f9da0de44e3fbadd4d843', d: "M19.7495 6.85792C19.2077 3.4745 16.5255 0.792345 13.1421 0.250451C12.1175 0.0865155 11.0702 0 10 0C8.92992 0 7.88256 0.0865155 6.85797 0.250451C3.47453 0.792345 0.792373 3.4745 0.250478 6.85792C0.0865433 7.87796 0 8.92987 0 10C0 11.0701 0.0865433 12.1175 0.250478 13.1421C0.792373 16.5255 3.47453 19.2077 6.85797 19.7495C7.88256 19.9135 8.92992 20 10 20C11.0702 20 12.1175 19.9135 13.1421 19.7495C16.5255 19.2077 19.2077 16.5255 19.7495 13.1421C19.9135 12.122 20 11.0701 20 10C20 8.92987 19.9135 7.88251 19.7495 6.85792Z", fill: "url(#paint0_linear_22_6272)" }), index$1.h("path", { key: '46a2470f65a3c1d348f10afdb5fd88132f897722', d: "M12.154 12.1676C12.154 12.7596 11.6759 13.2377 11.0839 13.2377H6.42995C5.24598 13.2377 4.28516 12.2769 4.28516 11.0929V7.87794C4.28516 7.28596 4.76328 6.80786 5.35527 6.80786H10.0092C11.1932 6.80786 12.154 7.7687 12.154 8.95267V12.1676ZM14.8589 7.09475L13.2879 8.27412C13.0193 8.47448 12.8598 8.79324 12.8598 9.13022V10.9153C12.8598 11.2523 13.0193 11.5711 13.2879 11.7714L14.8589 12.9508C15.2141 13.2149 15.715 12.9645 15.715 12.5228V7.5228C15.715 7.08109 15.2096 6.83063 14.8589 7.09475Z", fill: "white" }), index$1.h("defs", { key: 'e9908cd247cab7c08b6a71817f6b6a750bf8da1b' }, index$1.h("linearGradient", { key: 'a503e8826a8362752270af549f0232ade8e16cc9', id: "paint0_linear_22_6272", x1: "10", y1: "19.9954", x2: "10", y2: "-0.00455379", gradientUnits: "userSpaceOnUse" }, index$1.h("stop", { key: 'b47d676236c2809cbd20043cf26e84daf70c9a3e', "stop-color": "#003FAE" }), index$1.h("stop", { key: '6c43235a400a832598cc67149880e91d551cee36', offset: "0.02", "stop-color": "#0142B7" }), index$1.h("stop", { key: '493a140ce98191a06422fce74e162f4d97a69dcc', offset: "0.09", "stop-color": "#044BD1" }), index$1.h("stop", { key: 'ddc028f462caec7b3d8e99b2bf521a65739b5356', offset: "0.16", "stop-color": "#0752E5" }), index$1.h("stop", { key: '88586d5357cce2e01841122079e6f868eda5d39f', offset: "0.24", "stop-color": "#0958F4" }), index$1.h("stop", { key: '3f3a859d95677787aa9bc637287c74a3287b53e8', offset: "0.34", "stop-color": "#0A5BFC" }), index$1.h("stop", { key: 'b5cb39242a0e48a5a78f70b02e4b72ed8ca130f7', offset: "0.5", "stop-color": "#0B5CFF" })))));
    }
};
ZoomIcon.style = ZoomIconStyle0;

exports.calendar_agenda_fill_icon = CalendarAgendaFillIcon;
exports.calendar_agenda_icon = CalendarAgendaIcon;
exports.calendar_info_icon = CalendarInfoIcon;
exports.calendar_patterns_icon = CalendarPatternsIcon;
exports.checkmark_icon = CheckmarkIcon;
exports.dragable_icon = DragableIcon;
exports.envelope_fill_icon = EnvelopeFillIcon;
exports.envelope_icon = EnvelopeIcon;
exports.eye_icon = EyeIcon;
exports.feedback_icon = FeedbackIcon;
exports.flow_icon = FlowIcon;
exports.google_meet_icon = GoogleMeetIcon$1;
exports.input_image_url = InputImageUrl;
exports.location_icon = LocationIcon;
exports.location_off_icon = LocationOffIcon;
exports.microsoft_teams_icon = GoogleMeetIcon;
exports.nylas_additional_participants = NylasAdditionalParticipants;
exports.nylas_availability_picker = NylasAvailabilityPicker;
exports.nylas_booking_calendar_picker = NylasBookingCalendarPicker;
exports.nylas_booking_confirmation_redirect = NylasBookingConfirmationRedirect;
exports.nylas_booking_confirmation_type = NylasBookingConfirmationType;
exports.nylas_booking_form_config = NylasBookingFormConfig;
exports.nylas_buffer_time = NylasBufferTime;
exports.nylas_calendar_picker = NylasCalendarPicker;
exports.nylas_cancellation_policy = NylasCancellationPolicy;
exports.nylas_confirmation_email = NylasConfirmationEmail;
exports.nylas_connected_calendars = NylasConnectedCalendars;
exports.nylas_custom_booking_flow = NylasCustomBookingFlow;
exports.nylas_custom_event_slug = NylasCustomEventSlug;
exports.nylas_customize_booking_settings = NylasCustomizeBookingSettings;
exports.nylas_event_description = NylasEventDescription;
exports.nylas_event_duration = NylasEventDuration;
exports.nylas_event_info = NylasEventInfo;
exports.nylas_event_limits = NylasEventLimits;
exports.nylas_event_location = NylasEventLocation;
exports.nylas_event_title = NylasEventTitle;
exports.nylas_feedback_form = NylasFeedbackForm;
exports.nylas_limit_future_bookings = NylasLimitFutureBookings;
exports.nylas_min_booking_notice = NylasMinBookingNotice;
exports.nylas_min_cancellation_notice = NylasMinCancellationNotice;
exports.nylas_page_name = NylasPageName;
exports.nylas_page_styling = NylasPageStyling;
exports.nylas_participant_booking_calendars = NylasParticipantBookingCalendars;
exports.nylas_participants_custom_availability = NylasParticipantsCustomAvailability;
exports.nylas_reminder_emails = NylasReminderEmails;
exports.nylas_reminder_time = NylasReminderTime;
exports.nylas_scheduling_method = NylasSchedulingMethod;
exports.nylas_timeslot_interval = NylasTimeslotInterval;
exports.paintbrush_fill_icon = PaintbrushFillIcon;
exports.paintbrush_icon = PaintbrushIcon;
exports.people_icon = PeopleIcon;
exports.trash_icon = TrashIcon;
exports.zoom_icon = ZoomIcon;

//# sourceMappingURL=calendar-agenda-fill-icon_53.cjs.entry.js.map