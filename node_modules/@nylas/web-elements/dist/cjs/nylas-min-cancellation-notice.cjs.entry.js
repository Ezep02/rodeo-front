'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');

const nylasMinCancellationNoticeCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-min-cancellation-notice{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-min-cancellation-notice{flex-direction:column;gap:0.5rem}}.nylas-min-cancellation-notice label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-min-cancellation-notice label span.label-icon{margin-left:4px}.nylas-min-cancellation-notice label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMinCancellationNotice = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'min-cancellation-notice';
        this.minCancellationNotice = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-min-cancellation-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minCancellationNotice = typeof newVal?.scheduler?.min_cancellation_notice !== 'undefined' ? newVal?.scheduler?.min_cancellation_notice : this.minCancellationNotice || 0;
        if (typeof minCancellationNotice === 'number') {
            this.updateNumberAndPeriodFromMinutes(minCancellationNotice);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(minCancellationNotice?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-min-cancellation-notice', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-min-cancellation-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-min-cancellation-notice', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromMinutes(this.minCancellationNotice || 0);
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-min-cancellation-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minCancellationNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes == 0) {
            number = 0;
            period = 'minute';
        }
        else if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (index.h(index.Host, { key: '0687dca4c2ef8c3dd4496e905d11e0f97f4726bf' }, index.h("div", { key: 'a0a371d43f9988479eb444feb8be4fc753311105', class: "nylas-min-cancellation-notice", part: "nmcn" }, index.h("label", { key: '0adcbf86ef15737302b2a4f76b7a8b1b1b94bb95' }, utils.instance.t('nylasMinCancellationNotice.headerTitle'), index.h("span", { key: '2e0981cf4b37e033acf00cba54c1dd0ad28b7477', class: "label-icon" }, index.h("tooltip-component", { key: '0e1c20968919ae6adacc170eab834cd48da74690' }, index.h("info-icon", { key: '59b638d661f41eac21035c3cee34d1d20990abdd', slot: "tooltip-icon" }), index.h("span", { key: 'ea7aee5f2b520bb54f312f39b807f0ffd065473b', slot: "tooltip-content" }, utils.instance.t('nylasMinCancellationNotice.tooltip.desc'))))), showTimePeriodSelector && (index.h("time-period-selector", { id: "min-cancellation-notice", exportparts: "tps__number-dropdown: nmcn__number-dropdown, tps__number-dropdown-button: nmcn__number-dropdown-button, tps__number-dropdown-content: nmcn__number-dropdown-content, tps__period-dropdown: nmcn__period-dropdown, tps__period-dropdown-button: nmcn__period-dropdown-button, tps__period-dropdown-content: nmcn__period-dropdown-content", timePeriods: [
                utils.instance.t('timeDuration', { context: 'minute' }),
                utils.instance.t('timeDuration', { context: 'hour' }),
                utils.instance.t('timePeriod', { context: 'day' }),
                utils.instance.t('timePeriod', { context: 'week' }),
            ], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-min-cancellation-notice',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMinCancellationNotice.prototype, "render", null);
NylasMinCancellationNotice.style = nylasMinCancellationNoticeCss;

exports.nylas_min_cancellation_notice = NylasMinCancellationNotice;

//# sourceMappingURL=nylas-min-cancellation-notice.cjs.entry.js.map