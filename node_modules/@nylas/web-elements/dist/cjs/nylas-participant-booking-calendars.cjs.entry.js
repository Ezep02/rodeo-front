'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');

const nylasParticipantBookingCalendarsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-participant-booking-calendars{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-participant-booking-calendars .header{padding:1rem}.nylas-participant-booking-calendars .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-participant-booking-calendars .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-participant-booking-calendars .content .participant-container{padding-top:12px;border-top:1px solid var(--nylas-base-200)}.nylas-participant-booking-calendars .content .participant-container .participant-title{display:flex;justify-content:space-between;align-items:center;padding:4px 16px 16px}.nylas-participant-booking-calendars .content .participant-container .participant-title p{margin:0}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle{display:flex;gap:24px;align-items:center}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron:hover,.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron:active{color:var(--nylas-primary)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.open{transform:rotate(90deg)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.closed{transform:rotate(270deg)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-participant-booking-calendars .content .participant-container .participant-title .participant-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}nylas-booking-calendar-picker::part(nbcp){margin:0;border:none;border-top:1px solid var(--nylas-base-200);border-top-right-radius:0;border-top-left-radius:0}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasParticipantBookingCalendars = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'participant-booking-calendars';
        this.participants = this.selectedConfiguration?.participants || [];
        this.calendars = undefined;
        this.participantOptions = undefined;
        this.selectedLanguage = undefined;
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = {};
        this.participantDefaultSelectedCalendar = {};
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    calendarsChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'calendarsChangedHandler', newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
    }
    participantsChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'participantsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(newValue, this.participantOptions);
    }
    participantOptionsChangedHandler(newValue) {
        utils.debug('nylas-calendar-picker', 'participantOptionsChangedHandler', newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-participant-booking-calendars', 'selectedConfigurationChangedHandler', newValue);
        const participants = newValue?.participants || this.participants;
        if (participants && participants.length > 0) {
            this.selectedCalendars = this.setParticipants(participants);
            this.participantCalendars = this.getParticipantCalendarOptions(participants, this.participantOptions);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    getParticipantCalendarOptions(addedParticipants, availableParticipantOptions) {
        const organizer = addedParticipants?.find(participant => participant.is_organizer);
        const participantCalendars = {};
        const showAdditionalParticipantBookingCalendars = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        if (availableParticipantOptions && showAdditionalParticipantBookingCalendars) {
            const participants = addedParticipants?.filter(participant => availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            const remainingParticipants = addedParticipants?.filter(participant => !availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            participants?.forEach(participant => {
                const participantOption = availableParticipantOptions?.find(participantOption => participantOption.email === participant.email);
                if (!participantOption)
                    return;
                this.participantDefaultSelectedCalendar[participant.email] = participant.booking?.calendar_id ?? 'primary';
                const calendars = participantOption.calendars ?? [];
                participantCalendars[participant.email] = calendars;
            });
            remainingParticipants?.forEach(participant => {
                if (participant?.booking?.calendar_id) {
                    participantCalendars[participant.email] = this.calendars ?? [{ id: 'primary', name: participant.email }];
                    this.participantDefaultSelectedCalendar[participant.email] = participant?.booking?.calendar_id ?? 'primary';
                }
            });
        }
        if (organizer) {
            participantCalendars[organizer.email] = this.calendars ?? [{ id: 'primary', name: organizer.email }];
            this.participantDefaultSelectedCalendar[organizer.email] = organizer?.booking?.calendar_id ?? 'primary';
        }
        return participantCalendars;
    }
    connectedCallback() {
        utils.debug('nylas-participant-booking-calendars', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-participant-booking-calendars', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-participant-booking-calendars', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-participant-booking-calendars', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedCalendars = this.setParticipants(this.selectedConfiguration?.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.selectedConfiguration?.participants, this.participantOptions);
        }
        else {
            this.selectedCalendars = this.setParticipants(this.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
        }
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-booking-')) {
            return;
        }
        if (!this.bookingCalendarsFormRef.checkValidity()) {
            this.internals.setValidity({ customError: true }, 'Please select at least one calendar for each participant.');
            return;
        }
        else {
            this.internals.setValidity({});
        }
        const key = name.split('participant-booking-')[1];
        if (!this.selectedCalendars[key])
            return;
        this.selectedCalendars[key]['calendar'] = value;
        this.selectedCalendars = { ...this.selectedCalendars };
        const participantsCalendars = {};
        Object.keys(this.selectedCalendars).forEach(key => {
            participantsCalendars[key] = this.selectedCalendars[key]?.calendar;
        });
        this.internals.setFormValue(JSON.stringify(participantsCalendars), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantsCalendars), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            if (participant?.booking?.calendar_id) {
                const isOpen = participant.is_organizer ? true : false;
                selectedParticipants[participant.email] = {
                    isOpen: isOpen,
                    calendar: participant.booking?.calendar_id || 'primary',
                    name: participant.name || participant.email,
                };
            }
        });
        return selectedParticipants;
    }
    render() {
        return (index.h(index.Host, { key: '66f4bc0dbff0da769a2be3f7b71f5379d31e6769' }, index.h("div", { key: '1a69ddfa00c013875f6132199e435721f876e2ea', class: "nylas-participant-booking-calendars", part: "npbc" }, index.h("div", { key: '9cf4ce2f4bd0a1de534c3973fd565ab5963f19c4', class: "header", part: "npbc__header" }, index.h("h3", { key: 'ee664665d3df068cfd050391d77d87df60e89ca7' }, utils.instance.t('nylasParticipantBookingCalendars.headerTitle')), index.h("p", { key: '8198b999d918f29c0d657e6c6c4d6a9d2eeb6344' }, utils.instance.t('nylasParticipantBookingCalendars.headerSubTitle'))), index.h("div", { key: '65f24555d0921877088eb5e836da2cde5f8f0e67', class: "content", part: "npbc__content" }, index.h("form", { key: '1facf3b632b9ef302b193c48ede7119496499a72', ref: el => (this.bookingCalendarsFormRef = el) }, this.participantCalendars &&
            Object.keys(this.participantCalendars).map((key, index$1) => {
                const participant = this.selectedCalendars[key];
                const participantCalendars = this.participantCalendars[key];
                if (!participant || !participant.name)
                    return;
                return (index.h("div", { class: "participant-container", part: "npbc__participant-container", key: `participant-conatiner-${index$1}` }, index.h("div", { class: "participant-title", part: "npbc__participant-title" }, index.h("p", null, utils.instance.t('nylasParticipantBookingCalendars.participantBookingCalendarTitle', { participantName: participant.name })), index.h("div", { class: "participant-toggle", part: "npbc__participant-toggle-container" }, index.h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'}`, onClick: () => {
                        this.selectedCalendars[key].isOpen = !participant.isOpen;
                        this.selectedCalendars = { ...this.selectedCalendars };
                    } }, index.h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (index.h("nylas-booking-calendar-picker", { key: key, name: `participant-booking-${key}`, calendars: participantCalendars, hideHeader: true, defaultBookingCalendar: this.participantDefaultSelectedCalendar[key] }))));
            }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "calendars": ["calendarsChangedHandler"],
        "participants": ["participantsChangedHandler"],
        "participantOptions": ["participantOptionsChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-participant-booking-calendars',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasParticipantBookingCalendars.prototype, "render", null);
NylasParticipantBookingCalendars.style = nylasParticipantBookingCalendarsCss;

exports.nylas_participant_booking_calendars = NylasParticipantBookingCalendars;

//# sourceMappingURL=nylas-participant-booking-calendars.cjs.entry.js.map