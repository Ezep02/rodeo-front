'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');

const nylasAdditionalParticipantsCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-additional-participants__title{color:var(--nylas-base-nylas-base-900-aaa, #101323);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-additional-participants__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-additional-participants__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-additional-participants__input_group{padding-top:8px;display:flex;flex-direction:column;gap:4px}.nylas-additional-participants__input_group label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:150%}.nylas-additional-participants__input_group label span.org-as-participant{width:max-content}.nylas-additional-participants__error{color:var(--nylas-error);font-size:14px;font-family:var(--nylas-font-family);font-weight:400;line-height:16px;margin:0;text-align:left}.nylas-additional-participants__input_wrapper{display:flex;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-300)}.nylas-additional-participants__input_wrapper.error{border-color:var(--nylas-error)}.nylas-additional-participants__input_wrapper button{padding:12px;border:none;border-left:1px solid var(--nylas-base-300);background:none;cursor:pointer}.nylas-additional-participants__input_wrapper button:hover,.nylas-additional-participants__input_wrapper button:active{color:var(--nylas-primary)}.nylas-additional-participants__input_wrapper_organizer{border:none}.nylas-additional-participants__input{flex:1;display:flex;justify-content:space-between}.nylas-additional-participants__input input{border:none;outline:none;background:none;width:100%}.nylas-additional-participants__input input-dropdown{width:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown){width:100%;height:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown-input){height:100%;border-radius:var(--nylas-border-radius-2x);border:none;border-top-right-radius:initial;border-bottom-right-radius:initial;padding-left:16px}.nylas-additional-participants__input input-component::part(ic__input){background:var(--nylas-base-50)}.nylas-additional-participants__input input-component::part(ic__label){font-size:14px}.nylas-additional-participants__input input-component div.required-input{display:flex;gap:4px}.nylas-additional-participants__input input-component div.required-input label{display:flex;gap:4px;align-items:center}.nylas-additional-participants__input input-component div.required-input label tooltip-component#organizer_participant_tooltip::part(tc__content){left:-84px}.nylas-additional-participants__add{padding:12px;display:flex;align-items:center;border:none;background:none;cursor:pointer}.nylas-additional-participants__add span{padding:0 8px;font-size:16px;font-style:normal;font-weight:500}.nylas-additional-participants__add:hover,.nylas-additional-participants__add:active{color:var(--nylas-primary)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasAdditionalParticipants = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'participants';
        this.selectedConfiguration = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.participantOptions = undefined;
        this.eventParticipants = undefined;
        this.selectedLanguage = undefined;
        this.participants = this.eventParticipants ?? [];
        this.participantErrors = {};
        this.includeOrganizerAsParticipant = true;
        this.isRoundRobinConfig = false;
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-additional-participants', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationAndCurrentUserChangedHandler(newValue, _oldValue, propName) {
        utils.debug('nylas-additional-participants', 'selectedConfigurationAndCurrentUserChangedHandler', newValue, this.currentUser);
        if (propName === 'selectedConfiguration') {
            this.updateState(newValue, this.currentUser);
        }
        else if (propName === 'currentUser') {
            this.updateState(this.selectedConfiguration, newValue);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-additional-participants', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-additional-participants', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-additional-participants', 'componentDidLoad');
        this.updateState(this.selectedConfiguration, this.currentUser);
    }
    disconnectedCallback() {
        utils.debug('nylas-additional-participants', 'disconnectedCallback');
    }
    updateState(selectedConfig, currentUser) {
        this.isRoundRobinConfig = selectedConfig?.availability?.availability_rules?.availability_method
            ? selectedConfig?.availability?.availability_rules?.availability_method !== 'collective'
            : false;
        this.participants = selectedConfig?.participants || [];
        this.includeOrganizerAsParticipant = this.isRoundRobinConfig && this.participants.find(p => p.email === currentUser?.email) ? true : false;
        this.updateOrganizerAsParticipant();
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function' && typeof this.internals.setValidity === 'function';
    }
    onInputOptionChanged(event) {
        utils.debug('nylas-additional-participants', 'onInputOptionChanged');
        const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        const index = event.detail.name;
        const participant = this.participantOptions?.find(participant => participant.email === event.detail.value);
        if (!participant && this.isRoundRobinConfig) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'For round robin configuration, participant should be selected from the dropdown.');
            this.participantErrors[index] = 'For round robin page, participant should be selected from the dropdown.';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else if (!participant && !EMAIL_REGEX.test(event.detail.value)) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please enter a valid email address');
            this.participantErrors[index] = 'Please enter a valid email address';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else {
            this.participantErrors[index] = '';
            this.participants[index].is_valid = true;
            this.isInternalsAvailable && this.internals.setValidity({});
        }
        this.participants[index].email = event.detail.value;
        this.participants[index].availability = participant && participant.calendars[0].id ? { calendar_ids: [participant.calendars[0].id] } : undefined;
        this.participants[index].booking = participant && this.isRoundRobinConfig && participant.calendars[0].id ? { calendar_id: participant.calendars[0].id } : undefined;
        this.participants[index].name = participant?.name || event.detail.value;
        this.participants = [...this.participants];
        this.updateFormValue();
    }
    updateOrganizerAsParticipant() {
        const findCurrentUserInParticipants = this.participants.find(p => p.email === this.currentUser?.email);
        if (this.isRoundRobinConfig && !findCurrentUserInParticipants && this.currentUser?.email) {
            const bookingCalendarDefault = this.currentUserCalendars?.find(calendar => calendar.is_primary)?.id || this.currentUserCalendars?.[0]?.id || 'primary';
            this.participants = [
                {
                    name: this.currentUser?.name,
                    email: this.currentUser?.email,
                    is_organizer: true,
                    availability: {
                        calendar_ids: [bookingCalendarDefault],
                    },
                    booking: {
                        calendar_id: bookingCalendarDefault,
                    },
                },
                ...this.participants,
            ];
        }
        this.updateFormValue();
    }
    addParticipant() {
        utils.debug('nylas-additional-participants', 'addParticipant');
        this.participants = [...this.participants, { name: '', email: '', is_organizer: false }];
        this.updateFormValue();
    }
    removeParticipant(index) {
        utils.debug('nylas-additional-participants', 'removeParticipant');
        this.participants = this.participants.filter((_, i) => i !== index);
        this.updateFormValue();
    }
    updateFormValue() {
        utils.debug('nylas-additional-participants', 'updateFormValue');
        const participants = this.isRoundRobinConfig ? (this.includeOrganizerAsParticipant ? this.participants : this.participants.filter(p => !p.is_organizer)) : this.participants;
        if (participants.length === 0) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please add at least one participant');
            this.error = 'Please add at least one participant';
        }
        else {
            this.isInternalsAvailable && this.internals.setValidity({});
            this.error = '';
            this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(participants), this.name);
            this.valueChanged.emit({ value: JSON.stringify(participants), name: this.name });
        }
    }
    getArrayDifference(array1, array2) {
        const filtered = array1.filter(participant1 => !array2.some(participant2 => participant1.email === participant2.email));
        return filtered.map(participant => {
            return { value: participant.email, label: participant.email };
        });
    }
    render() {
        return (index.h(index.Host, { key: 'ea4c8ab71ec5fc8b7b407a92e216a82cb07e5938', part: "nap" }, index.h("nylas-form-card", { key: '4356d11f502d22cb3d841cd51363cd870a39cca7' }, index.h("h3", { key: '71d104a4006bf51b0c3ad33bfcae977ec5205b01', slot: "header-title", class: "nylas-additional-participants__title", part: "nap__title" }, utils.instance.t('nylasAdditionalParticipants.headerTitle')), index.h("p", { key: 'a0f48316b69d2334970738bb0fd914edaf9349ec', slot: "header-subtitle", class: "nylas-additional-participants__subtitle", part: "nap__subtitle" }, utils.instance.t('nylasAdditionalParticipants.headerSubTitle')), index.h("div", { key: '51ee2ae0322c4e8ff25cbbffc3140607d2a4e6f7', slot: "content", class: "nylas-additional-participants__content" }, index.h("div", { key: 'fbb4fd7c67beb0255cdc68fd81ed01c13a7df435' }, this.participants.map((participant, index$1) => {
            return (index.h("div", { class: 'nylas-additional-participants__input_group', part: "nap__input_group" }, !participant.is_organizer && index.h("label", null, `${utils.instance.t('nylasAdditionalParticipants.participant')} ${index$1}`), index.h("div", { part: "nap__input_wrapper", class: {
                    'nylas-additional-participants__input_wrapper': true,
                    'nylas-additional-participants__input_wrapper_organizer': participant?.is_organizer === true,
                    'nylas-additional-participants__input_wrapper_invalid': participant.is_valid === false,
                    'error': participant.is_valid === false,
                } }, index.h("div", { class: { 'nylas-additional-participants__input': true, 'organizer': participant?.is_organizer === true }, part: "nap__input" }, participant.is_organizer ? (index.h("input-component", { class: 'label-input', name: `${index$1}`, key: index$1, label: utils.instance.t('nylasAdditionalParticipants.organizer'), required: false, readOnly: participant.is_organizer, defaultValue: participant.email }, this.isRoundRobinConfig && (index.h("div", { class: "required-input", slot: "additional-input" }, index.h("input", { type: "checkbox", name: `organizer_participant`, id: `organizer_participant`, onClick: () => {
                    this.includeOrganizerAsParticipant = !this.includeOrganizerAsParticipant;
                    this.updateFormValue();
                }, checked: this.includeOrganizerAsParticipant }), index.h("label", { htmlFor: `organizer_participant`, "aria-label": "Include as participant" }, index.h("span", { class: "org-as-participant", part: "nap__org-as-participant" }, utils.instance.t('nylasAdditionalParticipants.organizerAsParticipant')), index.h("tooltip-component", { id: "organizer_participant_tooltip" }, index.h("info-icon", { slot: "tooltip-icon" }), index.h("span", { slot: "tooltip-content" }, index.h("strong", null, utils.instance.t('nylasAdditionalParticipants.tooltip.includeOrganizer'), ":"), ' ', utils.instance.t('nylasAdditionalParticipants.tooltip.includeOrganizerDesc'), " ", index.h("br", null), index.h("strong", null, utils.instance.t('nylasAdditionalParticipants.tooltip.excludeOrganizer'), ":"), ' ', utils.instance.t('nylasAdditionalParticipants.tooltip.excludeOrganizerDesc')))))))) : (index.h("input-dropdown", { id: `${index$1}`, name: `${index$1}`, filterable: true, inputValue: participant.email, options: this.getArrayDifference(this.participantOptions || [], this.participants) })), !participant.is_organizer && (index.h("button", { onClick: () => this.removeParticipant(index$1), part: "nap__remove-participant" }, index.h("close-icon", null))))), !participant.is_valid && (index.h("p", { class: "nylas-additional-participants__error", part: "nap__error" }, this.participantErrors[index$1]))));
        }), index.h("p", { key: 'fb88e6a19e39f2d72167fb5b67109014a65a3d64', class: "nylas-additional-participants__error", part: "nap__error" }, this.error)), index.h("button", { key: '73b22041ab2ec94e051c262285ee72e4b5b7be1a', class: "nylas-additional-participants__add", part: "nap__add-participant", onClick: () => this.addParticipant() }, index.h("add-circle-icon", { key: '15bef3ca590565a885f0b7d80d825d073bdfd06f' }), ' ', index.h("span", { key: 'a805a79fca8e45ae974e634d344e21e5a816db3f' }, this.participants.length > 1
            ? utils.instance.t('nylasAdditionalParticipants.addParticipant', { context: 'next' })
            : utils.instance.t('nylasAdditionalParticipants.addParticipant', { context: 'first' })))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "currentUser": ["selectedConfigurationAndCurrentUserChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationAndCurrentUserChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-additional-participants',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasAdditionalParticipants.prototype, "render", null);
NylasAdditionalParticipants.style = nylasAdditionalParticipantsCss;

exports.nylas_additional_participants = NylasAdditionalParticipants;

//# sourceMappingURL=nylas-additional-participants.cjs.entry.js.map