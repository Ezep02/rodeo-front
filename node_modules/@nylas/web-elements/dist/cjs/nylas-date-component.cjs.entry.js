'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const utils = require('./utils-66843f0b.js');

const nylasDateComponentCss = ":host{display:block;height:auto;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:100%}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%;flex-direction:column;gap:4px;font-family:var(--nylas-font-family);font-size:16px;color:var(--nylas-base-800)}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}label p{margin:0}label .error{color:var(--nylas-error)}.input_wrapper{display:flex;align-items:center;gap:1rem}input[type=date]{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%;width:100%;width:-moz-available;width:-webkit-fill-available}input[type=date]:focus{outline-color:var(--nylas-primary)}input[type=date].error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}input[type=date].error::placeholder{font-weight:400}input[type=date]::placeholder{color:var(--nylas-base-300)}";

const DefaultPlaceholder = {
    date: 'YYYY-MM-DD',
};
const NylasDateComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.nylasFormInputChanged = index.createEvent(this, "nylasFormInputChanged", 7);
        this.nylasFormInputFocused = index.createEvent(this, "nylasFormInputFocused", 7);
        this.nylasFormInputBlurred = index.createEvent(this, "nylasFormInputBlurred", 7);
        this.name = 'input';
        this.defaultValue = undefined;
        this.label = '';
        this.placeholder = DefaultPlaceholder['date'];
        this.required = false;
        this.readOnly = false;
        this.autoFocus = false;
        this.pattern = undefined;
        this.maxLength = 255;
        this.patternError = '';
        this.requiredError = '';
        this.value = undefined;
        this.error = '';
        this.isDateValid = true;
    }
    handleDefaultValueChange(newValue) {
        this.value = utils.sanitize(newValue);
        if (this.value) {
            this.validatePattern(this.value);
        }
    }
    componentDidLoad() {
        this.value = utils.sanitize(this.defaultValue || '');
        if (this.value) {
            this.validatePattern(this.value);
        }
    }
    handleBookingFormSubmitted(event) {
        this.validatePattern(this.value);
        if (this.error) {
            event.preventDefault();
        }
    }
    async handleFormSubmitted(event) {
        this.validatePattern(this.value);
        if (this.error) {
            event.preventDefault();
        }
    }
    handleInput(e) {
        this.error = '';
        const target = e.target;
        this.value = utils.sanitize(target.value);
        this.isDateValid = target.validity.valid;
        this.nylasFormInputChanged.emit({
            value: this.value,
            name: this.name,
            label: this.label,
            error: this.error,
            type: 'date',
        });
    }
    handleBlur() {
        this.nylasFormInputBlurred.emit({
            value: this.value,
            name: this.name,
        });
    }
    handleFocus() {
        this.nylasFormInputFocused.emit({
            value: this.value,
            name: this.name,
        });
    }
    validatePattern(value) {
        this.error = '';
        if (this.required && !this.isDateValid) {
            this.error = 'Please enter a valid date';
            return;
        }
        if (this.required && !value) {
            this.error = this.requiredError || 'This field is required.';
            return;
        }
        if (!this.pattern || (!value && !this.required))
            return;
        if (this.pattern.test(value)) {
            this.error = '';
        }
        else {
            this.error = this.patternError || 'Invalid format.';
        }
    }
    render() {
        return (index.h("label", { key: '9af33d8d1bfe9ae6b5caa99f28fac36e98a2275e', part: "ic__label", class: { error: !!this.error } }, this.label && (index.h("p", null, index.h("span", { class: "label" }, this.label), this.required && index.h("span", { class: "required" }, "*"))), index.h("div", { key: 'a1ef7829a3411f8d10edcfb4cf7637c14c4e2fe8', part: "ic__input_wrapper", class: "input_wrapper" }, index.h("input", { key: '8ced975367fda28dd8ead5402c2829001149704c', type: "date", name: this.name, part: "ic__date", readOnly: this.readOnly, autoFocus: this.autoFocus, value: this.value, maxLength: this.maxLength, placeholder: this.placeholder, class: { error: !!this.error }, onInput: e => this.handleInput(e), onFocus: () => this.handleFocus(), onBlur: () => this.handleBlur() }), index.h("slot", { key: 'fbe36b28c751122364a9a14934a6d8f1a74f78d5', name: "additional-input" })), this.error && index.h("span", { class: "error help-text" }, this.error)));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "defaultValue": ["handleDefaultValueChange"]
    }; }
};
NylasDateComponent.style = nylasDateComponentCss;

exports.nylas_date_component = NylasDateComponent;

//# sourceMappingURL=nylas-date-component.cjs.entry.js.map