'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');
const constants = require('./constants-911e8b92.js');
const index$1 = require('./index-ddff1746.js');

var Tab;
(function (Tab) {
    Tab["EventInfo"] = "eventInfo";
    Tab["Availability"] = "availability";
    Tab["BookingOptions"] = "bookingOptions";
    Tab["Communications"] = "communications";
    Tab["Participants"] = "participants";
    Tab["BookingForm"] = "bookingForm";
    Tab["PageStyles"] = "pageStyles";
})(Tab || (Tab = {}));
function TabContents({ id, formState, activeTab, i18next }, children) {
    return (index.h(index.Fragment, null,
        index.h("div", { key: `event-info-${id}`, class: { hide: activeTab !== Tab.EventInfo } },
            index.h("nylas-event-info", null,
                index.h("div", { slot: "inputs" },
                    index.h("nylas-event-title", { name: "title", exportparts: "net, net__title, net__dropdown-content" }),
                    index.h("nylas-event-duration", { name: "duration", exportparts: "ned, ned__dropdown, ned__dropdown-button, ned__dropdown-content, ned__input_dropdown, ned__input_dropdown-input, ned__input_dropdown-content" }),
                    index.h("nylas-event-location", { name: "location", exportparts: "nel, nel__location, nel__dropdown, nel__dropdown-button, nel__dropdown-content" }),
                    index.h("nylas-event-description", { name: "description", exportparts: "nedesc, nedesc__textarea" })))),
        index.h("div", { key: `availability-${id}`, class: { hide: activeTab !== Tab.Availability } },
            index.h("nylas-participant-booking-calendars", { participants: formState.participants, name: "participant-booking-calendars", exportparts: 'npbc, npbc__header, npbc__content, npbc__participant-container, npbc__participant-title' }),
            index.h("nylas-connected-calendars", { participants: formState.participants, name: "connected-calendars", exportparts: 'nccals, nccals__header, nccals__content, nccals__container, nccals__title, nccals__toggle-container, npbc__participant-toggle-container' }),
            index.h("nylas-availability-picker", { name: "availability", exportparts: 'nap, nap__header, nap__select-timezone, nap__select-timezone-button, nap__select-timezone-dropdown-content, nap__availability, nap__day, nap__time-ranges, nap__time-range, nap__add-time-range, nap__time-picker-container, nap__time-picker-input, nap__time-picker-times' })),
        index.h("div", { key: `booking-options-${id}`, class: { hide: activeTab !== Tab.BookingOptions } },
            index.h("nylas-scheduling-method", { name: "availability-method", readOnly: true, exportparts: "nsm, nsm__header, nsm__input-label, nsm__dropdown, nsm__dropdown-button, nsm__dropdown-content" }),
            index.h("nylas-custom-booking-flow", { exportparts: 'ncbflow, ncbflow__header, ncbflow__title, ncbflow__content' },
                index.h("div", { slot: "inputs" },
                    index.h("nylas-booking-confirmation-type", { name: "confirmation-type", exportparts: 'nbct, nbct__header, nbct__dropdown, nbct__dropdown-button, nbct__dropdown-content' }),
                    index.h("nylas-booking-confirmation-redirect", { name: "confirmation-redirect", exportparts: 'nbcr, nbcr__header, nbcr__dropdown, nbcr__dropdown-button, nbcr__dropdown-content, nbcr__input-textfield' }))),
            index.h("nylas-buffer-time", { name: "buffer-time", exportparts: 'nbt, nbt__header, nbt__body, nbt__dropdown-before, nbt__dropdown-button-before, nbt__dropdown-content-before, nbt__dropdown-after, nbt__dropdown-button-after, nbt__dropdown-content-after, nbt__preview' }),
            index.h("nylas-event-limits", null,
                index.h("div", { slot: "inputs" },
                    index.h("nylas-min-booking-notice", { name: "min-booking-notice", exportparts: "nmbn, nmbn__number-dropdown, nmbn__number-dropdown-button, nmbn__number-dropdown-content, nmbn__period-dropdown, nmbn__period-dropdown-button, nmbn__period-dropdown-content" }),
                    index.h("nylas-limit-future-bookings", { name: "limit-future-bookings", exportparts: "nlfb, nlfb__number-dropdown, nlfb__number-dropdown-button, nlfb__number-dropdown-content, nlfb__period-dropdown, nlfb__period-dropdown-button, nlfb__period-dropdown-content" }),
                    index.h("nylas-min-cancellation-notice", { name: "min-cancellation-notice", exportparts: "nmcn, nmcn__number-dropdown, nmcn__number-dropdown-button, nmcn__number-dropdown-content, nmcn__period-dropdown, nmcn__period-dropdown-button, nmcn__period-dropdown-content" }),
                    index.h("nylas-cancellation-policy", { name: "cancellation-policy", exportparts: "ncpolicy, ncpolicy__textarea" }))),
            index.h("nylas-timeslot-interval", { name: "timeslot-interval", exportparts: "nti, nti__header, nti__input-label, nti__dropdown, nti__dropdown-button, nti__dropdown-content" }),
            index.h("nylas-customize-booking-settings", { name: "customize-booking-settings", exportparts: "ncbs, ncbs__header, ncbs__settings, ncbs__settings-div, ncbs__additional_guests, ncbs__cancellation_options, ncbs__rescheduling_options" })),
        index.h("div", { key: `communications-${id}`, class: { hide: activeTab !== Tab.Communications } },
            index.h("div", { class: "tab-header" },
                index.h("h3", null, i18next.t('eventCommunicationsTitle')),
                index.h("p", null, i18next.t('eventCommunicationsDescription'))),
            index.h("nylas-confirmation-email", { name: "confirmation-email-template", exportparts: 'nce, nce__tab-heading, nce__header, nce__body, nce__confirmation-email-toggle--container, nce__summary, nce__reminder-input_dropdown, nce__reminder-input_dropdown-input, nce__reminder-input_dropdown-content' }),
            index.h("nylas-reminder-emails", { name: "reminder-emails", exportparts: 'nre, nre__tab-heading, nre__header, nre__body, nre__confirmation-email-toggle--container, nre__summary, nrt, nrt__number-dropdown, nrt__number-dropdown-button, nrt__number-dropdown-content, nrt__period-dropdown, nrt__period-dropdown-button, nrt__period-dropdown-content, nrt__time-period-selector' })),
        index.h("div", { key: `participants-${id}`, class: { hide: activeTab !== Tab.Participants } },
            index.h("nylas-additional-participants", { name: "participants", exportparts: "nap, nap__title, nap__subtitle, nap__content, nap__input_group, nap__input_wrapper, nap__input, nap__remove-participant" }),
            index.h("nylas-participants-custom-availability", { participants: formState.participants, name: "participant-custom-availability", exportparts: "npca, npca__header, npca__content, npca__participant-container, npca__participant-title, npca__participant-toggle--container, npca__toggle-label, npca__toggle-input, npca__toggle-slider" })),
        index.h("div", { key: `page-styles-${id}`, class: { hide: activeTab !== Tab.PageStyles } },
            index.h("nylas-custom-event-slug", { name: "custom-event-slug", exportparts: "nces, nces__body, nces__header, nces__drawer-toggle--container, nces__input-textfield" }),
            index.h("nylas-page-name", { name: "page-name", exportparts: "npn, npn__body, npn__header, npn__drawer-toggle--container, npn__input-textfield" }),
            index.h("nylas-page-styling", { name: "page-styling", exportparts: "nps, nps__header, nps__drawer-toggle--container, nps__body, nps__title-input-textfield, nps__company-logo-input-textfield, nps__color-picker, nps__color-picker-button, nps__color-picker-button-label, nps__color-picker-selected-label, nps__submit-button-label-input-textfield, nps__message-textarea" }, children)),
        index.h("div", { key: `booking-form-${id}`, class: { hide: activeTab !== Tab.BookingForm } },
            index.h("nylas-booking-form-config", { name: "additional-fields", exportparts: "nbfc, nbfc__header, nbfc__add_field, nbfc__add_field-button, nbfc__add_field-content, nbfc__additional_fields, nbfc__form-field, nbfc__form-field-header, nbfc__form-field-content" }))));
}

const nylasEditorTabsCss = ".sc-nylas-editor-tabs-h{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.scheduler-editor.sc-nylas-editor-tabs{display:flex;flex-direction:column;height:inherit}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{height:calc(100% - 80px);display:grid;grid-template-columns:minmax(224px, 25%) 1fr}@media screen and (max-width: 768px){.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{display:table-column-group;height:auto}}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs{display:flex;flex-direction:column;border-right:1px solid var(--nylas-base-200);background-color:var(--nylas-base-25)}@media screen and (max-width: 768px){.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs{border-right:none}}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs{display:flex;align-items:center;text-align:left;gap:0.5rem;padding:0.5rem 1rem;color:var(--nylas-base-900);background:var(--nylas-base-0);border:none;height:56px;font-family:var(--nylas-font-family);font-size:16px;font-weight:500;line-height:24px;cursor:pointer}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs:not(:first-of-type){margin-top:0.25rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs:last-of-type{margin-bottom:0.25rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.active.sc-nylas-editor-tabs{font-weight:600;background:var(--nylas-base-0);color:var(--nylas-primary);border-left:4px solid var(--nylas-primary);box-shadow:0px 1px 2px 0px rgba(0, 0, 0, 0.0588235294);box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1019607843)}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.hide.sc-nylas-editor-tabs{display:none}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs{max-width:692px;overflow-y:auto;overflow-x:hidden}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .hide.sc-nylas-editor-tabs{display:none}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs{width:inherit}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs{display:flex;flex-direction:column;gap:1rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs{display:flex;flex-direction:column;margin:1rem 1rem 0.5rem;row-gap:4px}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs h3.sc-nylas-editor-tabs{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs p.sc-nylas-editor-tabs{margin:0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.footer.sc-nylas-editor-tabs{display:flex;justify-content:space-between;align-items:center;gap:1rem;min-height:80px;padding:0 1rem;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs{flex-direction:column;height:auto}}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .preview.sc-nylas-editor-tabs{margin-top:1rem;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{display:flex;justify-content:flex-end;align-items:center;justify-self:flex-end;gap:1rem}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{flex-direction:column-reverse;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.sc-nylas-editor-tabs{max-width:524px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.unsaved-changes.sc-nylas-editor-tabs{color:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.saved-changes.sc-nylas-editor-tabs{color:var(--nylas-success)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error.sc-nylas-editor-tabs{color:var(--nylas-error)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error-full-width.sc-nylas-editor-tabs{max-width:660px}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button-component.sc-nylas-editor-tabs{width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs{background:var(--nylas-primary);color:var(--nylas-base-0);height:48px;border:none;border-radius:var(--nylas-border-radius-2x);font-size:16px;line-height:24px;padding:0 1rem;cursor:pointer;width:148px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:hover{background:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:active{background:var(--nylas-base-800)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:disabled{background:var(--nylas-base-300);cursor:not-allowed}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs span.sc-nylas-editor-tabs{display:flex;align-items:center;justify-content:center;gap:0.5rem}button-component#report-issue.sc-nylas-editor-tabs{width:auto}nylas-feedback-form.sc-nylas-editor-tabs{position:absolute;top:0;height:100%;width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(0, 0, 0, 0.6);z-index:2;border-radius:inherit}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEditorTabs = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.schedulerConfigChanged = index.createEvent(this, "schedulerConfigChanged", 7);
        this.schedulerConfigCreated = index.createEvent(this, "schedulerConfigCreated", 7);
        this.cancelButtonClick = index.createEvent(this, "cancelButtonClick", 7);
        this.formSubmitted = index.createEvent(this, "formSubmitted", 7);
        this.previewButtonClicked = index.createEvent(this, "previewButtonClicked", 7);
        this.schedulerEditorFormUpdated = index.createEvent(this, "schedulerEditorFormUpdated", 7);
        this.formSubmissionHandler = async (event) => {
            event.preventDefault();
            const formEvent = await this.formSubmitted.emit();
            utils.debug('[nylas-editor-tabs]', 'formSubmissionHandler', formEvent);
            const valid = this.formRef.checkValidity();
            if (!valid || formEvent.defaultPrevented) {
                this.error = this.formRef.validationMessage || 'Please fix the form errors.';
                return;
            }
            this.isLoading = true;
            this.hasUnsavedChanges = false;
            const formState = this.updateFormState();
            utils.debug('[nylas-editor-tabs]', 'formState', formState);
            const { title, description, duration, availability, bookingCalendar, location, bookingType, buffer, availableDaysInFuture, minCancellationNotice, minBookingNotice, cancellationPolicy, timeslotInterval, additionalGuestsHidden, hideCancellationOptions, hideReschedulingOptions, participants, participantOpenHours, additionalFields, participantCalendars, conferencing, participantBookingCalendars, reminders, emailTemplate, redirectUrl, availabilityMethod, slug, appearance, name, } = formState;
            const organizer = this.selectedConfiguration?.participants?.find(p => p.is_organizer) || participants?.find(p => p.is_organizer);
            const organizerCalendars = participantCalendars && organizer?.email ? participantCalendars[organizer?.email] : [];
            const organizerBookingCalendar = organizer?.booking?.calendar_id || bookingCalendar;
            const durationMinutes = duration ? parseInt(duration) : 30;
            const participantsList = participants && participants?.length > 0
                ? participants
                : [
                    {
                        name: organizer?.name ?? this.currentUser?.name ?? '',
                        email: organizer?.email ?? this.currentUser?.email ?? '',
                        is_organizer: true,
                        timezone: availability?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                        availability: {
                            calendar_ids: bookingCalendar && bookingCalendar !== '' ? [bookingCalendar] : ['primary'],
                            open_hours: [],
                        },
                        booking: {
                            calendar_id: bookingCalendar && bookingCalendar !== '' ? bookingCalendar : 'primary',
                        },
                    },
                ];
            const configObject = {
                ...(this.selectedConfiguration?.id && { id: this.selectedConfiguration.id }),
                version: this.selectedConfiguration?.version ?? '1.0.0',
                slug: slug,
                name: name,
                availability: {
                    duration_minutes: durationMinutes,
                    interval_minutes: timeslotInterval?.interval ?? durationMinutes,
                    round_to: timeslotInterval?.roundTo,
                    availability_rules: {
                        availability_method: availabilityMethod ? availabilityMethod : this.selectedConfiguration?.availability?.availability_rules?.availability_method ?? 'collective',
                        buffer: buffer || { before: 0, after: 0 },
                        default_open_hours: availability?.openHours ?? this.selectedConfiguration?.availability?.availability_rules?.default_open_hours ?? constants.DEFAULT_OPEN_HOURS,
                        round_robin_group_id: this.selectedConfiguration?.availability?.availability_rules?.round_robin_group_id ?? '',
                    },
                },
                participants: [
                    ...(participantsList
                        ? participantsList.map(p => {
                            let timezone = availability?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone;
                            if (participantOpenHours?.[p.email]?.length) {
                                timezone = participantOpenHours?.[p.email]?.[0]?.timezone;
                            }
                            if (p.is_organizer) {
                                const orgPartBookingCalendar = participantBookingCalendars?.[p.email]
                                    ? participantBookingCalendars?.[p.email]
                                    : organizerBookingCalendar
                                        ? organizerBookingCalendar
                                        : 'primary';
                                const orgpartAvailabilityCalendars = participantCalendars?.[p.email]
                                    ? participantCalendars?.[p.email]
                                    : organizerCalendars?.length
                                        ? organizerCalendars
                                        : ['primary'];
                                const isPartAvailabilityCalendarsPrimaryOnly = orgpartAvailabilityCalendars.length === 1 && orgpartAvailabilityCalendars[0] === 'primary';
                                return {
                                    name: p.name ?? '',
                                    email: p.email,
                                    is_organizer: true,
                                    timezone,
                                    availability: {
                                        calendar_ids: isPartAvailabilityCalendarsPrimaryOnly ? [orgPartBookingCalendar] : orgpartAvailabilityCalendars,
                                        open_hours: participantOpenHours?.[p.email] ?? p.availability?.open_hours ?? [],
                                    },
                                    booking: {
                                        calendar_id: orgPartBookingCalendar,
                                    },
                                };
                            }
                            const partBooking = participantBookingCalendars?.[p.email] ? { calendar_id: participantBookingCalendars?.[p.email] } : p?.booking ?? undefined;
                            const partAvailabilityCalendars = participantCalendars?.[p.email] ?? p.availability?.calendar_ids ?? ['primary'];
                            const isPartAvailabilityCalendarsPrimaryOnly = partAvailabilityCalendars.length === 1 && partAvailabilityCalendars[0] === 'primary';
                            return {
                                ...p,
                                timezone,
                                availability: p.availability
                                    ? {
                                        calendar_ids: isPartAvailabilityCalendarsPrimaryOnly && typeof partBooking !== 'undefined' ? [partBooking?.calendar_id] : partAvailabilityCalendars,
                                        open_hours: participantOpenHours?.[p.email] ?? p.availability?.open_hours ?? [],
                                    }
                                    : undefined,
                                booking: partBooking,
                            };
                        })
                        : []),
                ],
                event_booking: {
                    title: title?.toString() ?? '',
                    description: description?.toString() ?? '',
                    location: location?.toString() ?? '',
                    booking_type: bookingType?.toString() ?? 'booking',
                    timezone: availability?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                    conferencing: conferencing,
                    reminders: reminders,
                },
                scheduler: {
                    cancellation_policy: cancellationPolicy ?? '',
                    available_days_in_future: availableDaysInFuture ?? 30,
                    min_cancellation_notice: minCancellationNotice ?? 0,
                    min_booking_notice: minBookingNotice ?? 60,
                    hide_additional_guests: additionalGuestsHidden ?? false,
                    hide_cancellation_options: hideCancellationOptions ?? false,
                    hide_rescheduling_options: hideReschedulingOptions ?? false,
                    additional_fields: additionalFields,
                    email_template: emailTemplate,
                    confirmation_redirect_url: redirectUrl,
                },
                appearance: appearance,
            };
            const configObjectWithDeveloperSettings = utils.mergeDeep(this.selectedConfiguration, configObject || {});
            const finalConfig = this.action === 'create' ? configObjectWithDeveloperSettings : configObject;
            if (this.isConfigRoundRobin(finalConfig)) {
                finalConfig.participants = finalConfig.participants.map(p => ({ ...p, is_organizer: undefined }));
            }
            const resetLoadingState = (_e) => {
                this.isLoading = false;
                this.changesSaved = true;
                setTimeout(() => {
                    this.changesSaved = false;
                }, 5000);
            };
            const hasBookingError = this.checkForBookingFormErrors(finalConfig);
            const currentConfig = this.configurations?.find(c => c.id === this.selectedConfiguration?.id) || {};
            const hasOrganizerConfirmationError = this.checkForOrganizerConfirmationError(utils.mergeDeep(finalConfig, currentConfig));
            if (hasBookingError || hasOrganizerConfirmationError) {
                return;
            }
            this.schedulerConfigChanged.emit({ config: finalConfig, resetLoadingState, action: this.action, host: this.host });
        };
        this.isConfigRoundRobin = (config) => {
            return config?.availability?.availability_rules?.availability_method === 'max-availability' || config.availability?.availability_rules?.availability_method === 'max-fairness';
        };
        this.checkForOrganizerConfirmationError = config => {
            let hasError = false;
            let errorMessage = '';
            const isOrganizerConfirmationType = config.event_booking?.booking_type === 'organizer-confirmation';
            const organizerConfirmationUrl = config.scheduler?.organizer_confirmation_url;
            if (isOrganizerConfirmationType && !organizerConfirmationUrl) {
                errorMessage += 'Organizer confirmation URL is required when using organizer confirmation booking type.';
                hasError = true;
            }
            if (hasError) {
                this.isLoading = false;
                this.host.setError(new Error(errorMessage));
            }
            return hasError;
        };
        this.checkForBookingFormErrors = config => {
            let hasError = false;
            let errorMessage = '';
            const additionalFields = config.scheduler?.additional_fields;
            if (additionalFields) {
                errorMessage = 'Booking form error: ';
                Object.entries(additionalFields).forEach(entry => {
                    const field = entry[1];
                    if (field.label === '') {
                        errorMessage += `Label is required for field of type ${field.type}.`;
                        hasError = true;
                        return;
                    }
                    if (field.options) {
                        for (const option of field.options) {
                            if (option.trim() === '') {
                                errorMessage += `Empty option detected inside ${field.label} of type ${field.type}.`;
                                hasError = true;
                                break;
                            }
                        }
                    }
                });
            }
            if (hasError) {
                this.isLoading = false;
                this.host.setError(new Error(errorMessage));
            }
            return hasError;
        };
        this.calendars = undefined;
        this.selectedConfiguration = undefined;
        this.configurations = undefined;
        this.currentUser = undefined;
        this.schedulerPreviewLink = '';
        this.mode = 'app';
        this.hideEditorTabs = [];
        this.enableUserFeedback = true;
        this.selectedLanguage = undefined;
        this.action = 'create';
        this.showFeedbackModal = false;
        this.activeTab = Tab.EventInfo;
        this.isLoading = false;
        this.hasUnsavedChanges = false;
        this.changesSaved = false;
        this.formState = {};
        this.error = '';
    }
    configChangedHandler(newConfig) {
        utils.debug('[nylas-editor-tabs]', 'configChangedHandler', newConfig, this.selectedConfiguration);
        this.formState = {
            ...this.getFormStateFromConfig(newConfig),
        };
        if (newConfig?.id) {
            this.action = 'edit';
        }
        else {
            this.action = 'create';
        }
    }
    userChangedHandler(newUser) {
        utils.debug('[nylas-editor-tabs]', 'userChangedHandler', newUser);
        if (newUser) {
            this.formState = {
                ...this.getFormStateFromConfig(this.selectedConfiguration),
            };
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    async schedulerConfigCreatedEventHandler(data) {
        const event = this.schedulerConfigCreated.emit(data);
        return event;
    }
    async setError(error) {
        this.error = error.message;
    }
    connectedCallback() {
        utils.debug('[nylas-editor-tabs]', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('[nylas-editor-tabs]', 'componentWillLoad');
        this.formState = this.getFormStateFromConfig(this.selectedConfiguration);
    }
    componentDidLoad() {
        utils.debug('[nylas-editor-tabs]', 'componentDidLoad');
        if (this.enableUserFeedback && !index$1.isInitialized()) {
            index$1.init({
                dsn: 'https://9d5731f1c77ca84c9ed3fb9b3ccf7ee1@o74852.ingest.us.sentry.io/4507889638178816',
                release: "1.3.4",
                integrations: integrations => [
                    ...integrations.filter(_integration => false),
                    index$1.feedbackSyncIntegration({
                        colorScheme: 'system',
                        autoInject: false,
                    }),
                ],
                autoSessionTracking: false,
                beforeSend: () => null,
            });
        }
        if (this.selectedConfiguration?.id) {
            this.configChangedHandler(this.selectedConfiguration);
        }
        const firstVisibleTab = this.host.querySelector('button.tab:not(.hide)')?.name;
        if (firstVisibleTab) {
            this.activeTab = firstVisibleTab;
        }
    }
    disconnectedCallback() {
        utils.debug('[nylas-editor-tabs]', 'disconnectedCallback');
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        this.setFormState(value, name);
        this.formState = { ...this.formState };
        this.hasUnsavedChanges = true;
        this.error = '';
        this.schedulerEditorFormUpdated.emit({
            value: event.detail.value,
            name: event.detail.name,
        });
    }
    feedbackModalClosedHandler() {
        this.showFeedbackModal = false;
    }
    feedbackSubmittedHandler(event) {
        const eventId = index$1.captureMessage('Scheduler Editor User Feedback');
        const feedback = {
            eventId: eventId,
            message: event.detail.feedback,
        };
        index$1.captureFeedback(feedback, {
            includeReplay: true,
            captureContext: {
                tags: {
                    'nylas-web-element': 'nylas-scheduler-editor',
                    'nylas-web-element-version': "1.3.4",
                },
                extra: {
                    configId: this.selectedConfiguration?.id,
                    slug: this.selectedConfiguration?.slug,
                },
            },
        });
        this.showFeedbackModal = false;
    }
    getFormStateFromConfig(config) {
        let organizerParticipant = config?.participants?.find(p => p.is_organizer);
        if (!organizerParticipant && config?.availability?.availability_rules?.availability_method !== 'collective') {
            organizerParticipant = config?.participants?.find(p => p.email === this.currentUser?.email);
            if (organizerParticipant) {
                organizerParticipant.is_organizer = true;
            }
        }
        if (config?.appearance) {
            console.info('Appearance settings have been returned from the given configuration; please remember to grab them from the configSettingsLoaded event and apply them as desired.');
        }
        return {
            title: config?.event_booking?.title ?? '',
            description: config?.event_booking?.description ?? '',
            duration: config?.availability?.duration_minutes?.toString() ?? '30',
            availability: {
                timezone: config?.event_booking?.timezone ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
                openHours: config?.availability?.availability_rules?.default_open_hours ?? constants.DEFAULT_OPEN_HOURS,
            },
            additionalFields: config?.scheduler?.additional_fields ?? {},
            conferencing: config?.event_booking?.conferencing ?? {},
            calendarIds: organizerParticipant?.availability?.calendar_ids ?? [],
            participants: config?.participants ?? [],
            bookingCalendar: organizerParticipant?.booking?.calendar_id ?? organizerParticipant?.email ?? '',
            location: config?.event_booking?.location ?? '',
            bookingType: config?.event_booking?.booking_type ?? 'booking',
            buffer: config?.availability?.availability_rules?.buffer ?? { before: 0, after: 0 },
            cancellationPolicy: config?.scheduler?.cancellation_policy ?? '',
            availableDaysInFuture: config?.scheduler?.available_days_in_future ?? 30,
            minCancellationNotice: config?.scheduler?.min_cancellation_notice ?? 0,
            minBookingNotice: config?.scheduler?.min_booking_notice ?? 60,
            timeslotInterval: {
                interval: config?.availability?.interval_minutes ?? config?.availability?.duration_minutes,
                roundTo: config?.availability?.round_to,
            },
            additionalGuestsHidden: config?.scheduler?.hide_additional_guests ?? false,
            hideCancellationOptions: config?.scheduler?.hide_cancellation_options ?? false,
            hideReschedulingOptions: config?.scheduler?.hide_rescheduling_options ?? false,
            participantBookingCalendars: config?.participants?.reduce((acc, p) => {
                if (p.booking?.calendar_id) {
                    acc[p.email] = p.booking?.calendar_id;
                }
                return acc;
            }) ?? {},
            participantCalendars: config?.participants?.reduce((acc, p) => {
                acc[p.email] = p.availability?.calendar_ids;
                return acc;
            }, {}) ?? {},
            reminders: config?.event_booking?.reminders,
            emailTemplate: config?.scheduler?.email_template,
            redirectUrl: config?.scheduler?.confirmation_redirect_url,
            slug: config?.slug,
            appearance: config?.appearance,
            name: config?.name,
        };
    }
    setFormState(value, key) {
        switch (key) {
            case 'title':
                this.formState.title = value.toString();
                break;
            case 'description':
                this.formState.description = value.toString();
                break;
            case 'duration':
                this.formState.duration = value.toString();
                break;
            case 'availability':
                this.formState.availability = JSON.parse(value.toString());
                break;
            case 'participants':
                this.formState.participants = JSON.parse(value.toString());
                break;
            case 'booking-calendar':
                this.formState.bookingCalendar = value.toString();
                break;
            case 'participant-booking-calendars':
                this.formState.participantBookingCalendars = JSON.parse(value.toString());
                break;
            case 'location':
                this.formState.location = value.toString();
                break;
            case 'conference':
                this.formState.conferencing = JSON.parse(value.toString());
                break;
            case 'confirmation-type':
                this.formState.bookingType = value.toString();
                break;
            case 'buffer-time':
                this.formState.buffer = JSON.parse(value.toString());
                break;
            case 'limit-future-bookings':
                this.formState.availableDaysInFuture = parseInt(value.toString());
                break;
            case 'min-cancellation-notice':
                this.formState.minCancellationNotice = parseInt(value.toString());
                break;
            case 'min-booking-notice':
                this.formState.minBookingNotice = parseInt(value.toString());
                break;
            case 'cancellation-policy':
                this.formState.cancellationPolicy = value.toString();
                break;
            case 'timeslot-interval':
                this.formState.timeslotInterval = JSON.parse(value.toString());
                break;
            case 'customize-booking-settings': {
                const settings = JSON.parse(value.toString());
                this.formState.additionalGuestsHidden = settings.additionalGuestsHidden;
                this.formState.hideCancellationOptions = settings.hideCancellationOptions;
                this.formState.hideReschedulingOptions = settings.hideReschedulingOptions;
                break;
            }
            case 'participant-custom-availability': {
                const participantOpenHours = JSON.parse(value.toString());
                this.formState.participantOpenHours = participantOpenHours;
                break;
            }
            case 'additional-fields':
                this.formState.additionalFields = value;
                break;
            case 'connected-calendars':
                this.formState.participantCalendars = JSON.parse(value.toString());
                break;
            case 'confirmation-email-template':
                this.formState.emailTemplate = JSON.parse(value.toString());
                break;
            case 'reminder-overrides':
                this.formState.reminders = JSON.parse(value.toString());
                break;
            case 'confirmation-redirect':
                this.formState.redirectUrl = value.toString();
                break;
            case 'availability-method':
                this.formState.availabilityMethod = value.toString();
                break;
            case 'custom-event-slug':
                console.debug('custom-event-slug', value);
                this.formState.slug = JSON.parse(value.toString());
                break;
            case 'page-styling':
                this.formState.appearance = JSON.parse(value.toString());
                break;
            case 'page-name':
                this.formState.name = JSON.parse(value.toString());
                break;
        }
        this.schedulerEditorFormUpdated.emit({
            value,
            name: key,
        });
    }
    updateFormState() {
        const formData = new FormData(this.formRef);
        formData.forEach((value, key) => {
            this.setFormState(value, key);
        });
        this.formState = { ...this.formState };
        return this.formState;
    }
    setActiveTab(e, tabName) {
        e.preventDefault();
        this.updateFormState();
        this.activeTab = tabName;
    }
    hideTab(tab) {
        return this.hideEditorTabs?.includes(tab) || false;
    }
    onFeedbackClick(e) {
        e.preventDefault();
        this.showFeedbackModal = true;
    }
    render() {
        utils.debug('[nylas-editor-tabs]', 'render', this.formState);
        return (index.h(index.Host, { key: 'afd735b73e35d8abfa9c83d21ab8307b07df48e6' }, index.h("form", { key: '7d7093deb88e6ec8e636092e4bcbadf03916a994', onSubmit: this.formSubmissionHandler, class: "scheduler-editor", ref: el => (this.formRef = el), noValidate: true }, this.mode === 'app' ? (index.h("div", { class: "form-contents", part: "editor__form-contents net__form-contents" }, index.h("div", { class: "tabs", part: "editor__tabs net__tabs" }, index.h("button", { name: Tab.EventInfo, class: { tab: true, active: this.activeTab == Tab.EventInfo, hide: this.hideTab(Tab.EventInfo) }, part: "editortab__event-info net__tab-event-info", onClick: e => this.setActiveTab(e, Tab.EventInfo) }, index.h("calendar-info-icon", { width: "16", height: "16" }), utils.instance.t('eventInfoTab')), index.h("button", { name: Tab.Availability, class: { tab: true, active: this.activeTab == Tab.Availability, hide: this.hideTab(Tab.Availability) }, part: "editortab__availability net__tab-availability", onClick: e => this.setActiveTab(e, Tab.Availability) }, index.h("calendar-patterns-icon", { width: "16", height: "16" }), utils.instance.t('availabilityTab')), index.h("button", { name: Tab.Participants, class: { tab: true, active: this.activeTab == Tab.Participants, hide: this.hideTab(Tab.Participants) }, part: "editortab__participants net__tab-participants", onClick: e => this.setActiveTab(e, Tab.Participants) }, index.h("people-icon", { width: "16", height: "16" }), utils.instance.t('participantsTab')), index.h("button", { name: Tab.BookingOptions, class: { tab: true, active: this.activeTab == Tab.BookingOptions, hide: this.hideTab(Tab.BookingOptions) }, part: "editortab__booking-options net__tab-booking-options", onClick: e => this.setActiveTab(e, Tab.BookingOptions) }, index.h("flow-icon", { width: "16", height: "16" }), utils.instance.t('bookingOptionsTab')), index.h("button", { name: Tab.BookingForm, class: { tab: true, active: this.activeTab == 'bookingForm', hide: this.hideTab(Tab.BookingForm) }, part: "editortab__booking-form net__tab-booking-form", onClick: e => this.setActiveTab(e, Tab.BookingForm) }, this.activeTab == Tab.BookingForm ? index.h("calendar-agenda-fill-icon", { width: "16", height: "16" }) : index.h("calendar-agenda-icon", { width: "16", height: "16" }), utils.instance.t('bookingFormTab')), index.h("button", { name: Tab.Communications, class: { tab: true, active: this.activeTab == 'communications', hide: this.hideTab(Tab.Communications) }, onClick: e => this.setActiveTab(e, Tab.Communications), part: "editortab__communications net__tab-communications" }, this.activeTab == Tab.Communications ? index.h("envelope-fill-icon", { width: "16", height: "16" }) : index.h("envelope-icon", { width: "16", height: "16" }), utils.instance.t('communicationsTab')), index.h("button", { name: Tab.PageStyles, class: { tab: true, active: this.activeTab == 'pageStyles', hide: this.hideTab(Tab.PageStyles) }, onClick: e => this.setActiveTab(e, Tab.PageStyles), part: "editortab__page-styles net__tab-page-styles" }, this.activeTab == Tab.PageStyles ? index.h("paintbrush-fill-icon", { width: "16", height: "16" }) : index.h("paintbrush-icon", { width: "16", height: "16" }), utils.instance.t('pageStylesTab'))), index.h("div", { class: "tab-content", part: "editor__tab-content net__tab-content" }, index.h(TabContents, { formState: this.formState, activeTab: this.activeTab, currentUser: this.currentUser, calendars: this.calendars, id: this.selectedConfiguration?.id ?? 'new', i18next: utils.instance })))) : (index.h("div", { class: "composable", key: this.selectedConfiguration?.id }, index.h("slot", null))), index.h("div", { key: 'd2d76b6b587c13a32dfc749f4fea4b47102923f0', class: "footer", part: "editor__footer net__footer" }, index.h("div", { key: '7714cacce55f8b8e06e60f289ef02fe8e336419c', class: "preview", part: "editor__footer-preview net__footer-preview" }, this.enableUserFeedback && (index.h("button-component", { title: "Share your feedback", id: "report-issue", variant: 'basic', onClick: e => this.onFeedbackClick(e) }, index.h("feedback-icon", null)))), index.h("div", { key: '54d1b26ae9e1ffc22fbe679e40ad0ec40f4df3fb', class: "buttons", part: "editor__footer-buttons net__footer-buttons" }, index.h("p", { key: 'e443a0cc63281f971bbdf7349e1adbb88abb42a9', class: {
                'unsaved-changes': this.hasUnsavedChanges && !this.changesSaved,
                'saved-changes': this.changesSaved,
                'error': this.error !== '',
                'error-full-width': this.error !== '' && this.action === 'create',
            } }, this.error !== '' ? this.error : '', this.error == '' && this.hasUnsavedChanges && !this.changesSaved ? 'Unsaved changes' : this.error == '' && this.changesSaved ? 'Changes saved!' : ''), this.schedulerPreviewLink !== '' && this.action === 'edit' && (index.h("button-component", { title: "Preview", type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                const previewEvent = this.previewButtonClicked.emit(this.host);
                if (!previewEvent.defaultPrevented) {
                    window.open(utils.parsePreviewLink(this.schedulerPreviewLink, this.selectedConfiguration), '_blank');
                }
            }, variant: 'basic' }, index.h("eye-icon", null))), index.h("button-component", { key: '057295595f302e2090a0136981a09546f6994c1c', type: "button", disabled: this.isLoading, clickHandler: event => {
                event.preventDefault();
                this.cancelButtonClick.emit();
                this.error = '';
            }, variant: 'basic', part: "editor__footer-cancel net__footer-cancel" }, utils.instance.t('backButton')), index.h("button-component", { key: '18ba294735d5754526a3634f5c7dc7dfd87d1679', type: "submit", disabled: this.isLoading, part: "editor__footer-cta, net__footer-cta" }, this.isLoading ? (index.h("span", null, utils.instance.t('savingButtonText'), index.h("loading-icon", null), ' ')) : this.action === 'create' ? (`${utils.instance.t('createButtonText')}`) : (`${utils.instance.t('saveChangesButtonText')}`))))), this.showFeedbackModal && index.h("nylas-feedback-form", null)));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "selectedConfiguration": ["configChangedHandler"],
        "currentUser": ["userChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-editor-tabs',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.configurations', 'configurations'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            schedulerConfigChanged: async (event, nylasSchedulerConfigConnector) => {
                const { resetLoadingState, host, action, config } = event.detail;
                const checkForErrors = (response) => {
                    const [data, error] = response;
                    if (!data && error) {
                        host.setError(error);
                    }
                    else if (data && !error && action === 'create') {
                        host.schedulerConfigCreatedEventHandler({ config: data });
                    }
                    if (resetLoadingState) {
                        resetLoadingState(event);
                    }
                };
                if (action === 'edit') {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.updateConfiguration(config);
                    checkForErrors(response);
                }
                else {
                    const response = await nylasSchedulerConfigConnector.schedulerConfig.createConfiguration(config);
                    checkForErrors(response);
                }
            },
            cancelButtonClick: async (_, nylasSchedulerConfigConnector) => {
                nylasSchedulerConfigConnector.schedulerConfigStore.state.action = null;
            },
            previewButtonClicked: async (_, nylasSchedulerConfigConnector) => {
                utils.debug('[nylas-editor-tabs]', 'previewButtonClicked', nylasSchedulerConfigConnector);
            },
            formSubmitted: async (_, nylasSchedulerConfigConnector) => {
                utils.debug('[nylas-editor-tabs]', 'formSubmitted', nylasSchedulerConfigConnector);
            },
            schedulerEditorFormUpdated: async (event, _nylasSchedulerConfigConnector) => {
                utils.debug('[nylas-editor-tabs]', 'schedulerEditorFormUpdated', event);
            },
            schedulerConfigCreated: async (event, _nylasSchedulerConfigConnector) => {
                utils.debug('[nylas-editor-tabs]', 'schedulerConfigCreated', event);
            },
        },
        localPropsToProp: new Map([
            ['schedulerPreviewLink', 'schedulerPreviewLink'],
            ['enableUserFeedback', 'enableUserFeedback'],
            ['hideEditorTabs', 'hideEditorTabs'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEditorTabs.prototype, "render", null);
NylasEditorTabs.style = nylasEditorTabsCss;

exports.nylas_editor_tabs = NylasEditorTabs;

//# sourceMappingURL=nylas-editor-tabs.cjs.entry.js.map