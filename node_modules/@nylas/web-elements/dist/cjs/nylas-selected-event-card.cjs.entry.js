'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');
const constants = require('./constants-911e8b92.js');

const nylasSelectedEventCardCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;display:block;position:relative;height:inherit;display:flex;flex-direction:column;justify-content:center;align-items:center;font-family:var(--nylas-font-family)}.event-card{display:flex;align-items:center;flex-direction:column;width:calc(100% - 3rem);background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:3rem 1.5rem 1.5rem 1.5rem;position:relative;box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card{margin-bottom:2rem}}.nylas-selected-event-card__date{font-size:min(max(16px, 3vw), 18px);font-weight:600}.nylas-selected-event-card__time{font-size:16px;font-weight:500}.calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}calendar-icon{display:flex;align-items:center;justify-content:center;height:100%}.event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:8px;gap:4px;align-items:center}@media screen and (max-width: 768px){.event-timezone{margin-bottom:16px}}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasSelectedEventCard = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.themeConfig = undefined;
        this.selectedDate = undefined;
        this.selectedTimeslot = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = undefined;
        this.startTime = '';
        this.endTime = '';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-selected-event-card] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-selected-event-card] Component did load`);
        if (!this.selectedDate) {
            console.warn('[nylas-selected-event-card] "selectedDate" prop is not provided.');
        }
        if (!this.selectedTimeslot) {
            console.warn('[nylas-selected-event-card] "selectedTimeslot" prop is not provided.');
        }
        this.applyThemeConfig(this.themeConfig);
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: this.selectedTimezone,
        });
        this.startTime = timeFormat.format(new Date(this.selectedTimeslot?.start_time));
        this.endTime = timeFormat.format(new Date(this.selectedTimeslot?.end_time));
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (index.h(index.Host, { key: 'e03c7985396173ef1d2bb0ba02ea88e958811a35', part: "nsec" }, index.h("div", { key: '017d6ce8fc92ef11070d94038e80095acbd90f29', class: "event-card", part: "nsec__card" }, index.h("div", { key: 'b475d6d8481d4e85a383822ed34139a2838a686c', class: "calendar-icon", part: "nsec__icon" }, index.h("calendar-icon", { key: '83df23c0d499b2932c84175c45c05bb589294f74' })), index.h("div", { key: 'e11fe3c83e6cf3fa926ec3b7e0e381625cb98b0f', class: "nylas-selected-event-card__date", part: "nsec__date" }, this.selectedDate
            ? utils.capitalizeFirstLetter(this.selectedDate?.toLocaleDateString(constants.LANGUAGE_CODE_MAP[this.selectedLanguage || navigator.language], { dateStyle: 'full', timeZone: this.selectedTimezone }))
            : '-'), index.h("div", { key: 'ed9773f2567782ab354ffe28fbbc365d3d2effa5', class: "nylas-selected-event-card__time", part: "nsec__time" }, this.startTime, " - ", this.endTime)), index.h("div", { key: '16389c36fe0ab7c55e5f71ab22ad8576dc509cae', class: "event-timezone", part: "nsec__timezone" }, index.h("globe-icon", { key: '2c6d9e03e0687a5912e1f674c08c19b6e612e90a' }), constants.TIMEZONE_MAP[this.selectedTimezone])));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-selected-event-card',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasSelectedEventCard.prototype, "render", null);
NylasSelectedEventCard.style = nylasSelectedEventCardCss;

exports.nylas_selected_event_card = NylasSelectedEventCard;

//# sourceMappingURL=nylas-selected-event-card.cjs.entry.js.map