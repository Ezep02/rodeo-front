'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');
const constants = require('./constants-911e8b92.js');

const nylasEventDescriptionCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-description{display:flex;flex-direction:column;gap:4px;position:relative}.nylas-event-description label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-description label span.label-icon{margin-left:4px}.nylas-event-description label span.label-icon tooltip-component{display:flex}.nylas-event-description textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-event-description textarea::-webkit-resizer{display:none}.nylas-event-description div.event-description{padding:12px 16px;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);white-space:nowrap;scrollbar-width:thin;min-height:50px;overflow-y:auto;white-space:pre-wrap;line-height:1.5;}.nylas-event-description div.event-description::-webkit-scrollbar{width:6px;height:6px}.nylas-event-description div.event-description.error{border-color:var(--nylas-error);border-width:2px;outline:none}.nylas-event-description span.help-text{display:inline-block;gap:4px;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:21px;position:relative}.nylas-event-description span.help-text span.label-icon{display:inline-block}.nylas-event-description span.help-text span.label-icon tooltip-component::part(tc__container){position:unset}.nylas-event-description span.help-text span.label-icon tooltip-component::part(tc__content){position:absolute;top:4px;left:50%;transform:translateX(-50%)}.nylas-event-description .highlighted-tag{background-color:var(--nylas-base-200);border-radius:var(--nylas-border-radius);padding:2px 5px;margin-left:4px;margin-bottom:4px;display:inline-block;vertical-align:baseline}.nylas-event-description .token-options{display:block;background-color:var(--nylas-base-0);width:100%;max-height:336px;margin-top:28px;overflow:auto;z-index:1;border-radius:4px;position:absolute;bottom:108px;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.0509803922);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1019607843)}@media screen and (max-width: 768px){.nylas-event-description .token-options{right:0;width:325px;max-width:unset}}.nylas-event-description .token-options ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px;margin:0}.nylas-event-description .token-options ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.nylas-event-description .token-options ul li .token-label{display:flex;flex-direction:column;font-weight:400}.nylas-event-description .token-options ul li .token-label .token{color:var(--nylas-abse-900);font-size:16px;line-height:24px}.nylas-event-description .token-options ul li .token-label .description{color:var(--nylas-base-600);font-size:14px;line-height:21px}.nylas-event-description .token-options ul li:hover,.nylas-event-description .token-options ul li:focus,.nylas-event-description .token-options ul li:active,.nylas-event-description .token-options ul li.active{background-color:var(--nylas-base-100)}.nylas-event-description .token-options ul li:hover .token-label .token,.nylas-event-description .token-options ul li:focus .token-label .token,.nylas-event-description .token-options ul li:active .token-label .token,.nylas-event-description .token-options ul li.active .token-label .token{color:var(--nylas-primary)}.nylas-event-description .token-options .selected{background-color:var(--nylas-base-100)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDescription = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventDescription = this.selectedConfiguration?.event_booking?.description;
        this.name = 'description';
        this.selectedLanguage = undefined;
        this.description = this.eventDescription || this.selectedConfiguration?.event_booking?.description || '';
        this.showTokens = false;
        this.availableTokens = constants.EVENT_TITLE_TOKENS.map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = this.availableTokens;
        this.ariaActivedescendant = '';
        this.currentWord = { $value: '', fullText: '', index: -1, focusOffset: -1 };
        this.validationError = '';
        this.additionalFieldTokens = [];
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-description', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const description = newValue?.event_booking?.description || '';
        const additionalFields = newValue?.scheduler?.additional_fields || {};
        const newKeys = Object.keys(additionalFields) || [];
        const newTokens = newKeys.map(key => {
            return {
                token: `\$${key}`,
                value: `\${${key}}`,
                description: additionalFields[key].label || '',
            };
        });
        this.additionalFieldTokens = [...newTokens];
        this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
            label: token.token,
            value: token.value,
            labelHTML: token,
        }));
        this.filteredTokens = [...this.availableTokens];
        this.description = description;
        if (description) {
            this.updateEventDescriptionFromProp(description);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('nylas-event-description', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-description', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-description', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.description = this.eventDescription || '';
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-event-description', 'disconnectedCallback');
    }
    valueChangedHandler(event) {
        const { name, value } = event.detail;
        const additionalFields = value || {};
        if (name === 'additional-fields') {
            const newKeys = Object.keys(additionalFields) || [];
            const newTokens = newKeys.map(key => {
                return {
                    token: `\$${key}`,
                    value: `\${${key}}`,
                    description: additionalFields[key].label || '',
                };
            });
            this.additionalFieldTokens = [...newTokens];
            this.availableTokens = [...constants.EVENT_TITLE_TOKENS, ...newTokens].map(token => ({
                label: token.token,
                value: token.value,
                labelHTML: token,
            }));
            this.filteredTokens = [...this.availableTokens];
        }
    }
    updateEventDescriptionFromProp(newValue) {
        utils.debug('nylas-event-description', 'updateEventDescriptionFromProp', newValue);
        const description = newValue || this.description;
        if (this.descriptionRef) {
            this.descriptionRef.innerHTML = this.highlightTokens(description);
        }
    }
    highlightTokens(description) {
        let outputHtml = description;
        [...constants.EVENT_TITLE_TOKENS, ...this.additionalFieldTokens].forEach(tokenObj => {
            const token = tokenObj.value;
            const regex = new RegExp(`(\\${token})(?!\\w)`, 'g');
            outputHtml = outputHtml?.replace(regex, '<span class="highlighted-tag">$1</span>') || '';
        });
        return outputHtml;
    }
    getCurrentSelectionForBrowser() {
        const getSelectionTextData = (nodeValue, offset, node, allSelected) => {
            const text = nodeValue.replace(/[\u200B-\u200D\uFEFF]/g, '');
            const dollarIndex = text.lastIndexOf('$');
            const lastWord = text.substring(dollarIndex).split(' ')[0];
            return {
                focusOffset: offset,
                dollarIndex,
                lastWord,
                currentText: text,
                node,
                allSelected,
            };
        };
        const isAllSelected = (selection) => selection.anchorOffset === 0 && selection.focusOffset === selection.focusNode?.nodeValue?.length;
        const currentBrowser = utils.getBrowser();
        switch (currentBrowser) {
            case 'Chrome':
                const shadowRootSelection = this.host.shadowRoot?.getSelection();
                const focusNode = shadowRootSelection?.focusNode;
                const focusNodeValue = focusNode?.nodeValue || '';
                const allSelected = shadowRootSelection && isAllSelected(shadowRootSelection);
                return getSelectionTextData(focusNodeValue, shadowRootSelection?.focusOffset || -1, focusNode, allSelected);
            case 'Firefox':
                const selection = document.getSelection();
                const anchorNodeValue = selection?.anchorNode?.nodeValue || '';
                const allSelectedFirefox = selection && isAllSelected(selection);
                return getSelectionTextData(anchorNodeValue, selection?.focusOffset || -1, selection?.anchorNode, allSelectedFirefox);
            case 'Safari':
                const windowSelection = window.getSelection();
                const anchorNode = windowSelection?.getComposedRanges(this.host.shadowRoot)[0];
                const currentText = anchorNode?.startContainer?.nodeValue || '';
                const allSelectedSafari = windowSelection && isAllSelected(windowSelection);
                return getSelectionTextData(currentText, anchorNode?.endOffset || -1, anchorNode?.startContainer, allSelectedSafari);
            default:
                console.warn('Browser not supported');
                return null;
        }
    }
    handleChange(event) {
        let textContent = event.target.textContent || '';
        textContent = utils.sanitize(textContent);
        const currentSelection = this.getCurrentSelectionForBrowser();
        if (!currentSelection) {
            this.updateEventDescription(textContent);
            this.resetDropdown();
            return;
        }
        const { focusOffset, dollarIndex, lastWord, currentText } = currentSelection;
        if (dollarIndex === -1 || focusOffset < dollarIndex) {
            this.updateEventDescription(textContent);
            this.resetDropdown();
            return;
        }
        if (lastWord.startsWith('$')) {
            this.showTokens = true;
            this.currentWord = {
                $value: lastWord,
                fullText: currentText,
                index: dollarIndex,
                focusOffset,
            };
            this.populateSuggestionsDropdown(lastWord);
        }
        else {
            this.resetDropdown();
        }
        this.updateEventDescription(textContent);
    }
    handleInputKeyDown(event) {
        const selection = this.getCurrentSelectionForBrowser();
        if (selection?.allSelected && !utils.isNonPrintableKey(event)) {
            this.descriptionRef.innerHTML = '';
        }
        if (event.key === 'Enter') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                activeOption.click();
                this.ariaActivedescendant = '';
            }
        }
        else if (event.key === 'ArrowDown') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const nextOption = activeOption.nextElementSibling;
                if (nextOption) {
                    this.ariaActivedescendant = nextOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[0].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[0].label;
            }
        }
        else if (event.key === 'ArrowUp') {
            event.preventDefault();
            const activeOption = this.host.shadowRoot?.getElementById(this.ariaActivedescendant);
            if (activeOption) {
                const prevOption = activeOption.previousElementSibling;
                if (prevOption) {
                    this.ariaActivedescendant = prevOption.id;
                }
                else {
                    this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
                }
            }
            else {
                this.ariaActivedescendant = this.filteredTokens[this.filteredTokens.length - 1].label;
            }
        }
        else if (event.key === 'Escape') {
            event.preventDefault();
            this.resetDropdown();
        }
        else if (event.key === 'Backspace' || event.key === 'Delete') {
            const parentNode = selection?.node?.parentNode;
            if (selection?.currentText.startsWith('${') && parentNode && parentNode.nodeName === 'SPAN') {
                event.preventDefault();
                parentNode.removeChild(selection.node);
                parentNode.remove();
                this.resetDropdown();
            }
            if (this.descriptionRef.textContent === '' || selection?.allSelected) {
                this.descriptionRef.innerHTML = '';
                this.updateEventDescription('');
            }
        }
    }
    selectOption(e, option) {
        e.preventDefault();
        const word = this.currentWord.fullText;
        const dollarWord = this.currentWord.$value;
        let currentNode = this.descriptionRef.firstChild;
        let textNode = null;
        while (currentNode) {
            if (currentNode.nodeType === 3) {
                const currentNodeText = currentNode.textContent?.replace(/[\u200B-\u200D\uFEFF]/g, '') || '';
                const wordText = word.replace(/[\u200B-\u200D\uFEFF]/g, '');
                if (currentNodeText.includes(wordText)) {
                    textNode = currentNode;
                    break;
                }
            }
            currentNode = currentNode.nextSibling;
        }
        if (!textNode) {
            return;
        }
        const text = textNode.textContent || '';
        const index = text.indexOf(dollarWord);
        const textBefore = text.substring(0, index);
        const textAfter = text.substring(index + dollarWord.length);
        const newTextNode = document.createTextNode(textBefore);
        const newRange = document.createRange();
        const tagSpan = document.createElement('span');
        tagSpan.classList.add('highlighted-tag');
        tagSpan.textContent = `${option.value}`;
        const newTextNodeAfter = document.createTextNode(textAfter);
        if (textAfter !== '') {
            textNode.replaceWith(newTextNode, tagSpan, newTextNodeAfter);
            newRange.setStart(newTextNodeAfter, 1);
        }
        else {
            const afterNode = document.createTextNode('\u200B');
            textNode.replaceWith(newTextNode, tagSpan, afterNode);
            newRange.setStart(afterNode, 1);
        }
        this.resetDropdown();
        this.descriptionRef.focus();
        const sel = window.getSelection();
        newRange.collapse(true);
        sel?.removeAllRanges();
        sel?.addRange(newRange);
        this.updateEventDescription(this.descriptionRef.textContent || '');
    }
    populateSuggestionsDropdown(query = '') {
        this.filteredTokens = this.availableTokens.filter(obj => {
            return obj.label.startsWith(query.toString()) || obj.value.startsWith(query.toString());
        });
        if (this.filteredTokens.length > 0) {
            this.ariaActivedescendant = this.filteredTokens[0].label;
        }
    }
    get isInternalsAvailable() {
        return typeof this.internals !== 'undefined' && typeof this.internals.setValidity === 'function' && typeof this.internals.setFormValue === 'function';
    }
    updateEventDescription(text) {
        const value = text.replace(/ +/g, ' ');
        this.isInternalsAvailable && this.internals?.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    resetDropdown() {
        this.showTokens = false;
        this.ariaActivedescendant = '';
    }
    getLabelHTML(token) {
        return (index.h("div", { class: "token-label" }, index.h("span", { class: "token" }, token.token), index.h("span", { class: "description" }, token.description)));
    }
    render() {
        return (index.h(index.Host, { key: '8b4913f5335b683eb20c2dcad08e6bf7d51fbfc7' }, index.h("div", { key: '3500070d6310d91ff27d2dd27b1a404e55f302bf', class: "nylas-event-description", part: "nedesc" }, index.h("label", { key: '9e4adbd5e0e89f3b09d65aefcb2b25f917760c91', htmlFor: "description" }, utils.instance.t('nylasEventDescription.headerTitle'), index.h("span", { key: '671f9cb5866a6fa6ee5d290abfeee2aab063b404', class: "label-icon" }, index.h("tooltip-component", { key: 'e931671a86e9286bb7a65deab016d502b0caf05a' }, index.h("info-icon", { key: 'f7f7745e60afd89122ed623a26a6a83bb62a3452', slot: "tooltip-icon" }), index.h("span", { key: '0ae1140d554c5d9c2d080dab390c393d60f968e8', slot: "tooltip-content" }, utils.instance.t('nylasEventDescription.tooltip.desc'))))), index.h("div", { key: '8a696082ddf7d0a02ae321aa4bf9bff4257fb175', id: "event-description", class: { 'event-description': true }, part: "nedesc__textarea", contentEditable: "true", onInput: e => this.handleChange(e), onKeyDown: event => this.handleInputKeyDown(event), ref: el => (this.descriptionRef = el) }), this.showTokens && this.filteredTokens?.length > 0 && (index.h("div", { class: "token-options", part: "nedesc__dropdown-content" }, index.h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant }, this.filteredTokens.map(option => (index.h("li", { tabindex: "0", key: option.label, id: option.label, class: { active: this.ariaActivedescendant === option.label }, onClick: e => this.selectOption(e, option), role: "option" }, this.getLabelHTML(option.labelHTML))))))), index.h("span", { key: '7e7b0ccdcd51db7cde89ef9f5bf3c202d62f1ac3', class: "help-text" }, utils.instance.t('nylasEventTitle.helpText', { context: 'start', field: utils.instance.t('nylasEventTitle.description') }), " ", index.h("code", { key: '5e9b9b6f5ad50aa3cb78a9bec621db7ad3878758' }, "$"), ' ', utils.instance.t('nylasEventTitle.helpText', { context: 'end' }), index.h("span", { key: 'abe23b6835fe9d0f7aef9a81897809669163a2a5', class: "label-icon" }, index.h("tooltip-component", { key: 'fc1297d3839f01f478e85c2ce0eeb5bf22b9b6eb' }, index.h("info-icon", { key: '8e8fa87ac1060ec2f6a7fb656bc9d22908450299', slot: "tooltip-icon" }), index.h("span", { key: 'c37ffca9c75e862a486c5f6e9a553dd94546ad9f', slot: "tooltip-content" }, utils.instance.t('nylasEventTitle.tooltip.desc'), " ", index.h("code", { key: '85835b17c04e36bfea09b0343f05fdae28104eb8' }, '${invitee}'))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-event-description',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDescription.prototype, "render", null);
NylasEventDescription.style = nylasEventDescriptionCss;

exports.nylas_event_description = NylasEventDescription;

//# sourceMappingURL=nylas-event-description.cjs.entry.js.map