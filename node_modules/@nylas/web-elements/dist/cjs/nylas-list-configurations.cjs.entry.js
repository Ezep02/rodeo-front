'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');

const nylasListConfigurationsCss = ":host{display:grid;grid-auto-flow:row;width:100%;font-family:inherit;font-optical-sizing:auto;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem;gap:1rem}@media screen and (max-width: 768px){.header{flex-direction:column;gap:0.5rem;align-items:unset}}.header h2{margin:0;font-size:1.25rem;color:var(--nylas-base-900);font-weight:600}.header p{margin:0;font-size:16px;color:var(--nylas-base-700)}.header .actions{justify-self:end}@media screen and (max-width: 768px){.header .actions{width:100%}}.configurations{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);background:var(--nylas-base-0);height:100%;display:flex;flex-direction:column;position:relative;overflow-y:hidden}.configurations .table-container{overflow-y:auto;flex:1}.configurations .table-container table{width:100%;border-spacing:0;border-collapse:collapse;font-family:inherit;height:max-content}.configurations .table-container table.no-configurations{height:100%}.configurations .table-container table tr{color:var(--nylas-base-800);border-bottom:1px solid var(--nylas-base-200);font-family:inherit}.configurations .table-container table tr.hide{display:none}.configurations .table-container table th{font-weight:600;text-transform:uppercase;font-size:14px;line-height:20px}.configurations .table-container table tr.no-configurations td>div{display:flex;height:100%;justify-content:center;align-items:center;flex-direction:column;padding:var(--nylas-border-radius-3x)}.configurations .table-container table tr.no-configurations td>div h3{margin:0 0 1rem 0;color:var(--nylas-base-700)}.configurations .table-container table tr.no-configurations td>div p{margin:0 0 1rem 0;color:var(--nylas-base-600)}.configurations .table-container table tr.no-configurations td>div calendar-icon{margin-bottom:1rem;color:var(--nylas-base-200)}.configurations .table-container table th,.configurations .table-container table td{text-align:left;padding:1rem;font-family:inherit}.configurations .table-container table .actions{display:flex;justify-content:flex-end;gap:1rem;text-align:right}@media screen and (max-width: 768px){.configurations .table-container table .actions{flex-direction:column;gap:0.5rem}}.configurations .table-container table .actions select-dropdown.last::part(sd_dropdown-content){bottom:54px}.configurations .table-container table .title{width:100%;max-width:300px}@media screen and (max-width: 768px){.configurations .table-container table .title{max-width:96px}}.configurations .table-container table .title div{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.configurations .table-container table .title div.config-event-title{font-weight:600}.configurations .table-container table .title div.config-event-description{font-size:0.75rem}.configurations .pagination{padding:1rem;position:sticky;top:100%;display:flex;justify-content:flex-end;gap:0.5rem;background:white;width:calc(100% - 2rem);z-index:2}.configurations .pagination td.arrows{display:flex;justify-content:flex-end;gap:0.5rem}.configurations .pagination button{display:flex;flex-direction:row;justify-content:center;align-items:center;height:3vh;width:3vh;min-width:3em;min-height:3em;cursor:pointer;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background-color:transparent;color:var(--nylas-base-800);cursor:pointer}.configurations .pagination button:hover:not(:disabled){border:1px solid var(--nylas-primary)}.configurations .pagination button:active{border:1px solid var(--nylas-base-800)}.configurations .pagination button:disabled{border:1px solid var(--nylas-base-100);background-color:transparent;color:var(--nylas-base-300);cursor:not-allowed}.configurations .pagination button.right{transform:rotate(180deg)}.error-container{margin-top:1.5rem}.error-container .error{color:var(--nylas-error);padding:0.5rem 0;margin:1rem 0 0}button-component#copy button{width:108px}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){display:block;height:48px;padding:0px 16px 8px}@media screen and (max-width: 768px){select-dropdown::part(sd_dropdown-button){width:92px}}select-dropdown::part(sd_dropdown-content){width:120px;right:0}select-dropdown::part(sd_dropdown-labelhtml){display:flex;gap:0.5rem;align-items:center;color:var(--nylas-base-900)}select-dropdown::part(sd_dropdown-labelhtml):hover{color:var(--nylas-primary)}.card-wrapper{position:absolute;top:0;left:0;height:calc(100% + 4rem);width:-webkit-fill-available;width:-moz-available;width:fill-available;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(0, 0, 0, 0.6);z-index:2;border-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.card-wrapper{justify-content:start;height:100%}}.card-modal{background:var(--nylas-base-0);display:flex;flex-direction:column;font-family:var(--nylas-font-family);background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);padding:32px;width:562px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.card-modal{width:auto;border-radius:0px}}.description.title-desc{margin-bottom:2rem}.description p{margin:0;font-size:18px;color:var(--nylas-base-600)}.footer{margin-top:1rem;padding-top:1rem;display:flex;justify-content:flex-end;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.close-button{width:100%;display:flex;justify-content:flex-end}.close-button button-component button{padding:0;height:auto}.close-button button-component button:hover{background-color:transparent !important}button-component{--dot-color:var(--nylas-base-700)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasListConfigurations = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.initListConfigurations = index.createEvent(this, "initListConfigurations", 7);
        this.createButtonClick = index.createEvent(this, "createButtonClick", 7);
        this.editButtonClick = index.createEvent(this, "editButtonClick", 7);
        this.deleteButtonClick = index.createEvent(this, "deleteButtonClick", 7);
        this.configurations = [];
        this.selectedLanguage = undefined;
        this.schedulerPreviewLink = '';
        this.listConfigurationsNextCursor = undefined;
        this.state = 'loading';
        this.error = '';
        this.currentCursor = null;
        this.previousCursors = [];
        this.disableNextPageButton = false;
        this.deleteConfigurationId = '';
        this.showDeleteButtonLoading = false;
    }
    listConfigurationsNextCursorChangedHandler(newVal, oldVal) {
        if (!newVal || newVal === oldVal) {
            if (newVal === null) {
                this.disableNextPageButton = true;
            }
            return;
        }
        this.disableNextPageButton = false;
        this.currentCursor = newVal;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        utils.instance.changeLanguage(newVal);
    }
    connectedCallback() {
        utils.debug('[nylas-list-configurations]', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('[nylas-list-configurations]', 'componentWillLoad');
        if (this.configurations && this.configurations.length > 0) {
            this.state = 'loaded';
        }
    }
    componentDidLoad() {
        utils.debug('[nylas-list-configurations]', 'componentDidLoad');
        this.initListConfigurations.emit({
            host: this.host,
        });
    }
    disconnectedCallback() {
        utils.debug('[nylas-list-configurations]', 'disconnectedCallback');
    }
    async handleNylasFormDropdownChanged(event) {
        utils.debug('[nylas-list-configurations]', 'handleNylasFormDropdownChanged', event.detail);
        const { value } = event.detail;
        const [action, index] = value.split('-');
        event.preventDefault();
        switch (action) {
            case 'delete':
                this.deleteConfigurationId = this.configurations[index]?.id;
                break;
            case 'preview':
                window.open(utils.parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]), '_blank');
                break;
            case 'copy':
                await navigator.clipboard.writeText(utils.parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]));
                break;
            default:
                break;
        }
    }
    async registerCallback() {
        this.initListConfigurations.emit({
            host: this.host,
        });
    }
    async getState() {
        return this.state;
    }
    async setState(state) {
        this.state = state;
    }
    async setError(error) {
        this.error = error;
    }
    async hideDeleteConfirmation() {
        this.deleteConfigurationId = '';
        this.showDeleteButtonLoading = false;
    }
    closeModal(e) {
        e.preventDefault();
        this.deleteConfigurationId = '';
    }
    handleConfirmDeleteButtonClicked(e) {
        e.preventDefault();
        this.showDeleteButtonLoading = true;
        const config = this.configurations.find(config => config.id === this.deleteConfigurationId);
        if (config && config?.id) {
            this.deleteButtonClick.emit({ host: this.host, configuration: config });
        }
    }
    getDurationString(duration) {
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
        return `${hours ? hours : ''} ${hours ? `${hours > 1 ? 'hours' : 'hour'}` : ''} ${minutes ? minutes : ''} ${minutes ? `${minutes > 1 ? 'mins' : 'min'}` : ''}`;
    }
    getActionLabelHTML(action) {
        const actionStyle = {
            display: 'inline-flex',
            alignItems: 'center',
            gap: '0.5rem',
        };
        const dangerStyle = {
            color: 'var(--nylas-error)',
        };
        switch (action) {
            case 'preview':
                return (index.h("span", { style: actionStyle }, index.h("eye-icon", { width: "16", height: "16" }), utils.instance.t('nylasListConfigurations.previewButtonText')));
            case 'copy':
                return (index.h("span", { style: actionStyle }, index.h("copy-icon", { width: "16", height: "16" }), utils.instance.t('nylasListConfigurations.copyLinkButtonText')));
            case 'delete':
                return (index.h("span", { style: { ...actionStyle, ...dangerStyle } }, index.h("delete-icon", { width: "15", height: "17" }), utils.instance.t('nylasListConfigurations.deleteButtonText')));
            default:
                return '';
        }
    }
    previousPageClickedHandler() {
        if (this.previousCursors.length === 0)
            return;
        this.currentCursor = this.previousCursors.pop() || null;
        const prevCursor = this.previousCursors[this.previousCursors.length - 1] || undefined;
        this.initListConfigurations.emit({
            host: this.host,
            cursor: prevCursor,
        });
    }
    nextPageClickedHandler() {
        if (!this.currentCursor)
            return;
        this.previousCursors = [...this.previousCursors, this.currentCursor];
        this.initListConfigurations.emit({
            host: this.host,
            cursor: this.currentCursor,
        });
    }
    render() {
        return (index.h(index.Host, null, index.h("div", { class: "header" }, index.h("div", { class: "description" }, index.h("h2", null, utils.instance.t('allSchedulingPages')), index.h("p", null, utils.instance.t('createAndManageSchedulingPages'))), this.configurations && this.configurations.length > 0 && (index.h("div", { class: "actions" }, index.h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, utils.instance.t('createNewSchedulingPageButtonText'))))), index.h("div", { class: "configurations" }, index.h("div", { class: "table-container" }, index.h("table", { class: {
                'no-configurations': this.state !== 'loading' && (!this.configurations || this.configurations.length === 0),
            } }, index.h("tr", { class: {
                hide: this.state === 'loading' || (this.configurations && this.configurations.length === 0),
            } }, index.h("th", null, utils.instance.t('pageTitle')), index.h("th", null, utils.instance.t('durationTitle')), index.h("th", null)), this.state === 'loading' && (index.h("tr", { class: "no-configurations" }, index.h("td", { colSpan: 3 }, index.h("div", null, index.h("h3", null, utils.instance.t('loading'), "..."), index.h("p", null, utils.instance.t('loadingPagesDescription')))))), this.state !== 'loading' && (!this.configurations || this.configurations.length === 0) && (index.h("tr", { class: "no-configurations" }, index.h("td", { colSpan: 3 }, index.h("div", null, index.h("calendar-icon", { width: "48", height: "48" }), index.h("h3", null, utils.instance.t('noSchedulingPages')), index.h("p", null, utils.instance.t('createFirstSchedulingPage')), index.h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, utils.instance.t('createNewSchedulingPageButtonText')))))), this.state !== 'loading' &&
            this.configurations?.map((config, i) => {
                const lastTwo = i === this.configurations.length - 1 || i === this.configurations.length - 2;
                return (index.h("tr", { key: config?.id }, index.h("td", null, index.h("div", { class: "title" }, index.h("div", { class: "config-event-title", title: config?.event_booking?.title }, config?.event_booking?.title), index.h("div", { class: 'config-event-description' }, config?.event_booking?.description))), index.h("td", null, index.h("div", { class: "duration" }, this.getDurationString(config?.availability?.duration_minutes))), index.h("td", null, index.h("div", { class: "actions" }, index.h("button-component", { variant: 'basic', key: `edit-${i}`, clickHandler: event => {
                        event.preventDefault();
                        this.editButtonClick.emit({ host: this.host, configuration: config });
                    } }, index.h("edit-icon", { width: "16", height: "16" }), utils.instance.t('editSchedulingPageButtonText')), index.h("select-dropdown", { class: {
                        last: lastTwo,
                    }, name: "actions", options: [
                        { value: `preview-${i}`, label: 'Preview', labelHTML: this.getActionLabelHTML('preview') },
                        { value: `copy-${i}`, label: 'Copy link', labelHTML: this.getActionLabelHTML('copy') },
                        { value: `delete-${i}`, label: 'Delete', labelHTML: this.getActionLabelHTML('delete') },
                    ], defaultSelectedOption: { value: '', label: '' }, dropdownButtonText: "...", withSearch: false, withChevron: false, exportparts: "sd_dropdown: actions__dropdown, sd_dropdown-button: actions__dropdown-button, sd_dropdown-content: actions__dropdown-content" })))));
            }))), index.h("div", { class: "pagination" }, index.h("button", { class: "arrow left", onClick: () => this.previousPageClickedHandler(), disabled: this.previousCursors.length <= 0 }, index.h("chevron-icon", null)), index.h("button", { class: "arrow right", onClick: () => this.nextPageClickedHandler(), disabled: this.disableNextPageButton }, index.h("chevron-icon", null)))), this.state === 'error' && (index.h("div", { class: "error-container" }, index.h("p", { class: 'error' }, this.error))), !!this.deleteConfigurationId && (index.h("div", { class: "card-wrapper" }, index.h("div", { class: "card-modal" }, index.h("div", { class: "close-button" }, index.h("button-component", { tooltip: "Close", id: "close", variant: 'invisible', onClick: e => this.closeModal(e), part: "nfbf__close-button" }, index.h("close-icon", null))), index.h("div", { class: "header" }, index.h("h2", { slot: "card-title", part: "nfbf__title" }, utils.instance.t('deleteSchedulingPageTitle'))), index.h("div", { class: "description title-desc" }, index.h("p", null, utils.instance.t('deleteSchedulingPageDescription'))), index.h("div", { class: {
                footer: true,
            } }, index.h("button-component", { variant: 'basic', onClick: e => this.closeModal(e), part: "nfbf__button-outline nfbf__cancel-cta" }, `${utils.instance.t('deleteSchedulingPageCancelButton')}`), index.h("button-component", { variant: 'destructive', onClick: e => this.handleConfirmDeleteButtonClicked(e), disabled: this.showDeleteButtonLoading, isLoading: this.showDeleteButtonLoading, part: "nfbf__button-outline nfbf__reschedule-cta" }, `${utils.instance.t('deleteSchedulingPageConfirmButton')}`)))))));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "listConfigurationsNextCursor": ["listConfigurationsNextCursorChangedHandler"],
        "selectedLanguage": ["selectedLanguageChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-list-configurations',
        stateToProps: new Map([
            ['schedulerConfig.configurations', 'configurations'],
            ['schedulerConfig.listConfigurationsNextCursor', 'listConfigurationsNextCursor'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        localPropsToProp: new Map([['schedulerPreviewLink', 'schedulerPreviewLink']]),
        eventToProps: {
            initListConfigurations: async (event, connector) => {
                const { host, cursor } = event.detail;
                await host.setState('loading');
                const [data, error] = await connector.schedulerConfig.getConfigurations(cursor);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                    return;
                }
                await host.setState('loaded');
            },
            createButtonClick: async (_, connector) => {
                connector.schedulerConfigStore.resetSelectedConfiguration();
                connector.schedulerConfigStore.state.action = 'create';
            },
            deleteButtonClick: async (event, connector) => {
                const { host, configuration } = event.detail;
                const [data, error] = await connector.schedulerConfig.deleteConfiguration(configuration.id);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                }
                await host.hideDeleteConfirmation();
            },
            editButtonClick: async (event, connector) => {
                const { configuration } = event.detail;
                connector.schedulerConfigStore.state.selectedConfiguration = configuration;
                connector.schedulerConfigStore.state.action = 'edit';
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListConfigurations.prototype, "render", null);
NylasListConfigurations.style = nylasListConfigurationsCss;

exports.nylas_list_configurations = NylasListConfigurations;

//# sourceMappingURL=nylas-list-configurations.cjs.entry.js.map