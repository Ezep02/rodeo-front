'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7af03e3f.js');
const utils = require('./utils-91715738.js');

const inputDropdownCss = ":host{display:block;position:relative;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}@media screen and (max-width: 768px){:host{position:unset}}.dropdown{display:inline-block}.dropbtn{color:var(--nylas-base-800);padding:10px;font-size:16px;font-family:var(--nylas-font-family);cursor:pointer;display:flex;gap:0.5rem;background:transparent;border:none;border-radius:var(--nylas-border-radius-2x);width:50px;padding:14px 16px;border-radius:var(--nylas-border-radius-2x)}.dropbtn.focus{background:transparent}.dropbtn:hover,.dropbtn:active{outline:1px solid var(--nylas-primary)}.dropbtn:active{outline:2px solid var(--nylas-primary)}.dropbtn span.chevron{display:flex;align-self:center}.dropbtn span.open{transform:rotate(90deg)}.dropbtn span.closed{transform:rotate(270deg)}.dropbtn span.selected-option{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:144px;font-size:14px;line-height:20px}@media screen and (max-width: 768px){.dropbtn span.selected-option{max-width:124px;font-size:16px}}.dropdown-content{display:block;margin-top:0.5rem;background-color:var(--nylas-base-0);max-width:306px;width:max-content;max-height:336px;overflow:auto;z-index:1;border-radius:4px;position:absolute;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1)}@media screen and (max-width: 768px){.dropdown-content{right:0;width:325px;max-width:unset}}.search-box{border-bottom:1px solid var(--nylas-base-200);padding:10px;position:sticky;top:0;background:var(--nylas-base-0)}.search-box .icon{position:absolute;top:1.25rem;left:1.25rem;color:var(--nylas-base-300)}.dropdown-content ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px}.dropdown-content ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.dropdown-content ul li:hover,.dropdown-content ul li:focus{background-color:var(--nylas-base-100)}.dropdown-content .selected{background-color:#e7e7e7}input[type=text]{width:-webkit-fill-available;padding:inherit;border:1px solid #ccc;border-radius:4px;position:sticky;background:no-repeat scroll 7px 7px;padding-left:30px;background-size:16px 16px}";
const InputDropdownStyle0 = inputDropdownCss;

const InputDropdown = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.inputOptionChanged = index.createEvent(this, "inputOptionChanged", 7);
        this.name = undefined;
        this.options = [];
        this.defaultInputOption = undefined;
        this.inputValue = undefined;
        this.pluralizedLabel = '';
        this.filterable = false;
        this.selectedOption = this.defaultInputOption || null;
        this.isOpen = false;
        this.typedValue = '';
        this.filteredOptions = [...this.options];
        this.ariaActivedescendant = '';
        this.shouldAutoScroll = false;
    }
    optionsChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = this.getFilteredOptions(newValue);
    }
    defaultSelectedOptionChangedHandler(newValue, oldValue) {
        if (newValue?.label === oldValue?.label) {
            return;
        }
        this.selectedOption = newValue;
    }
    inputValueChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = this.getFilteredOptions(this.options);
    }
    componentWillLoad() {
        this.filteredOptions = this.getFilteredOptions(this.options);
        if (!this.selectedOption && !!this.defaultInputOption) {
            this.selectedOption = this.defaultInputOption;
        }
        if (!this.selectedOption && this.options.length > 0) {
            this.selectedOption = this.options[0];
        }
    }
    getFilteredOptions(options) {
        if (!this.filterable) {
            return options;
        }
        return options.filter(option => option?.value?.toString().toLowerCase().includes(this.typedValue?.toLowerCase()) || option?.label?.toLowerCase().includes(this.typedValue?.toLowerCase()));
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    selectOption(option) {
        this.selectedOption = option;
        this.toggleDropdown();
        this.inputOptionChanged.emit({
            value: option.value,
            name: this.name,
        });
    }
    handleOnInput(event) {
        const value = event.target.value;
        this.typedValue = value;
        const optionIndex = this.options.findIndex(option => option.label.toLowerCase().includes(value.toLowerCase()));
        if (optionIndex > -1) {
            this.scrollToViewWithinParent(optionIndex);
        }
        this.inputOptionChanged.emit({
            value,
            name: this.name,
        });
    }
    scrollToViewWithinParent(optionIndex) {
        const option = this.options[optionIndex];
        const childElement = this.el.shadowRoot?.getElementById(option.value.toString());
        const parentElement = this.optionsRef;
        this.ariaActivedescendant = option.value.toString();
        if (!childElement || !parentElement)
            return;
        const childRect = childElement.getBoundingClientRect();
        const parentRect = parentElement.getBoundingClientRect();
        if (childRect.top < parentRect.top) {
            parentElement.scrollTop -= parentRect.top - childRect.top;
        }
        else if (childRect.bottom > parentRect.bottom) {
            parentElement.scrollTop += childRect.bottom - parentRect.bottom;
        }
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                this.inputRef?.focus();
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleClick(event) {
        if (this.isOpen) {
            const value = event.target.value;
            const optionIndex = this.options.findIndex(option => option.label.toLowerCase().includes(value.toLowerCase()));
            if (optionIndex > -1) {
                setTimeout(() => {
                    this.scrollToViewWithinParent(optionIndex);
                }, 10);
            }
        }
    }
    handleListboxKeydown(e) {
        const items = this.filteredOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === items.length - 1) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            this.ariaActivedescendant = items[nextIndex].value;
            this.focusOption(nextIndex);
        }
        else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === 0) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            this.ariaActivedescendant = items[prevIndex].value;
            this.focusOption(prevIndex);
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            if (this.ariaActivedescendant) {
                this.selectOption(items[currentIndex]);
            }
        }
        else if (e.key === 'Escape') {
            this.isOpen = false;
        }
    }
    focusOption(index) {
        const option = this.filteredOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    handleComboboxKeyDown(event) {
        if (event.key === 'ArrowDown' || (event.key == 'Tab' && !event.shiftKey)) {
            event.preventDefault();
            if (!this.isOpen) {
                this.isOpen = true;
                this.shouldAutoScroll = true;
                return;
            }
            this.ariaActivedescendant = this.filteredOptions[0].value;
            this.focusOption(0);
        }
        else if (event.key === 'ArrowUp' || (event.key === 'Tab' && event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value;
            this.focusOption(this.filteredOptions.length - 1);
        }
        else if (event.key === 'Escape') {
            this.isOpen = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (index.h("div", { key: '9d5c9dfd32cc331198fdda58da51ed89cee2ede0', class: "dropdown", part: "id_dropdown" }, index.h("input", { key: '6aa03686c990fd7fb44945807b5b67c53a762f91', type: "text", name: this.name, id: this.name, part: "id_dropdown-input", class: { dropbtn: true, open: this.isOpen }, value: this.inputValue, onClick: (e) => {
                this.toggleDropdown();
                this.shouldAutoScroll = true;
                this.handleClick(e);
            }, "aria-haspopup": "listbox", "aria-label": this.name, "aria-expanded": this.isOpen ? 'true' : 'false', onKeyDown: e => this.handleComboboxKeyDown(e), onInput: event => this.handleOnInput(event) }), this.isOpen ? (index.h("div", { class: "dropdown-content", part: "id_dropdown-content", ref: el => (this.optionsRef = el) }, index.h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.filteredOptions.map(option => (index.h("li", { tabindex: "0", key: option.value, id: option.value, onClick: () => this.selectOption(option), role: "option", class: {
                focused: this.ariaActivedescendant === option.value.toString(),
            } }, option.labelHTML ? option.labelHTML : option.label)))))) : null));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "options": ["optionsChangedHandler"],
        "defaultInputOption": ["defaultSelectedOptionChangedHandler"],
        "inputValue": ["inputValueChangedHandler"]
    }; }
};
InputDropdown.style = InputDropdownStyle0;

const timePeriodSelectorCss = ".time-period-selector.sc-time-period-selector{display:grid;gap:0.5rem;grid-template-columns:auto 1fr}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector,.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector{width:116px}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector{width:84px;display:flex;align-items:center}.time-period-selector.sc-time-period-selector select-dropdown#time-period.sc-time-period-selector::part(sd_dropdown-button){width:100%}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown){width:inherit;height:100%}.time-period-selector.sc-time-period-selector input-dropdown#time-number.sc-time-period-selector::part(id_dropdown-input){border:none;border-radius:var(--nylas-border-radius-2x)}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown-input){padding:17px;gap:1rem}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown-content){width:100%;max-height:200px}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown){width:inherit}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-button){padding:1rem;gap:1rem;justify-content:space-between}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-content){width:100%;max-height:200px}";
const TimePeriodSelectorStyle0 = timePeriodSelectorCss;

const pluralToSingular = {
    hours: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
};
const TimePeriodSelector = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.timePeriodChanged = index.createEvent(this, "timePeriodChanged", 7);
        this.timePeriods = ['hour', 'day', 'week', 'month'];
        this.defaultSelectedPeriod = undefined;
        this.defaultSelectedNumber = undefined;
        this.selectedPeriod = this.defaultSelectedPeriod;
        this.selectedNumber = this.defaultSelectedNumber;
        this.numberOptions = this.calculateOptions(this.defaultSelectedPeriod || 'hour').map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
        this.timePeriodOptions = this.timePeriods.map(period => {
            return {
                label: period,
                value: period,
            };
        });
    }
    defaultSelectedPeriodChanged(newValue) {
        this.selectedPeriod = newValue;
        this.updateNumberOptionsAndSelectedNumber(newValue);
    }
    defaultSelectedNumberChanged(newValue) {
        this.selectedNumber = newValue;
    }
    timePeriodsChanged(newValue) {
        this.timePeriodOptions = newValue.map(period => {
            return {
                label: period,
                value: period,
            };
        });
    }
    componentDidLoad() {
        this.selectedNumber = this.defaultSelectedNumber;
        this.selectedPeriod = this.defaultSelectedPeriod;
        const period = pluralToSingular[this.selectedPeriod] ?? this.selectedPeriod;
        const numberOptions = this.calculateOptions(period);
        this.numberOptions = numberOptions.map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
    }
    calculateOptions(period) {
        switch (period) {
            case 'hour':
                return Array.from({ length: 23 }, (_, i) => i + 1);
            case 'minute':
                return Array.from({ length: 13 }, (_, i) => i * 5);
            case 'day':
                return Array.from({ length: 30 }, (_, i) => i + 1);
            case 'week':
                return Array.from({ length: 4 }, (_, i) => i + 1);
            case 'month':
                return Array.from({ length: 12 }, (_, i) => i + 1);
            default:
                return [];
        }
    }
    inputOptionChangedHandler(event) {
        utils.debug('time-period-selector', 'inputOptionChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'time-number') {
            this.selectedNumber = value ? parseInt(value) : this.defaultSelectedNumber;
        }
        const selected = {
            number: this.selectedNumber,
            period: this.selectedPeriod,
        };
        this.timePeriodChanged.emit(selected);
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('time-period-selector', 'nylasFormDropdownChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'time-period') {
            this.selectedPeriod = value;
            this.updateNumberOptionsAndSelectedNumber(value);
        }
        else if (name === 'time-number') {
            this.selectedNumber = parseInt(value);
        }
        const selected = {
            number: this.selectedNumber,
            period: this.selectedPeriod,
        };
        this.timePeriodChanged.emit(selected);
    }
    updateNumberOptionsAndSelectedNumber(period) {
        const numberOptions = this.calculateOptions(period);
        this.numberOptions = numberOptions.map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
    }
    render() {
        return (index.h("div", { key: 'c079631c07b14e3727b2a838c1ee01acac85592c', class: "time-period-selector" }, typeof this.selectedNumber == 'number' && (index.h("input-dropdown", { id: "time-number", name: 'time-number', inputValue: this.selectedNumber.toString(), exportparts: "id_dropdown: tps__number-dropdown, id_dropdown-input: tps__number-dropdown-button, id_dropdown-content: tps__number-dropdown-content", options: this.numberOptions, defaultInputOption: this.numberOptions.find(i => i.value == this.selectedNumber.toString()) })), typeof this.selectedPeriod == 'string' && (index.h("select-dropdown", { id: "time-period", name: 'time-period', options: this.timePeriodOptions, exportparts: "sd_dropdown: tps__period-dropdown, sd_dropdown-button: tps__period-dropdown-button, sd_dropdown-content: tps__period-dropdown-content", pluralizedLabel: this.selectedNumber > 1 ? 's' : '', defaultSelectedOption: this.timePeriodOptions.find(i => i.value == this.selectedPeriod), withSearch: false }))));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "defaultSelectedPeriod": ["defaultSelectedPeriodChanged"],
        "defaultSelectedNumber": ["defaultSelectedNumberChanged"],
        "timePeriods": ["timePeriodsChanged"]
    }; }
};
TimePeriodSelector.style = TimePeriodSelectorStyle0;

exports.input_dropdown = InputDropdown;
exports.time_period_selector = TimePeriodSelector;

//# sourceMappingURL=input-dropdown_2.cjs.entry.js.map