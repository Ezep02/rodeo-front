'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-27e765e0.js');
const utils = require('./utils-66843f0b.js');

const nylasCancelledEventCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-cancelled-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family);width:400px;background-color:var(--nylas-base-0);color:var(--nylas-base-800);border-radius:var(--nylas-border-radius-2x);padding:1.5rem;position:relative;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.nylas-cancelled-event-card{width:inherit}}.nylas-cancelled-event-card__title{font-size:18px;font-weight:600;line-height:24px;color:var(--nylas-base-900);text-align:center}.nylas-cancelled-event-description{font-size:16px;font-weight:500;color:var(--nylas-base-600)}.nylas-cancelled-event-card__calendar-icon{width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200)}.nylas-cancelled-event-card__cta{width:100%;display:flex;flex-direction:row;align-items:flex-start;margin-top:1rem}calendar-cancel-icon{display:flex;align-items:center;justify-content:center;height:100%}button-component{width:100%}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancelledEventCard = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.closeCancelEventCardClicked = index.createEvent(this, "closeCancelEventCardClicked", 7);
        this.cancelledEventCardError = index.createEvent(this, "cancelledEventCardError", 7);
        this.handleCloseClicked = () => {
            this.isClosing = true;
            const errorHandler = (error) => {
                this.cancelledEventCardError.emit(error);
                this.isClosing = false;
            };
            this.closeCancelEventCardClicked.emit({ errorHandler });
        };
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.cancelledEventInfo = undefined;
        this.isClosing = false;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        utils.debug(`[nylas-cancelled-event-card] Component connected`);
    }
    async componentWillLoad() {
        utils.debug(`[nylas-cancelled-event-card] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-cancelled-event-card] Component did load`);
        if (!this.cancelledEventInfo) {
            console.warn(`[nylas-cancelled-event-card] No cancelled event info provided, "cancelledEventInfo" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        utils.debug(`[nylas-cancelled-event-card] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (index.h(index.Host, { key: 'da9997f15e2a3b54e88cecda75b989ff1a929a17', part: "ncec" }, index.h("div", { key: '8e516fdf70349c1c677f9f43373b513a2777b281', class: "nylas-cancelled-event-card", part: "ncec__card" }, index.h("div", { key: '2bd793e49e60204dc0b5ec6e2ed60aa8f57e50b5', class: "nylas-cancelled-event-card__calendar-icon", part: "ncec__icon" }, index.h("calendar-cancel-icon", { key: '36b868641475fa3b2ac6be2d98c2f8b2c51c5538' })), index.h("h3", { key: '3c2416240fc848487681adbb90eab89877178071', class: "nylas-cancelled-event-card__title", part: "ncec__title" }, utils.instance.t('bookingCancelledTitle'), "!"), index.h("div", { key: 'b725c7e2599a5924426a9b37e896cc64095d994a', class: "nylas-cancelled-event-card__description", part: "ncec__description" }, utils.instance.t('bookingCancelledMessage'), " ", this.configSettings?.organizer?.name || 'the participants', "."), index.h("div", { key: 'e23d97e0f59dac5373c652bcfc29b414bafcf099', class: "nylas-cancelled-event-card__cta" }, index.h("button-component", { key: '7cac75bbdc25ae48051d00fccfc5e322b86c2832', variant: "basic", disabled: this.isClosing, part: "ncec__button-outline", onClick: this.handleCloseClicked }, this.isClosing ? `${utils.instance.t('closingButton')}...` : `${utils.instance.t('closeButton')}`)))));
    }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "themeConfig": ["themeConfigChanged"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-cancelled-event-card',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.themeConfig', 'themeConfig'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            closeCancelEventCardClicked: async (_, nylasschedulerconnector) => {
                const result = await nylasschedulerconnector.scheduler.resetCancel();
                const { errorHandler } = _.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            cancelledEventCardError: async (event, _nylasschedulerconnector) => {
                utils.debug('nylas-cancelled-event-card', 'cancelledEventCardError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancelledEventCard.prototype, "render", null);
NylasCancelledEventCard.style = nylasCancelledEventCardCss;

exports.nylas_cancelled_event_card = NylasCancelledEventCard;

//# sourceMappingURL=nylas-cancelled-event-card.cjs.entry.js.map