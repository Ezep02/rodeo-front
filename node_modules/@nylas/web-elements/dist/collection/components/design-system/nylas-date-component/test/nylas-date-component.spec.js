import { newSpecPage } from "@stencil/core/testing";
import { NylasDateComponent } from "../nylas-date-component";
import { h } from "@stencil/core";
describe('nylas-date-component', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders error if date form field is invalid', async () => {
        const page = await newSpecPage({
            components: [NylasDateComponent],
            template: () => h("nylas-date-component", { required: true }),
        });
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const dateInput = page?.root?.shadowRoot?.querySelector('input');
        const mockOnInput = jest.fn();
        dateInput.addEventListener('input', mockOnInput);
        dateInput.value = '1993-02-29';
        dateInput.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
        await page.waitForChanges();
        expect(mockOnInput).toHaveBeenCalled();
        const customEvent = new CustomEvent('bookingFormSubmitted', {
            detail: {},
        });
        page.rootInstance.handleInput({
            target: {
                value: '',
                validity: {
                    valid: false,
                },
            },
        });
        page.rootInstance.handleBookingFormSubmitted(customEvent);
        await page.waitForChanges();
        expect(page.rootInstance.isDateValid).toBe(false);
        expect(page.root).toMatchSnapshot();
    });
});
//# sourceMappingURL=nylas-date-component.spec.js.map
