import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class MultiSelectDropdown {
    constructor() {
        this.name = undefined;
        this.label = undefined;
        this.options = [];
        this.error = '';
        this.required = false;
        this.availableOptions = this.options;
        this.isOpen = false;
        this.ariaActivedescendant = '';
        this.shouldFocusFirstOption = false;
    }
    areOptionsEqual(arr1, arr2) {
        if (arr1.length !== arr2.length)
            return false;
        const sorted1 = [...arr1].sort((a, b) => a.label.localeCompare(b.label) || a.value.localeCompare(b.value));
        const sorted2 = [...arr2].sort((a, b) => a.label.localeCompare(b.label) || a.value.localeCompare(b.value));
        return sorted1.every((opt1, index) => {
            const opt2 = sorted2[index];
            return opt1.label === opt2.label && opt1.value === opt2.value;
        });
    }
    optionsChangedHandler(newValue) {
        if (!this.areOptionsEqual(newValue, this.availableOptions)) {
            this.availableOptions = newValue;
        }
    }
    componentDidLoad() {
        debug('multi-select-dropdown', 'componentDidLoad');
        if (this.options) {
            this.availableOptions = this.options;
        }
    }
    componentDidRender() {
        debug('multi-select-dropdown', 'componentDidRender');
        if (this.isOpen && this.shouldFocusFirstOption) {
            this.ariaActivedescendant = this.availableOptions[0]?.value;
            this.focusOption(0);
            this.shouldFocusFirstOption = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    handleBookingFormSubmitted(event) {
        const selectedOptions = this.availableOptions.filter(o => o.selected).map(o => o.value);
        if (this.required && (!selectedOptions || selectedOptions.length <= 0)) {
            this.error = 'Please select at least one option';
        }
        if (this.error) {
            event.preventDefault();
        }
    }
    selectOption(option) {
        this.availableOptions = this.availableOptions.map(o => {
            if (o.value === option.value) {
                o.selected = option.selected ? false : true;
                if (o.selected) {
                    this.error = '';
                }
            }
            return o;
        });
        const selectedOptions = this.availableOptions.filter(o => o.selected).map(o => o.value);
        this.selectedOptionsChanged.emit({
            value: selectedOptions,
            name: this.name,
        });
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
            this.shouldFocusFirstOption = true;
        }
        else {
            this.ariaActivedescendant = '';
        }
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleListboxKeydown(e) {
        const items = this.availableOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        switch (e.key) {
            case 'ArrowDown':
            case 'Tab':
                if (!e.shiftKey) {
                    e.preventDefault();
                    const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
                    this.ariaActivedescendant = items[nextIndex].value;
                    this.focusOption(nextIndex);
                }
                else {
                    e.preventDefault();
                    const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
                    this.ariaActivedescendant = items[prevIndex].value;
                    this.focusOption(prevIndex);
                }
                break;
            case 'ArrowUp':
                e.preventDefault();
                const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
                this.ariaActivedescendant = items[prevIndex].value;
                this.focusOption(prevIndex);
                break;
            case 'Enter':
                e.preventDefault();
                if (this.ariaActivedescendant) {
                    this.selectOption(items[currentIndex]);
                }
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    focusOption(index) {
        const option = this.availableOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    getSelectedOptions() {
        return this.availableOptions.filter(option => option.selected);
    }
    renderOption(option) {
        return (h("li", { key: option.value, id: option.value, role: "option", tabindex: "0", "aria-selected": option.selected ? 'true' : 'false', onClick: e => {
                e.stopImmediatePropagation();
                this.selectOption(option);
            }, class: { selected: !!option.selected } }, h("label", { htmlFor: option.value }, h("input", { "aria-hidden": "true", id: option.value, type: "checkbox", checked: option.selected }), h("span", null, option.label))));
    }
    render() {
        return (h(Host, { key: 'f4652f92d5814ddc59b0af4f430b8c6bf8c53056' }, h("div", { key: 'ef1db0ae49a7c75cb9cfc909ac83b65d172d242b', class: "dropdown", part: "msd_dropdown" }, h("label", { key: '14c4bfa2dfebf9bb1c84f31926c0cb5113867218', class: "dropdown-label", part: "msd_dropdown-label" }, h("p", { key: '588aad0241a5afd894f11ab4826ec1c2e159e51e' }, h("span", { key: 'b99c592d1895a51075ea46e2f5ac94bed4d7d8d7', class: "label" }, this.label), this.required && h("span", { class: "required" }, "*")), h("slot", { key: '2161c9a28066e0cf26289cb2fb20493ef7be51da', name: "label-icon", "aria-hidden": "true" })), h("button", { key: '3a39cfacf9faaae6177df65e49e61ec5167be1b1', name: this.name, part: `msd_dropdown-button ${this.error ? 'msd_dropdown-button--error' : ''}`, class: { dropbtn: true, open: this.isOpen, error: !!this.error }, onClick: () => this.toggleDropdown(), "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name, onKeyDown: e => this.handleSelectButtonKeyDown(e) }, h("slot", { key: '5d09d93a9565e2f12c8d3f8f2a391832b576e5ee', name: "select-icon", "aria-hidden": "true" }), h("span", { key: '7f15d2a1644a44448cef246c4480354d4fa2c3d0', class: "selected-option", part: "msd_dropdown-button-selected-label" }, this.getSelectedOptions().length > 1 ? `Multiple options selected` : this.availableOptions.filter(o => o.selected)[0]?.label ?? this.availableOptions[0]?.label), h("span", { key: 'af988d0cb66e710b0a23e72392d4cc84d36a6e17', class: this.isOpen ? 'open' : 'closed', "aria-hidden": "true" }, h("chevron-icon", { key: '64efffb0e7ab44bc44b210eea413d946cbad4dc5', width: "16", height: "16" }))), this.error ? (h("span", { class: "error", part: "msd_dropdown_error" }, this.error)) : null, this.isOpen ? null : (h("div", { class: 'selected-options' }, this.getSelectedOptions().map(option => (h("span", { class: "selected-option" }, option.label, h("button", { key: option.label, onClick: () => this.selectOption(option) }, h("close-icon", null))))))), this.isOpen ? (h("div", { class: "dropdown-content", part: "msd_dropdown-content" }, h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-multiselectable": true, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.availableOptions.map(option => this.renderOption(option))))) : null)));
    }
    static get is() { return "multi-select-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["multi-select-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["multi-select-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the dropdown"
                },
                "attribute": "name",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The label of the dropdown"
                },
                "attribute": "label",
                "reflect": false
            },
            "options": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption[]",
                    "resolved": "DropdownOption[]",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options to display in the dropdown"
                },
                "defaultValue": "[]"
            },
            "error": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Error message to display"
                },
                "attribute": "error",
                "reflect": false,
                "defaultValue": "''"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The option to require selection of at leat one option."
                },
                "attribute": "required",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "availableOptions": {},
            "isOpen": {},
            "ariaActivedescendant": {},
            "shouldFocusFirstOption": {}
        };
    }
    static get events() {
        return [{
                "method": "selectedOptionsChanged",
                "name": "selectedOptionsChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected options are changed"
                },
                "complexType": {
                    "original": "{\n    value: string[];\n    name: string;\n  }",
                    "resolved": "{ value: string[]; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "optionsChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleOutsideClick",
                "target": "document",
                "capture": true,
                "passive": false
            }, {
                "name": "bookingFormSubmitted",
                "method": "handleBookingFormSubmitted",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=multi-select-dropdown.js.map
