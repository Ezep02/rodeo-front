{"version":3,"file":"nylas-confirmation-email.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-confirmation-email/test/nylas-confirmation-email.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,wDAAwD,CAAC;AACvF,OAAO,EAAE,cAAc,EAAE,MAAM,wDAAwD,CAAC;AACxF,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAElC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,IAAS,CAAC;IACd,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,WAAW,CAAC;YACvB,UAAU,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,sBAAsB,CAAC;YACnE,QAAQ,EAAE,GAAG,EAAE;gBACb,OAAO,gCAA0B,IAAI,EAAC,mBAAmB,EAAC,MAAM,EAAE,IAAI,GAAI,CAAC;YAC7E,CAAC;SACF,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QAC5E,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,uBAAuB,EAAE;YAC1D,MAAM,EAAE;gBACN,IAAI,EAAE,yBAAyB;gBAC/B,KAAK,EAAE,aAAa;aACrB;SACF,CAAC,CAAC;QACH,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasConfirmationEmail } from '../nylas-confirmation-email';\nimport { InputImageUrl } from '../../../design-system/input-image-url/input-image-url';\nimport { InputComponent } from '../../../design-system/input-component/input-component';\nimport { h } from '@stencil/core';\n\ndescribe('nylas-confirmation-email', () => {\n  let page: any;\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [InputImageUrl, InputComponent, NylasConfirmationEmail],\n      template: () => {\n        return <nylas-confirmation-email name=\"confirmationEmail\" isOpen={true} />;\n      },\n    });\n    await page.waitForChanges();\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should show error message when invalid logo url is entered', async () => {\n    const inputImageUrl = page.root.shadowRoot.querySelector('input-image-url');\n    const inputEvent = new CustomEvent('nylasFormInputChanged', {\n      detail: {\n        name: 'confirmation-email-logo',\n        value: 'invalid-url',\n      },\n    });\n    inputImageUrl.dispatchEvent(inputEvent);\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n});\n"]}