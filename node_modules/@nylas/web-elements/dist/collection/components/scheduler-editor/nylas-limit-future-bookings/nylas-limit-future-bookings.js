var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasLimitFutureBookings {
    constructor() {
        this.selectedConfiguration = undefined;
        this.availableDaysInFuture = undefined;
        this.name = 'limit-future-bookings';
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-limit-future-bookings', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const daysInFuture = newVal?.scheduler?.available_days_in_future || this.availableDaysInFuture || 1;
        if (daysInFuture) {
            this.updateNumberAndPeriodFromDays(daysInFuture);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(daysInFuture?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-limit-future-bookings', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-limit-future-bookings', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-limit-future-bookings', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromDays(this.availableDaysInFuture || 1);
        }
    }
    disconnectedCallback() {
        debug('nylas-limit-future-bookings', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let availableDaysInFuture;
        if (period === 'day') {
            availableDaysInFuture = number;
        }
        else if (period === 'week') {
            availableDaysInFuture = number * 7;
        }
        else {
            availableDaysInFuture = number * 30;
        }
        this.valueChanged.emit({ value: availableDaysInFuture, name: 'availableDaysInFuture' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(availableDaysInFuture.toString(), this.name);
    }
    updateNumberAndPeriodFromDays(days) {
        let number, period;
        if (days >= 30 && days % 30 === 0) {
            number = days / 30;
            period = 'month';
        }
        else if (days >= 7 && days % 7 === 0) {
            number = days / 7;
            period = 'week';
        }
        else {
            number = days;
            period = 'day';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTImePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (h(Host, { key: '5b673eeb329bc7d5159ced515ca79da4bc4f53e6' }, h("div", { key: '29cf8a9f181b71c98a5d001dc87d8c46249e8c35', class: "nylas-limit-future-bookings", part: "nlfb" }, h("label", { key: 'de9d2983117081c324c851fef9de5a873ea941df' }, i18next.t('nylasLimitFutureBookings.headerTitle'), h("span", { key: 'fd8e2e5457019bb259cb4c7374dff235c284e214', class: "label-icon" }, h("tooltip-component", { key: '549860a6d6bfa59a40abe5d00bd36acad51c0cf7' }, h("info-icon", { key: 'dcc2eecc7b3125dccfcb6287fbd9dd0bd58878d0', slot: "tooltip-icon" }), h("span", { key: 'f0a713a404d20dd97808546abe9060df0c63a56b', slot: "tooltip-content" }, i18next.t('nylasLimitFutureBookings.tooltip.desc'))))), showTImePeriodSelector && (h("time-period-selector", { id: "limit-future-bookings", timePeriods: [i18next.t('timePeriod', { context: 'day' }), i18next.t('timePeriod', { context: 'week' }), i18next.t('timePeriod', { context: 'month' })], exportparts: "tps__number-dropdown: nlfb__number-dropdown, tps__number-dropdown-button: nlfb__number-dropdown-button, tps__number-dropdown-content: nlfb__number-dropdown-content, tps__period-dropdown: nlfb__period-dropdown, tps__period-dropdown-button: nlfb__period-dropdown-button, tps__period-dropdown-content: nlfb__period-dropdown-content", defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get is() { return "nylas-limit-future-bookings"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-limit-future-bookings.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-limit-future-bookings.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "availableDaysInFuture": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The number of days into the future that invitees will see availability, as set in the configuration."
                        }],
                    "text": ""
                },
                "attribute": "available-days-in-future",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the limit future bookings input."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'limit-future-bookings'"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedNumber": {},
            "selectedPeriod": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the future booking limit changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "timePeriodChanged",
                "method": "timePeriodChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-limit-future-bookings',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLimitFutureBookings.prototype, "render", null);
//# sourceMappingURL=nylas-limit-future-bookings.js.map
