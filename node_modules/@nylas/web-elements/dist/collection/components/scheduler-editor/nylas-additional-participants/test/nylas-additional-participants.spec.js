import { newSpecPage } from "@stencil/core/testing";
import { NylasAdditionalParticipants } from "../nylas-additional-participants";
import { InputDropdown } from "../../../design-system/input-dropdown/input-dropdown";
import { NylasFormCard } from "../../nylas-form-card/nylas-form-card";
import { h } from "@stencil/core";
import { selectedConfiguration } from "../../../../utils/test-utils";
describe('nylas-additional-participants', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders', async () => {
        const page = await newSpecPage({
            components: [InputDropdown, NylasAdditionalParticipants],
            template: () => {
                return h("nylas-additional-participants", { name: "additionalParticipants" });
            },
        });
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
    });
    it('should not error for emails ending with .travel or .museum', async () => {
        let nylasAdditionalParticipant;
        const page = await newSpecPage({
            components: [NylasFormCard, InputDropdown, NylasAdditionalParticipants],
            template: () => {
                return (h("nylas-additional-participants", { name: "additionalParticipants", selectedConfiguration: {
                        ...selectedConfiguration,
                        availability: {
                            ...selectedConfiguration.availability,
                            availability_rules: {
                                ...selectedConfiguration.availability.availability_rules,
                                availability_method: 'collective',
                            },
                        },
                    }, participantOptions: [
                        {
                            name: 'Jane Doe',
                            email: 'janedoe@example.com',
                            calendars: [
                                {
                                    id: 'janedoe@example.com',
                                    name: 'Jane Doe',
                                },
                            ],
                        },
                    ] }));
            },
        });
        nylasAdditionalParticipant = page.rootInstance;
        await page.waitForChanges();
        nylasAdditionalParticipant.addParticipant();
        await page.waitForChanges();
        const inputEvent = new CustomEvent('nylasFormInputChanged', {
            detail: {
                name: '1',
                value: 'newemail@example.travel',
            },
        });
        nylasAdditionalParticipant.onInputOptionChanged(inputEvent);
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
    });
    it('should not error for emails ending with .travel or .museum', async () => {
        let nylasAdditionalParticipant;
        const page = await newSpecPage({
            components: [NylasFormCard, InputDropdown, NylasAdditionalParticipants],
            template: () => {
                return (h("nylas-additional-participants", { name: "additionalParticipants", selectedConfiguration: {
                        ...selectedConfiguration,
                        availability: {
                            ...selectedConfiguration.availability,
                            availability_rules: {
                                ...selectedConfiguration.availability.availability_rules,
                                availability_method: 'collective',
                            },
                        },
                    }, participantOptions: [
                        {
                            name: 'Jane Doe',
                            email: 'janedoe@example.com',
                            calendars: [
                                {
                                    id: 'janedoe@example.com',
                                    name: 'Jane Doe',
                                },
                            ],
                        },
                    ] }));
            },
        });
        nylasAdditionalParticipant = page.rootInstance;
        await page.waitForChanges();
        nylasAdditionalParticipant.addParticipant();
        await page.waitForChanges();
        const inputEvent = new CustomEvent('nylasFormInputChanged', {
            detail: {
                name: '1',
                value: 'abcd',
            },
        });
        nylasAdditionalParticipant.onInputOptionChanged(inputEvent);
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
    });
});
//# sourceMappingURL=nylas-additional-participants.spec.js.map
