{"version":3,"file":"nylas-additional-participants.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-additional-participants/test/nylas-additional-participants.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasAdditionalParticipants } from '../nylas-additional-participants';\nimport { InputDropdown } from '../../../design-system/input-dropdown/input-dropdown';\nimport { NylasFormCard } from '../../nylas-form-card/nylas-form-card';\nimport { h } from '@stencil/core';\nimport { selectedConfiguration } from '@/utils/test-utils';\n\ndescribe('nylas-additional-participants', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n  });\n\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [InputDropdown, NylasAdditionalParticipants],\n      template: () => {\n        return <nylas-additional-participants name=\"additionalParticipants\" />;\n      },\n    });\n\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should not error for emails ending with .travel or .museum', async () => {\n    let nylasAdditionalParticipant: NylasAdditionalParticipants;\n    const page = await newSpecPage({\n      components: [NylasFormCard, InputDropdown, NylasAdditionalParticipants],\n      template: () => {\n        return (\n          <nylas-additional-participants\n            name=\"additionalParticipants\"\n            selectedConfiguration={{\n              ...selectedConfiguration,\n              availability: {\n                ...selectedConfiguration.availability,\n                availability_rules: {\n                  ...selectedConfiguration.availability.availability_rules,\n                  availability_method: 'collective',\n                },\n              },\n            }}\n            participantOptions={[\n              {\n                name: 'Jane Doe',\n                email: 'janedoe@example.com',\n                calendars: [\n                  {\n                    id: 'janedoe@example.com',\n                    name: 'Jane Doe',\n                  },\n                ],\n              },\n            ]}\n          />\n        );\n      },\n    });\n    nylasAdditionalParticipant = page.rootInstance;\n    await page.waitForChanges();\n    nylasAdditionalParticipant.addParticipant();\n    await page.waitForChanges();\n    const inputEvent = new CustomEvent('nylasFormInputChanged', {\n      detail: {\n        name: '1',\n        value: 'newemail@example.travel',\n      },\n    });\n    nylasAdditionalParticipant.onInputOptionChanged(inputEvent);\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should not error for emails ending with .travel or .museum', async () => {\n    let nylasAdditionalParticipant: NylasAdditionalParticipants;\n    const page = await newSpecPage({\n      components: [NylasFormCard, InputDropdown, NylasAdditionalParticipants],\n      template: () => {\n        return (\n          <nylas-additional-participants\n            name=\"additionalParticipants\"\n            selectedConfiguration={{\n              ...selectedConfiguration,\n              availability: {\n                ...selectedConfiguration.availability,\n                availability_rules: {\n                  ...selectedConfiguration.availability.availability_rules,\n                  availability_method: 'collective',\n                },\n              },\n            }}\n            participantOptions={[\n              {\n                name: 'Jane Doe',\n                email: 'janedoe@example.com',\n                calendars: [\n                  {\n                    id: 'janedoe@example.com',\n                    name: 'Jane Doe',\n                  },\n                ],\n              },\n            ]}\n          />\n        );\n      },\n    });\n    nylasAdditionalParticipant = page.rootInstance;\n    await page.waitForChanges();\n    nylasAdditionalParticipant.addParticipant();\n    await page.waitForChanges();\n    const inputEvent = new CustomEvent('nylasFormInputChanged', {\n      detail: {\n        name: '1',\n        value: 'abcd',\n      },\n    });\n    nylasAdditionalParticipant.onInputOptionChanged(inputEvent);\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n});\n"]}