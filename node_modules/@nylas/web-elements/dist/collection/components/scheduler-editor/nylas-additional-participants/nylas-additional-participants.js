var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasAdditionalParticipants {
    constructor() {
        this.name = 'participants';
        this.selectedConfiguration = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.participantOptions = undefined;
        this.eventParticipants = undefined;
        this.selectedLanguage = undefined;
        this.participants = this.eventParticipants ?? [];
        this.participantErrors = {};
        this.includeOrganizerAsParticipant = true;
        this.isRoundRobinConfig = false;
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-additional-participants', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationAndCurrentUserChangedHandler(newValue, _oldValue, propName) {
        debug('nylas-additional-participants', 'selectedConfigurationAndCurrentUserChangedHandler', newValue, this.currentUser);
        if (propName === 'selectedConfiguration') {
            this.updateState(newValue, this.currentUser);
        }
        else if (propName === 'currentUser') {
            this.updateState(this.selectedConfiguration, newValue);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-additional-participants', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-additional-participants', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-additional-participants', 'componentDidLoad');
        this.updateState(this.selectedConfiguration, this.currentUser);
    }
    disconnectedCallback() {
        debug('nylas-additional-participants', 'disconnectedCallback');
    }
    updateState(selectedConfig, currentUser) {
        this.isRoundRobinConfig = selectedConfig?.availability?.availability_rules?.availability_method
            ? selectedConfig?.availability?.availability_rules?.availability_method !== 'collective'
            : false;
        this.participants = selectedConfig?.participants || [];
        this.includeOrganizerAsParticipant = this.isRoundRobinConfig && this.participants.find(p => p.email === currentUser?.email) ? true : false;
        this.updateOrganizerAsParticipant();
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function' && typeof this.internals.setValidity === 'function';
    }
    onInputOptionChanged(event) {
        debug('nylas-additional-participants', 'onInputOptionChanged');
        const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        const index = event.detail.name;
        const participant = this.participantOptions?.find(participant => participant.email === event.detail.value);
        if (!participant && this.isRoundRobinConfig) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'For round robin configuration, participant should be selected from the dropdown.');
            this.participantErrors[index] = 'For round robin page, participant should be selected from the dropdown.';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else if (!participant && !EMAIL_REGEX.test(event.detail.value)) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please enter a valid email address');
            this.participantErrors[index] = 'Please enter a valid email address';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else {
            this.participantErrors[index] = '';
            this.participants[index].is_valid = true;
            this.isInternalsAvailable && this.internals.setValidity({});
        }
        this.participants[index].email = event.detail.value;
        this.participants[index].availability = participant && participant.calendars[0].id ? { calendar_ids: [participant.calendars[0].id] } : undefined;
        this.participants[index].booking = participant && this.isRoundRobinConfig && participant.calendars[0].id ? { calendar_id: participant.calendars[0].id } : undefined;
        this.participants[index].name = participant?.name || event.detail.value;
        this.participants = [...this.participants];
        this.updateFormValue();
    }
    updateOrganizerAsParticipant() {
        const findCurrentUserInParticipants = this.participants.find(p => p.email === this.currentUser?.email);
        if (this.isRoundRobinConfig && !findCurrentUserInParticipants && this.currentUser?.email) {
            const bookingCalendarDefault = this.currentUserCalendars?.find(calendar => calendar.is_primary)?.id || this.currentUserCalendars?.[0]?.id || 'primary';
            this.participants = [
                {
                    name: this.currentUser?.name,
                    email: this.currentUser?.email,
                    is_organizer: true,
                    availability: {
                        calendar_ids: [bookingCalendarDefault],
                    },
                    booking: {
                        calendar_id: bookingCalendarDefault,
                    },
                },
                ...this.participants,
            ];
        }
        this.updateFormValue();
    }
    addParticipant() {
        debug('nylas-additional-participants', 'addParticipant');
        this.participants = [...this.participants, { name: '', email: '', is_organizer: false }];
        this.updateFormValue();
    }
    removeParticipant(index) {
        debug('nylas-additional-participants', 'removeParticipant');
        this.participants = this.participants.filter((_, i) => i !== index);
        this.updateFormValue();
    }
    updateFormValue() {
        debug('nylas-additional-participants', 'updateFormValue');
        const participants = this.isRoundRobinConfig ? (this.includeOrganizerAsParticipant ? this.participants : this.participants.filter(p => !p.is_organizer)) : this.participants;
        if (participants.length === 0) {
            this.isInternalsAvailable && this.internals.setValidity({ customError: true }, 'Please add at least one participant');
            this.error = 'Please add at least one participant';
        }
        else {
            this.isInternalsAvailable && this.internals.setValidity({});
            this.error = '';
            this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(participants), this.name);
            this.valueChanged.emit({ value: JSON.stringify(participants), name: this.name });
        }
    }
    getArrayDifference(array1, array2) {
        const filtered = array1.filter(participant1 => !array2.some(participant2 => participant1.email === participant2.email));
        return filtered.map(participant => {
            return { value: participant.email, label: participant.email };
        });
    }
    render() {
        return (h(Host, { key: 'ea4c8ab71ec5fc8b7b407a92e216a82cb07e5938', part: "nap" }, h("nylas-form-card", { key: '4356d11f502d22cb3d841cd51363cd870a39cca7' }, h("h3", { key: '71d104a4006bf51b0c3ad33bfcae977ec5205b01', slot: "header-title", class: "nylas-additional-participants__title", part: "nap__title" }, i18next.t('nylasAdditionalParticipants.headerTitle')), h("p", { key: 'a0f48316b69d2334970738bb0fd914edaf9349ec', slot: "header-subtitle", class: "nylas-additional-participants__subtitle", part: "nap__subtitle" }, i18next.t('nylasAdditionalParticipants.headerSubTitle')), h("div", { key: '51ee2ae0322c4e8ff25cbbffc3140607d2a4e6f7', slot: "content", class: "nylas-additional-participants__content" }, h("div", { key: 'fbb4fd7c67beb0255cdc68fd81ed01c13a7df435' }, this.participants.map((participant, index) => {
            return (h("div", { class: 'nylas-additional-participants__input_group', part: "nap__input_group" }, !participant.is_organizer && h("label", null, `${i18next.t('nylasAdditionalParticipants.participant')} ${index}`), h("div", { part: "nap__input_wrapper", class: {
                    'nylas-additional-participants__input_wrapper': true,
                    'nylas-additional-participants__input_wrapper_organizer': participant?.is_organizer === true,
                    'nylas-additional-participants__input_wrapper_invalid': participant.is_valid === false,
                    'error': participant.is_valid === false,
                } }, h("div", { class: { 'nylas-additional-participants__input': true, 'organizer': participant?.is_organizer === true }, part: "nap__input" }, participant.is_organizer ? (h("input-component", { class: 'label-input', name: `${index}`, key: index, label: i18next.t('nylasAdditionalParticipants.organizer'), required: false, readOnly: participant.is_organizer, defaultValue: participant.email }, this.isRoundRobinConfig && (h("div", { class: "required-input", slot: "additional-input" }, h("input", { type: "checkbox", name: `organizer_participant`, id: `organizer_participant`, onClick: () => {
                    this.includeOrganizerAsParticipant = !this.includeOrganizerAsParticipant;
                    this.updateFormValue();
                }, checked: this.includeOrganizerAsParticipant }), h("label", { htmlFor: `organizer_participant`, "aria-label": "Include as participant" }, h("span", { class: "org-as-participant", part: "nap__org-as-participant" }, i18next.t('nylasAdditionalParticipants.organizerAsParticipant')), h("tooltip-component", { id: "organizer_participant_tooltip" }, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, h("strong", null, i18next.t('nylasAdditionalParticipants.tooltip.includeOrganizer'), ":"), ' ', i18next.t('nylasAdditionalParticipants.tooltip.includeOrganizerDesc'), " ", h("br", null), h("strong", null, i18next.t('nylasAdditionalParticipants.tooltip.excludeOrganizer'), ":"), ' ', i18next.t('nylasAdditionalParticipants.tooltip.excludeOrganizerDesc')))))))) : (h("input-dropdown", { id: `${index}`, name: `${index}`, filterable: true, inputValue: participant.email, options: this.getArrayDifference(this.participantOptions || [], this.participants) })), !participant.is_organizer && (h("button", { onClick: () => this.removeParticipant(index), part: "nap__remove-participant" }, h("close-icon", null))))), !participant.is_valid && (h("p", { class: "nylas-additional-participants__error", part: "nap__error" }, this.participantErrors[index]))));
        }), h("p", { key: 'fb88e6a19e39f2d72167fb5b67109014a65a3d64', class: "nylas-additional-participants__error", part: "nap__error" }, this.error)), h("button", { key: '73b22041ab2ec94e051c262285ee72e4b5b7be1a', class: "nylas-additional-participants__add", part: "nap__add-participant", onClick: () => this.addParticipant() }, h("add-circle-icon", { key: '15bef3ca590565a885f0b7d80d825d073bdfd06f' }), ' ', h("span", { key: 'a805a79fca8e45ae974e634d344e21e5a816db3f' }, this.participants.length > 1
            ? i18next.t('nylasAdditionalParticipants.addParticipant', { context: 'next' })
            : i18next.t('nylasAdditionalParticipants.addParticipant', { context: 'first' })))))));
    }
    static get is() { return "nylas-additional-participants"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-additional-participants.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-additional-participants.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the component"
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'participants'"
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; provider?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The logged in user"
                        }],
                    "text": ""
                }
            },
            "currentUserCalendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The list of user's calendars."
                        }],
                    "text": ""
                }
            },
            "participantOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalParticipant[]",
                    "resolved": "AdditionalParticipant[] | undefined",
                    "references": {
                        "AdditionalParticipant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AdditionalParticipant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The additional participants options from the config"
                        }],
                    "text": ""
                }
            },
            "eventParticipants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[] | undefined",
                    "references": {
                        "Participant": {
                            "location": "global",
                            "id": "global::Participant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The event participants"
                        }],
                    "text": ""
                }
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "participants": {},
            "participantErrors": {},
            "includeOrganizerAsParticipant": {},
            "isRoundRobinConfig": {},
            "error": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected participants change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "currentUser",
                "methodName": "selectedConfigurationAndCurrentUserChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationAndCurrentUserChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "inputOptionChanged",
                "method": "onInputOptionChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-additional-participants',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasAdditionalParticipants.prototype, "render", null);
//# sourceMappingURL=nylas-additional-participants.js.map
