var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasMinCancellationNotice {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'min-cancellation-notice';
        this.minCancellationNotice = undefined;
        this.selectedLanguage = undefined;
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-min-cancellation-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minCancellationNotice = typeof newVal?.scheduler?.min_cancellation_notice !== 'undefined' ? newVal?.scheduler?.min_cancellation_notice : this.minCancellationNotice || 0;
        if (typeof minCancellationNotice === 'number') {
            this.updateNumberAndPeriodFromMinutes(minCancellationNotice);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(minCancellationNotice?.toString(), this.name);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-min-cancellation-notice', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-min-cancellation-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-min-cancellation-notice', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromMinutes(this.minCancellationNotice || 0);
        }
    }
    disconnectedCallback() {
        debug('nylas-min-cancellation-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minCancellationNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes == 0) {
            number = 0;
            period = 'minute';
        }
        else if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTimePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (h(Host, { key: '0687dca4c2ef8c3dd4496e905d11e0f97f4726bf' }, h("div", { key: 'a0a371d43f9988479eb444feb8be4fc753311105', class: "nylas-min-cancellation-notice", part: "nmcn" }, h("label", { key: '0adcbf86ef15737302b2a4f76b7a8b1b1b94bb95' }, i18next.t('nylasMinCancellationNotice.headerTitle'), h("span", { key: '2e0981cf4b37e033acf00cba54c1dd0ad28b7477', class: "label-icon" }, h("tooltip-component", { key: '0e1c20968919ae6adacc170eab834cd48da74690' }, h("info-icon", { key: '59b638d661f41eac21035c3cee34d1d20990abdd', slot: "tooltip-icon" }), h("span", { key: 'ea7aee5f2b520bb54f312f39b807f0ffd065473b', slot: "tooltip-content" }, i18next.t('nylasMinCancellationNotice.tooltip.desc'))))), showTimePeriodSelector && (h("time-period-selector", { id: "min-cancellation-notice", exportparts: "tps__number-dropdown: nmcn__number-dropdown, tps__number-dropdown-button: nmcn__number-dropdown-button, tps__number-dropdown-content: nmcn__number-dropdown-content, tps__period-dropdown: nmcn__period-dropdown, tps__period-dropdown-button: nmcn__period-dropdown-button, tps__period-dropdown-content: nmcn__period-dropdown-content", timePeriods: [
                i18next.t('timeDuration', { context: 'minute' }),
                i18next.t('timeDuration', { context: 'hour' }),
                i18next.t('timePeriod', { context: 'day' }),
                i18next.t('timePeriod', { context: 'week' }),
            ], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get is() { return "nylas-min-cancellation-notice"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-min-cancellation-notice.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-min-cancellation-notice.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the min cancellation notice input."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'min-cancellation-notice'"
            },
            "minCancellationNotice": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The minimum cancellation notice (minutes) stored in the configuration"
                        }],
                    "text": ""
                },
                "attribute": "min-cancellation-notice",
                "reflect": false
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedNumber": {},
            "selectedPeriod": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the value of the min cancellation notice changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "timePeriodChanged",
                "method": "timePeriodChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-min-cancellation-notice',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMinCancellationNotice.prototype, "render", null);
//# sourceMappingURL=nylas-min-cancellation-notice.js.map
