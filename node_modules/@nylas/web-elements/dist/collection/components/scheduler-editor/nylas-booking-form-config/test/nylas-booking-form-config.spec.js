import { newSpecPage } from "@stencil/core/testing";
import { NylasBookingFormConfig } from "../nylas-booking-form-config";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
import { h } from "@stencil/core";
import { selectedConfiguration } from "../../../../utils/test-utils";
jest.mock('sortablejs/modular/sortable.complete.esm.js', () => {
    return {
        __esModule: true,
        default: jest.fn().mockImplementation(() => ({
            destroy: jest.fn(),
            option: jest.fn(),
        })),
    };
});
describe('nylas-booking-form-config', () => {
    let page;
    beforeEach(async () => {
        page = await newSpecPage({
            components: [SelectDropdown, NylasBookingFormConfig],
            template: () => {
                return (h("nylas-booking-form-config", { selectedConfiguration: {
                        ...JSON.parse(JSON.stringify(selectedConfiguration)),
                        scheduler: {
                            ...selectedConfiguration.scheduler,
                            additional_fields: {
                                Short_Text_Label_1: {
                                    label: 'Short Text Label 1',
                                    type: 'text',
                                    required: false,
                                    order: 4,
                                },
                                Short_Text_Label_2: {
                                    label: 'Short Text Label 2',
                                    type: 'text',
                                    required: false,
                                    order: 5,
                                },
                                Short_Text_Label_5: {
                                    label: 'Short Text Label 5',
                                    type: 'text',
                                    required: false,
                                    order: 6,
                                },
                                Date_Label_3: {
                                    label: 'Date Label 3',
                                    type: 'date',
                                    required: false,
                                    order: 7,
                                },
                            },
                        },
                    } }));
            },
        });
        await page.waitForChanges();
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('should add new field with correct key and label', async () => {
        const fields = page.root.shadowRoot.querySelectorAll('.form-field.draggable:not(.fixed)');
        expect(fields).not.toBeNull();
        expect(fields.length).toBe(4);
        const dropdown = page.root.shadowRoot.querySelector('select-dropdown');
        const dropBtn = dropdown.shadowRoot.querySelector('button');
        dropBtn.click();
        await page.waitForChanges();
        const option = dropdown.shadowRoot.querySelector('li#text');
        option.click();
        const event = new CustomEvent('nylasFormDropdownChanged', {
            detail: {
                value: 'text',
                name: 'add-field',
            },
        });
        page.rootInstance.nylasFormDropdownChangedHandler(event);
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const newFields = page.root.shadowRoot.querySelectorAll('.form-field.draggable:not(.fixed)');
        expect(newFields).not.toBeNull();
        expect(newFields.length).toBe(5);
        const newField = newFields[newFields.length - 1];
        const h4Label = newField.querySelector('.form-field_header_text h4');
        expect(h4Label.textContent).toBe('Short Text Label');
    });
    it('should return the correct next number for the given array of keys', () => {
        const keys = ['dropdown_another-one_1', 'dropdown_Drop-for-something_2', 'dropdown_Whatever-choose-one_3', 'dropdown_Dropdown-Label_5'];
        const nextNumber = page.rootInstance.findNextMissingNumber(keys);
        expect(nextNumber).toBe(4);
    });
    it('should render the additional fields from the config', async () => {
        const headersBefore = page.root.shadowRoot.querySelectorAll('.form-field_header_text');
        expect(headersBefore.length).toBe(6);
        page.root.selectedConfiguration = {
            ...selectedConfiguration,
            scheduler: {
                ...selectedConfiguration.scheduler,
                additional_fields: {
                    key_1: {
                        default: 'abc',
                        label: 'key',
                        order: 2,
                        required: false,
                        type: 'text',
                    },
                },
            },
        };
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const headersAfter = page.root.shadowRoot.querySelectorAll('.form-field_header_text');
        expect(headersAfter.length).toBe(3);
    });
});
//# sourceMappingURL=nylas-booking-form-config.spec.js.map
