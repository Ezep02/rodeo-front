{"version":3,"file":"nylas-booking-form-config.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-booking-form-config/test/nylas-booking-form-config.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasBookingFormConfig } from '../nylas-booking-form-config';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\nimport { h } from '@stencil/core';\nimport { selectedConfiguration } from '@/utils/test-utils';\n\n// Mock the module\njest.mock('sortablejs/modular/sortable.complete.esm.js', () => {\n  return {\n    __esModule: true, // Indicates ES module import\n    default: jest.fn().mockImplementation(() => ({\n      destroy: jest.fn(),\n      option: jest.fn(),\n      // Add other methods you want to mock if needed\n    })),\n  };\n});\n\ndescribe('nylas-booking-form-config', () => {\n  let page: any;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [SelectDropdown, NylasBookingFormConfig],\n      template: () => {\n        return (\n          <nylas-booking-form-config\n            selectedConfiguration={{\n              ...JSON.parse(JSON.stringify(selectedConfiguration)),\n              scheduler: {\n                ...selectedConfiguration.scheduler,\n                additional_fields: {\n                  Short_Text_Label_1: {\n                    label: 'Short Text Label 1',\n                    type: 'text',\n                    required: false,\n                    order: 4,\n                  },\n                  Short_Text_Label_2: {\n                    label: 'Short Text Label 2',\n                    type: 'text',\n                    required: false,\n                    order: 5,\n                  },\n                  Short_Text_Label_5: {\n                    label: 'Short Text Label 5',\n                    type: 'text',\n                    required: false,\n                    order: 6,\n                  },\n                  Date_Label_3: {\n                    label: 'Date Label 3',\n                    type: 'date',\n                    required: false,\n                    order: 7,\n                  },\n                },\n              },\n            }}\n          />\n        );\n      },\n    });\n    await page.waitForChanges();\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should add new field with correct key and label', async () => {\n    const fields = page.root.shadowRoot.querySelectorAll('.form-field.draggable:not(.fixed)');\n    expect(fields).not.toBeNull();\n    expect(fields.length).toBe(4);\n    const dropdown = page.root.shadowRoot.querySelector('select-dropdown');\n    const dropBtn = dropdown.shadowRoot.querySelector('button');\n    dropBtn.click();\n    await page.waitForChanges();\n    const option = dropdown.shadowRoot.querySelector('li#text');\n    option.click();\n    const event = new CustomEvent('nylasFormDropdownChanged', {\n      detail: {\n        value: 'text',\n        name: 'add-field',\n      },\n    });\n    (page.rootInstance as NylasBookingFormConfig).nylasFormDropdownChangedHandler(event);\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n    const newFields = page.root.shadowRoot.querySelectorAll('.form-field.draggable:not(.fixed)');\n    expect(newFields).not.toBeNull();\n    expect(newFields.length).toBe(5);\n    const newField = newFields[newFields.length - 1];\n    const h4Label = newField.querySelector('.form-field_header_text h4');\n    expect(h4Label.textContent).toBe('Short Text Label');\n  });\n\n  it('should return the correct next number for the given array of keys', () => {\n    const keys = ['dropdown_another-one_1', 'dropdown_Drop-for-something_2', 'dropdown_Whatever-choose-one_3', 'dropdown_Dropdown-Label_5'];\n    const nextNumber = (page.rootInstance as NylasBookingFormConfig).findNextMissingNumber(keys);\n    expect(nextNumber).toBe(4);\n  });\n\n  it('should render the additional fields from the config', async () => {\n    const headersBefore = page.root.shadowRoot.querySelectorAll('.form-field_header_text');\n    // From tests above\n    expect(headersBefore.length).toBe(6);\n    page.root.selectedConfiguration = {\n      ...selectedConfiguration,\n      scheduler: {\n        ...selectedConfiguration.scheduler,\n        additional_fields: {\n          key_1: {\n            default: 'abc',\n            label: 'key',\n            order: 2,\n            required: false,\n            type: 'text',\n          },\n        },\n      },\n    };\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n    const headersAfter = page.root.shadowRoot.querySelectorAll('.form-field_header_text');\n    expect(headersAfter.length).toBe(3);\n  });\n});\n"]}