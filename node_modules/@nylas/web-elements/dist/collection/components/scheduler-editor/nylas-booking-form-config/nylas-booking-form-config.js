var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { DEFAULT_FORM_FIELD_TYPES, FIELD_TYPES } from "../../../common/constants";
import Sortable from "sortablejs";
import i18next from "../../../utils/i18n";
const staticFields = [
    {
        type: 'text',
        label: 'Your name',
        key: 'your_name',
        typeLabel: 'Short text',
        readonly: true,
        required: true,
        isOpen: false,
        order: 0,
    },
    {
        type: 'email',
        label: 'Your Email',
        key: 'your_email',
        typeLabel: 'Email',
        readonly: true,
        isOpen: false,
        required: true,
        order: 1,
    },
];
export class NylasBookingFormConfig {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'additional-fields';
        this.additionalFields = undefined;
        this.selectedLanguage = undefined;
        this.formFields = undefined;
        this.watchFields = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        this.updateFormFields(newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-booking-form-config', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-form-config', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-form-config', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.formFields = [...staticFields];
    }
    componentDidLoad() {
        debug('nylas-booking-form-config', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.updateFormFields(this.selectedConfiguration);
        }
    }
    updateFormFields(config) {
        this.watchFields = {
            title: config?.event_booking?.title || '',
            description: config?.event_booking?.description || '',
        };
        const additionalFields = Object.entries(config?.scheduler?.additional_fields || {}).map(([id, field]) => ({ ...field, key: id })) || this.additionalFields || [];
        this.formFields = [
            ...staticFields,
            ...additionalFields
                .sort((a, b) => a.order - b.order)
                .map((f, i) => {
                const fieldType = FIELD_TYPES.find(field => field.type === f.type);
                if (!fieldType) {
                    return { ...f, isOpen: false, typeLabel: 'Unknown' };
                }
                const typeLabel = fieldType.label;
                f.order = i + 2;
                return { ...f, isOpen: false, typeLabel };
            }),
        ];
        const container = this.host.shadowRoot?.getElementById('fields');
        Sortable.create(container, {
            animation: 150,
            swap: true,
            swapClass: 'highlight',
            onEnd: this.swapFields.bind(this),
            handle: '.form-field_header',
            filter: '.fixed',
            onMove: evt => !evt.related.classList.contains('fixed'),
        });
    }
    watchHandler(newValue) {
        const additionalFields = newValue;
        const sortedFields = additionalFields
            .filter(f => !f.readonly)
            .sort((a, b) => a.order - b.order)
            .map((f, i) => {
            const field = {
                type: f.type,
                required: f.required,
                label: f.label,
                order: i + 1,
                options: f.options,
                key: f.key,
                default: f.default,
            };
            return { ...field };
        });
        const addFieldsMap = sortedFields.reduce((acc, field) => {
            acc[field.key] = {
                type: field.type,
                required: field.required,
                order: field.order,
                options: field.options,
                label: field.label,
                default: field.default,
            };
            return acc;
        }, {});
        this.valueChanged.emit({
            value: addFieldsMap,
            name: this.name,
        });
    }
    findNextMissingNumber(arr) {
        if (arr.length === 0) {
            return 1;
        }
        const numbers = arr
            .map(item => {
            const parts = item.split('_');
            const lastPart = parts.pop();
            const parsedNumber = parseInt(lastPart || '', 10);
            return isNaN(parsedNumber) ? null : parsedNumber;
        })
            .filter((num) => num !== null)
            .sort((a, b) => a - b);
        for (let i = 0; i < numbers.length - 1; i++) {
            if (numbers[i + 1] !== numbers[i] + 1) {
                return numbers[i] + 1;
            }
        }
        return numbers.length > 0 ? numbers[numbers.length - 1] + 1 : 1;
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'add-field') {
            const field = FIELD_TYPES.find(f => f.type === value);
            const maxOrder = Math.max(...this.formFields.map(f => f.order));
            const existingFieldKeys = this.formFields.filter(f => f.type === field.type).map(f => f.key);
            const next = this.findNextMissingNumber(existingFieldKeys);
            const newField = { ...field, label: field.label, key: `${field.type}_${field.label.split(' ').join('-')}_${next}`, order: maxOrder + 1 };
            this.formFields = [...this.formFields, newField];
        }
    }
    nylasFormInputChangedHandler(event) {
        const { name } = event.detail;
        if (name.startsWith('default-value-')) {
            const fieldIndex = parseInt(name.split('-').pop() || '0');
            this.fieldDefaultValueChanged(fieldIndex, event);
        }
        else {
            const [fieldIndex, optionIndex] = name.split('_');
            if (optionIndex) {
                this.fieldOptionChange(parseInt(fieldIndex), parseInt(optionIndex), event);
            }
            else {
                this.fieldLabelChange(parseInt(fieldIndex), event);
            }
        }
    }
    valueChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'title' || name === 'description') {
            this.watchFields = {
                ...this.watchFields,
                [name]: value,
            };
        }
    }
    swapFields(event) {
        const { oldIndex, newIndex } = event;
        if (oldIndex !== undefined && newIndex !== undefined && oldIndex !== newIndex) {
            const newArray = [...this.formFields].map(f => {
                if (f.order === oldIndex) {
                    return {
                        ...f,
                        order: newIndex,
                    };
                }
                if (f.order === newIndex) {
                    return {
                        ...f,
                        order: oldIndex,
                    };
                }
                return f;
            });
            this.formFields = newArray;
        }
    }
    fieldToggle(index) {
        this.formFields = this.formFields.map((f, i) => {
            if (index == i) {
                f.isOpen = !f.isOpen;
            }
            return f;
        });
    }
    fieldRemove(index) {
        this.formFields = this.formFields.filter((_, i) => i !== index);
    }
    fieldRequired(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.required = !field.required;
            }
            return field;
        });
    }
    fieldLabelChange(ind, event) {
        const target = event.detail;
        let fieldCopy = {};
        this.formFields = this.formFields.map((field, i) => {
            if (i === ind) {
                const existingKey = field.key;
                const indexNumber = existingKey.split('_').pop();
                const label = target.value;
                fieldCopy = {
                    ...field,
                    label: label,
                    key: `${field.type}_${label.split(' ').join('-')}_${indexNumber}`,
                };
                return fieldCopy;
            }
            return field;
        });
    }
    fieldOptionAdd(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = [...field.options, ''];
            }
            return field;
        });
    }
    fieldOptionRemove(fieldIndex, index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.filter((_, i) => i !== index);
            }
            return field;
        });
    }
    fieldOptionChange(fieldIndex, index, event) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.map((o, i) => {
                    if (i === index) {
                        o = event.detail.value;
                    }
                    return o;
                });
            }
            return field;
        });
    }
    fieldDefaultValueChanged(index, event) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.default = event.detail.value;
            }
            return field;
        });
    }
    render() {
        return (h(Host, { key: '4004c0f2c2f7b342fff54e556c65a11d02151d86' }, h("div", { key: '380fc44efdfb62bf34326fa9a9afe381afb125c0', class: "nylas-booking-form-config", part: "nbfc" }, h("div", { key: 'bb019f2e7287097b6f460d2f8a74401dc2932529', class: "header", part: "nbfc__header" }, h("div", { key: '6367eb192c9d44fda1d84620f477ba72d335fcd3', class: "header_text" }, h("h3", { key: '2517ad6e9a63bf1785cf30de049b9649c51c3c44' }, i18next.t('nylasBookingFormConfig.headerTitle')), h("p", { key: '4edc44df3ed0fca7cf0af3ab3bcbaa4004c77768' }, i18next.t('nylasBookingFormConfig.headerSubTitle'))), h("div", { key: '475aa400b793b1789d67289882ef291507899284', class: "header_action" }, h("select-dropdown", { key: 'de0f3239ba3881fc9a6bb48117e12c6aefd4a0f0', name: "add-field", exportparts: "sd_dropdown: nbfc__add_field, sd_dropdown-button: nbfc__add_field-button, sd_dropdown-content: nbfc__add_field-dropdown-content", options: DEFAULT_FORM_FIELD_TYPES, withSearch: false, withChevron: false, dropdownButtonText: i18next.t('nylasBookingFormConfig.dropdownButtonText') }, h("span", { key: '083952ce85504ba15ba4d5445bad520b5d27ad44', slot: "select-icon" }, h("plus-icon", { key: '1d3fe9fe8774ffe544e8398034ea894e6dc612be', width: "15", height: "15" }))))), h("div", { key: 'b77ba6b9af91acfe48726632696354b37056757b', class: "content" }, h("div", { key: '893b8a6060e6e9415603a47d339b2f9f1d9b7fae', id: "fields", class: "additional_fields", part: "nbfc__additional_fields" }, this.formFields.map((field, i) => {
            return (h("div", { class: `form-field draggable ${field.readonly && 'fixed'}`, part: "nbfc__form_field", key: i }, h("div", { class: "form-field_header", part: "nbfc__form_field-header" }, h("span", { class: "dragable" }, h("dragable-icon", { width: "24", height: "25" })), h("div", { class: "form-field_header_text" }, h("h4", null, field.label), h("p", null, field.typeLabel)), h("div", { class: "form-field_header_actions" }, h("span", { class: `is-required` }, field.required ? 'Required' : 'Optional'), !field.readonly && (h("button", { onClick: () => {
                    const title = this.watchFields.title;
                    const description = this.watchFields.description;
                    if (title && title.includes(field.key)) {
                        field.error = 'This field is used in the event title and cannot be removed.';
                        this.formFields = [...this.formFields];
                        setTimeout(() => {
                            field.error = '';
                            this.formFields = [...this.formFields];
                        }, 3000);
                        return;
                    }
                    if (description && description.includes(field.key)) {
                        field.error = 'This field is used in the event description and cannot be removed.';
                        this.formFields = [...this.formFields];
                        setTimeout(() => {
                            field.error = '';
                            this.formFields = [...this.formFields];
                        }, 3000);
                        return;
                    }
                    this.fieldRemove(i);
                } }, h("close-icon", null))), h("span", { class: `chevron ${field.isOpen ? 'open' : 'closed'}`, onClick: () => {
                    this.fieldToggle(i);
                } }, h("chevron-icon", { width: "24", height: "24" })))), h("span", { class: {
                    'error': true,
                    'fade-out': !field?.error || field.error === '',
                } }, field.error), h("div", { class: `form-field_content ${!field.isOpen && 'hidden'}`, part: "nbfc__form_field-content" }, h("div", { class: "inputs" }, h("input-component", { class: 'label-input', name: `${i}`, key: i, label: "Label", required: false, readOnly: field.readonly, defaultValue: field.label }, h("div", { class: "required-input", slot: "additional-input" }, h("input", { type: "checkbox", name: `required_${field.order}`, id: `required_${field.order}`, onClick: () => {
                    this.fieldRequired(i);
                }, checked: field.required, disabled: field.readonly }), h("label", { htmlFor: `required_${field.order}`, "aria-label": "Required" }, i18next.t('required')))), !field.readonly && field.type !== 'date' && (h("input-component", { class: 'default-value', name: `default-value-${i}`, key: i, label: "Default value", required: false, readOnly: field.readonly, defaultValue: field.default })), !field.readonly && field.type === 'date' && (h("nylas-date-component", { class: 'default-value', name: `default-value-${i}`, key: i, label: "Default value", required: false, readOnly: field.readonly, defaultValue: field.default }))), field.options != undefined && (h("div", { class: "options-container" }, h("h4", null, i18next.t('nylasBookingFormConfig.allOptionsHeader')), h("div", { class: "options" }, field.options.map((o, j) => {
                return (h("div", { class: "option" }, h("input-component", { key: j, name: `${i}_${j}`, label: field.typeLabel + ' option ' + (j + 1), required: true, defaultValue: o }, j > 1 && (h("div", { class: "required-input", slot: "additional-input" }, h("button", { onClick: () => {
                        this.fieldOptionRemove(i, j);
                    } }, h("close-icon", null)))))));
            })), h("button", { onClick: () => {
                    this.fieldOptionAdd(i);
                }, part: "nap__add-time-range" }, h("add-circle-icon", null), " ", i18next.t('nylasBookingFormConfig.addOption')))))));
        }))))));
    }
    static get is() { return "nylas-booking-form-config"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-form-config.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-form-config.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "The selected configuration."
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the booking form config."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'additional-fields'"
            },
            "additionalFields": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalFields[]",
                    "resolved": "AdditionalFields[] | undefined",
                    "references": {
                        "AdditionalFields": {
                            "location": "global",
                            "id": "global::AdditionalFields"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The additional fields to be displayed on the booking form."
                }
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "formFields": {},
            "watchFields": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected availability / open hours change."
                },
                "complexType": {
                    "original": "{\n    value: Record<string, AdditionalFields>;\n    name: string;\n  }",
                    "resolved": "{ value: Record<string, AdditionalFields>; name: string; }",
                    "references": {
                        "Record": {
                            "location": "global",
                            "id": "global::Record"
                        },
                        "AdditionalFields": {
                            "location": "global",
                            "id": "global::AdditionalFields"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }, {
                "propName": "formFields",
                "methodName": "watchHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "valueChanged",
                "method": "valueChangedHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-form-config',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingFormConfig.prototype, "render", null);
//# sourceMappingURL=nylas-booking-form-config.js.map
