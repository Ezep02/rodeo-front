{"version":3,"file":"nylas-participants-custom-availability.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-participants-custom-availability/test/nylas-participants-custom-availability.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasParticipantsCustomAvailability } from '../nylas-participants-custom-availability';\nimport { NylasAvailabilityPicker } from '../../nylas-availability-picker/nylas-availability-picker';\nimport { h } from '@stencil/core';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\nimport { selectedConfiguration } from '@/utils/test-utils';\n\ndescribe('nylas-participants-custom-availability', () => {\n  beforeEach(() => {\n    const originalIntl = Intl;\n\n    global.Intl = {\n      ...originalIntl,\n      DateTimeFormat: jest.fn().mockImplementation(() => ({\n        resolvedOptions: () => ({\n          timeZone: 'America/New_York',\n        }),\n        supportedLocalesOf: jest.fn(),\n      })) as any,\n    };\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('selects default timezone passed as prop', async () => {\n    const config = JSON.parse(JSON.stringify(selectedConfiguration));\n    config.participants[0].timezone = 'Africa/Accra';\n    const page = await newSpecPage({\n      components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-participants-custom-availability name=\"participant-xyx\" selectedConfiguration={config}></nylas-participants-custom-availability>\n          </form>\n        );\n      },\n    });\n\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n    const form = page.root?.shadowRoot?.querySelector('.nylas-participants-custom-availability .content form');\n    const participant1 = form?.querySelector('.participant-container');\n    const chevron = participant1?.querySelector('.participant-title .chevron');\n    chevron?.dispatchEvent(new Event('click'));\n    await page.waitForChanges();\n    const availabilityPicker = page.root?.shadowRoot?.querySelector('nylas-availability-picker');\n    expect(availabilityPicker).not.toBeNull();\n    const timezoneDropdown = availabilityPicker?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;\n    const timezoneButton = timezoneDropdown?.querySelector('button');\n    expect(timezoneButton).not.toBeNull();\n    expect(timezoneButton?.textContent).toEqual('Africa / Accra');\n  });\n\n  it('handles nylasFormSwitchToggled event correctly when checked is true', async () => {\n    const config = JSON.parse(JSON.stringify(selectedConfiguration));\n    config.participants[0].availability = { open_hours: [{ day: 1, start: '09:00', end: '17:00' }] };\n    const page = await newSpecPage({\n      components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-participants-custom-availability name=\"participant-xyx\" selectedConfiguration={config}></nylas-participants-custom-availability>\n          </form>\n        );\n      },\n    });\n\n    await page.waitForChanges();\n    const component = page.rootInstance;\n    const event = new CustomEvent('nylasFormSwitchToggled', {\n      detail: { checked: true, name: config.participants[0].email, label: true },\n    });\n    component.nylasFormSwitchToggledHandler(event);\n\n    await page.waitForChanges();\n    expect(component.selectedParticipants[config.participants[0].email].isOpen).toBe(true);\n    expect(component.selectedParticipants[config.participants[0].email].setCustom).toBe(true);\n    expect(component.selectedParticipants[config.participants[0].email].openHours).toEqual(config.participants[0].availability.open_hours);\n    expect(component.selectedParticipants[config.participants[0].email].timezone).toBe(config.participants[0].timezone);\n  });\n\n  it('handles nylasFormSwitchToggled event correctly when checked is false', async () => {\n    const config = JSON.parse(JSON.stringify(selectedConfiguration));\n    config.participants[0].availability = { open_hours: [{ day: 1, start: '09:00', end: '17:00' }] };\n    const page = await newSpecPage({\n      components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],\n      template: () => {\n        return (\n          <form id=\"availability-picker\">\n            <nylas-participants-custom-availability name=\"participant-xyx\" selectedConfiguration={config}></nylas-participants-custom-availability>\n          </form>\n        );\n      },\n    });\n\n    await page.waitForChanges();\n    const component = page.rootInstance;\n    const event = new CustomEvent('nylasFormSwitchToggled', {\n      detail: { checked: false, name: config.participants[0].email, label: true },\n    });\n    component.nylasFormSwitchToggledHandler(event);\n\n    await page.waitForChanges();\n    expect(component.selectedParticipants[config.participants[0].email].isOpen).toBe(false);\n    expect(component.selectedParticipants[config.participants[0].email].setCustom).toBe(false);\n    expect(component.selectedParticipants[config.participants[0].email].openHours).toEqual([]);\n    expect(component.selectedParticipants[config.participants[0].email].timezone).toBeUndefined();\n  });\n});\n"]}