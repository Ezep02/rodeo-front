var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { DEFAULT_OPEN_HOURS } from "../../../common/constants";
import i18next from "../../../utils/i18n";
export class NylasParticipantsCustomAvailability {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'participant-custom-availability';
        this.participants = this.selectedConfiguration?.participants || [];
        this.selectedLanguage = undefined;
        this.selectedParticipants = this.setParticipants(this.participants);
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-participants-custom-availability', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    participantsChangedHandler(newValue, oldValue) {
        debug('nylas-participants-custom-availability', 'participantsChangedHandler', newValue, oldValue);
        this.selectedParticipants = this.setParticipants(newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        debug('nylas-participants-custom-availability', 'selectedConfigurationChangedHandler', newValue, oldValue);
        if (newValue?.participants) {
            this.selectedParticipants = this.setParticipants(newValue?.participants);
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-participants-custom-availability', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-participants-custom-availability', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-participants-custom-availability', 'componentWillLoad');
    }
    componentDidLoad() {
        debug('nylas-participants-custom-availability', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedParticipants = this.setParticipants(this.selectedConfiguration?.participants);
        }
        else {
            this.selectedParticipants = this.setParticipants(this.participants);
        }
    }
    nylasFormSwitchToggledHandler(event) {
        debug('nylas-participants-custom-availability', 'nylasFormSwitchToggledHandler', event.detail);
        const existingParticipant = this.selectedConfiguration?.participants.find(participant => participant.email === event.detail.name);
        const existingOpenHours = existingParticipant?.availability?.open_hours;
        const openHours = existingOpenHours || this.selectedConfiguration?.availability?.availability_rules?.default_open_hours || [];
        const timeZone = existingOpenHours && existingOpenHours.length > 0
            ? existingParticipant?.timezone
            : this.selectedConfiguration?.availability?.availability_rules?.default_open_hours?.at(0)?.timezone ||
                this.selectedConfiguration?.event_booking?.timezone ||
                window.Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedParticipants[event.detail.name]['isOpen'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['setCustom'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['openHours'] = event.detail.checked ? (openHours?.length > 0 ? openHours : DEFAULT_OPEN_HOURS) : [];
        this.selectedParticipants[event.detail.name]['timezone'] = event.detail.checked ? timeZone : undefined;
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    handleValueChanged(event) {
        debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-')) {
            return;
        }
        if (this.isInternalsAvailable) {
            if (!this.participantFormRef.checkValidity()) {
                this.internals.setValidity({ customError: true }, 'Please fix the overlapping time ranges.');
                return;
            }
            else {
                this.internals.setValidity({});
            }
        }
        const jsonValue = JSON.parse(value);
        const key = name.split('-')[2];
        if (!this.selectedParticipants[key])
            return;
        this.selectedParticipants[key]['openHours'] = jsonValue.openHours;
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    updateFormValue() {
        const participantOpenHours = {};
        const participants = this.selectedConfiguration?.participants || this.participants;
        participants.forEach(participant => {
            participantOpenHours[participant.email] = this.selectedParticipants[participant.email].openHours;
        });
        this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(participantOpenHours), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantOpenHours), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            selectedParticipants[participant.email] = {
                isOpen: false,
                setCustom: Boolean(participant.availability?.open_hours),
                openHours: participant.availability?.open_hours || [],
                name: participant.name || participant.email,
                availability: participant.availability,
                timezone: participant.timezone,
            };
        });
        return selectedParticipants;
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function' && typeof this.internals.setValidity === 'function';
    }
    render() {
        return (h(Host, { key: 'ff6765c725b2c24a63e131ac7d4d52e0572c8f52' }, h("div", { key: 'dae18b83f3d342db5e3c058f9c782aa280811637', class: "nylas-participants-custom-availability", part: "npca" }, h("div", { key: 'a76dcaa11e0e2eb6b56aec6b58eb7c12d910e571', class: "header", part: "npca__header" }, h("h3", { key: 'd2c05942fca786c6ae06aa912dd81eb84607f27b' }, i18next.t('nylasParticipantCustomAvailability.headerTitle')), h("p", { key: '3d7b2e15f6e5c9a528886c5e3b8702bfee33a36e' }, i18next.t('nylasParticipantCustomAvailability.headerSubTitle'))), h("div", { key: '46520d59984a8dcea6e28fa72a0da64c6468b5ca', class: "content", part: "npca__content" }, h("form", { key: 'ce08bb8a25d1133ddfeb765c98088dbc3e3a2ec9', ref: el => (this.participantFormRef = el) }, Object.keys(this.selectedParticipants).map((key, index) => {
            const participant = this.selectedParticipants[key];
            const participantOpenHours = participant.availability?.open_hours || [];
            if (!participant || !participant.name || !participant.availability)
                return;
            return (h("div", { class: "participant-container", part: "npca__participant-container", key: `participant-conatiner-${index}` }, h("div", { class: "participant-title", part: "npca__participant-title" }, h("p", null, i18next.t('nylasParticipantCustomAvailability.participantOpenHoursTitle', { participantName: participant.name })), h("div", { class: "participant-toggle", part: "npca__participant-toggle--container" }, h("toggle-switch", { exportparts: "ts_label: npca__toggle-label, ts_input: npca_toggle-input, ts_slider: npca_toggle-slider", name: key, checked: !!participant?.openHours && participant?.openHours.length > 0 }), h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'} ${participant.setCustom ? '' : 'disabled'}`, onClick: () => {
                    if (!participant.setCustom)
                        return;
                    this.selectedParticipants[key].isOpen = !participant.isOpen;
                    this.selectedParticipants = { ...this.selectedParticipants };
                } }, h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (h("nylas-availability-picker", { key: index, name: `participant-${index}-${key}`, openHours: participantOpenHours, defaultTimezone: participant.timezone, hideHeader: true }))));
        }))))));
    }
    static get is() { return "nylas-participants-custom-availability"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-participants-custom-availability.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-participants-custom-availability.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the participants custom availability."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'participant-custom-availability'"
            },
            "participants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[]",
                    "references": {
                        "Participant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Participant"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The participants selected in the add participants section."
                        }],
                    "text": ""
                },
                "defaultValue": "this.selectedConfiguration?.participants || []"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedParticipants": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the participants custom availability changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "participants",
                "methodName": "participantsChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormSwitchToggled",
                "method": "nylasFormSwitchToggledHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "valueChanged",
                "method": "handleValueChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-participants-custom-availability',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasParticipantsCustomAvailability.prototype, "render", null);
//# sourceMappingURL=nylas-participants-custom-availability.js.map
