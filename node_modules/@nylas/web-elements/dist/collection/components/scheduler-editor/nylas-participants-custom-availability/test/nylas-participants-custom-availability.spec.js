import { newSpecPage } from "@stencil/core/testing";
import { NylasParticipantsCustomAvailability } from "../nylas-participants-custom-availability";
import { NylasAvailabilityPicker } from "../../nylas-availability-picker/nylas-availability-picker";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
import { selectedConfiguration } from "../../../../utils/test-utils";
describe('nylas-participants-custom-availability', () => {
    beforeEach(() => {
        const originalIntl = Intl;
        global.Intl = {
            ...originalIntl,
            DateTimeFormat: jest.fn().mockImplementation(() => ({
                resolvedOptions: () => ({
                    timeZone: 'America/New_York',
                }),
                supportedLocalesOf: jest.fn(),
            })),
        };
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('selects default timezone passed as prop', async () => {
        const config = JSON.parse(JSON.stringify(selectedConfiguration));
        config.participants[0].timezone = 'Africa/Accra';
        const page = await newSpecPage({
            components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-participants-custom-availability", { name: "participant-xyx", selectedConfiguration: config })));
            },
        });
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const form = page.root?.shadowRoot?.querySelector('.nylas-participants-custom-availability .content form');
        const participant1 = form?.querySelector('.participant-container');
        const chevron = participant1?.querySelector('.participant-title .chevron');
        chevron?.dispatchEvent(new Event('click'));
        await page.waitForChanges();
        const availabilityPicker = page.root?.shadowRoot?.querySelector('nylas-availability-picker');
        expect(availabilityPicker).not.toBeNull();
        const timezoneDropdown = availabilityPicker?.shadowRoot?.querySelector('.select-timezone select-dropdown')?.shadowRoot;
        const timezoneButton = timezoneDropdown?.querySelector('button');
        expect(timezoneButton).not.toBeNull();
        expect(timezoneButton?.textContent).toEqual('Africa / Accra');
    });
    it('handles nylasFormSwitchToggled event correctly when checked is true', async () => {
        const config = JSON.parse(JSON.stringify(selectedConfiguration));
        config.participants[0].availability = { open_hours: [{ day: 1, start: '09:00', end: '17:00' }] };
        const page = await newSpecPage({
            components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-participants-custom-availability", { name: "participant-xyx", selectedConfiguration: config })));
            },
        });
        await page.waitForChanges();
        const component = page.rootInstance;
        const event = new CustomEvent('nylasFormSwitchToggled', {
            detail: { checked: true, name: config.participants[0].email, label: true },
        });
        component.nylasFormSwitchToggledHandler(event);
        await page.waitForChanges();
        expect(component.selectedParticipants[config.participants[0].email].isOpen).toBe(true);
        expect(component.selectedParticipants[config.participants[0].email].setCustom).toBe(true);
        expect(component.selectedParticipants[config.participants[0].email].openHours).toEqual(config.participants[0].availability.open_hours);
        expect(component.selectedParticipants[config.participants[0].email].timezone).toBe(config.participants[0].timezone);
    });
    it('handles nylasFormSwitchToggled event correctly when checked is false', async () => {
        const config = JSON.parse(JSON.stringify(selectedConfiguration));
        config.participants[0].availability = { open_hours: [{ day: 1, start: '09:00', end: '17:00' }] };
        const page = await newSpecPage({
            components: [NylasParticipantsCustomAvailability, NylasAvailabilityPicker, SelectDropdown],
            template: () => {
                return (h("form", { id: "availability-picker" }, h("nylas-participants-custom-availability", { name: "participant-xyx", selectedConfiguration: config })));
            },
        });
        await page.waitForChanges();
        const component = page.rootInstance;
        const event = new CustomEvent('nylasFormSwitchToggled', {
            detail: { checked: false, name: config.participants[0].email, label: true },
        });
        component.nylasFormSwitchToggledHandler(event);
        await page.waitForChanges();
        expect(component.selectedParticipants[config.participants[0].email].isOpen).toBe(false);
        expect(component.selectedParticipants[config.participants[0].email].setCustom).toBe(false);
        expect(component.selectedParticipants[config.participants[0].email].openHours).toEqual([]);
        expect(component.selectedParticipants[config.participants[0].email].timezone).toBeUndefined();
    });
});
//# sourceMappingURL=nylas-participants-custom-availability.spec.js.map
