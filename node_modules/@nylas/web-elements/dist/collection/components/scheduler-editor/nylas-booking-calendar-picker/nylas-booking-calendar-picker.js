var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasBookingCalendarPicker {
    constructor() {
        this.calendars = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.name = 'booking-calendar';
        this.defaultBookingCalendar = '';
        this.hideHeader = false;
        this.expressFlow = false;
        this.selectedLanguage = undefined;
        this.selectedCalendar = '';
    }
    connectedCallback() {
        debug('nylas-booking-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-booking-calendar-picker', 'componentDidLoad');
        const primaryCalendar = this.calendars?.find(calendar => calendar.is_primary)?.id;
        const firstCalendar = this.calendars?.[0]?.id;
        this.defaultBookingCalendar = this.defaultBookingCalendar || primaryCalendar || firstCalendar || '';
        this.isInternalsAvailable && this.internals.setFormValue(this.defaultBookingCalendar.toString(), this.name);
        this.selectedCalendar = this.defaultBookingCalendar;
    }
    componentWillUpdate() {
        debug('nylas-booking-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-booking-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-booking-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-booking-calendar-picker', 'componentDidRender');
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-booking-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    currentUserCalendarsChangedHandler(newValue) {
        debug('nylas-booking-calendar-picker', 'currentUserCalendarsChangedHandler', newValue);
        this.currentUserCalendars = newValue;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-booking-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        this.isInternalsAvailable && this.internals.setValidity({});
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedCalendar = value;
            this.isInternalsAvailable && this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const currentUserCalendarOptions = this.currentUserCalendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const optionsFromCalendars = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const calendarOptions = optionsFromCalendars?.length > 0 ? optionsFromCalendars : currentUserCalendarOptions || [];
        const defaultOption = calendarOptions.find(cal => cal.value == this.defaultBookingCalendar);
        return (h(Host, null, h("div", { class: "nylas-booking-calendar-picker", part: "nbcp" }, !this.hideHeader && (h("div", { class: "header", part: "nbcp__header" }, h("h3", null, i18next.t('nylasBookingCalendarPicker.headerTitle')), h("p", null, i18next.t('nylasBookingCalendarPicker.headerSubTitle'), h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, i18next.t('nylasBookingCalendarPicker.tooltip.desc')))))), calendarOptions.length > 0 ? (h("div", { class: "nylas-booking-calendar-picker__dropdown" }, h("select-dropdown", { name: "booking-calendar", options: [{ value: '', label: i18next.t('nylasBookingCalendarPicker.selectOptionLabel') }, ...calendarOptions], withSearch: false, required: this.expressFlow, emptyValue: i18next.t('nylasBookingCalendarPicker.selectOptionLabel'), errorMessage: i18next.t('nylasBookingCalendarPicker.selectCalendarErrorMessage'), exportparts: "sd_dropdown: nbcp__dropdown, sd_dropdown-button: nbcp__dropdown-button, sd_dropdown-content: nbcp__dropdown-content", defaultSelectedOption: defaultOption ? defaultOption : null }))) : (h("div", { class: "nylas-booking-calendar-picker__loading" }, h("span", { class: "label" }, i18next.t('nylasBookingCalendarPicker.tooltip.desc'), " ", h("info-icon", null)), h("div", { class: "loading-button" }, h("span", null, i18next.t('loading'), "...")))))));
    }
    static get is() { return "nylas-booking-calendar-picker"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-calendar-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-calendar-picker.css"]
        };
    }
    static get properties() {
        return {
            "calendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The calendars to choose from."
                        }],
                    "text": ""
                }
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; provider?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The current logged in user."
                        }],
                    "text": ""
                }
            },
            "currentUserCalendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The list of user's calendars."
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the calendar picker."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'booking-calendar'"
            },
            "defaultBookingCalendar": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The default selected calendar."
                        }],
                    "text": ""
                },
                "attribute": "default-booking-calendar",
                "reflect": false,
                "defaultValue": "''"
            },
            "hideHeader": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The prop to hide the header."
                },
                "attribute": "hide-header",
                "reflect": false,
                "defaultValue": "false"
            },
            "expressFlow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Prop for express flow when creating a config"
                },
                "attribute": "express-flow",
                "reflect": false,
                "defaultValue": "false"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedCalendar": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected booking calendar changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "currentUserCalendars",
                "methodName": "currentUserCalendarsChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingCalendarPicker.prototype, "render", null);
//# sourceMappingURL=nylas-booking-calendar-picker.js.map
