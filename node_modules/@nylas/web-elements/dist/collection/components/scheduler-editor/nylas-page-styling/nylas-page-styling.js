var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, sanitize } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasPageStyling {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'page-styling';
        this.appearance = undefined;
        this.isOpen = true;
        this.selectedLanguage = undefined;
        this.currentAppearance = undefined;
        this.customInputsSlot = null;
    }
    connectedCallback() {
        debug('nylas-page-styling', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-page-styling', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-page-styling', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-page-styling', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
    }
    componentWillUpdate() {
        debug('nylas-page-styling', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-page-styling', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-page-styling', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-page-styling', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-page-styling', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    customInputsSlotChangedHandler(newValue) {
        debug('nylas-page-styling', 'customInputsSlotChangedHandler', newValue);
        const appearance = this.currentAppearance;
        function updateInputDefaultValues(element) {
            if (element.hasAttribute && element.hasAttribute('name')) {
                const key = element.getAttribute('name');
                if (appearance && key && key in appearance && appearance[key] !== undefined) {
                    const componentType = element.getAttribute('component-type');
                    element.setAttribute('data-page-styling', 'true');
                    if (componentType === 'checkbox') {
                        element.setAttribute('checked', appearance[key]);
                    }
                    else if (componentType === 'radio-group') {
                        element.setAttribute('default-selected-value', appearance[key]);
                    }
                    else if (componentType === 'color-picker') {
                        element.setAttribute('default-selected-color', appearance[key]);
                    }
                    else if (componentType === 'select-dropdown') {
                        const options = element.getAttribute('options');
                        const selectedOption = options ? JSON.parse(options).find((option) => option.value === appearance[key]) : null;
                        element.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                    else if (componentType === 'image-url') {
                        element.setAttribute('image-url', appearance[key]);
                    }
                    else {
                        element.setAttribute('default-value', appearance[key]);
                    }
                }
            }
            element.childNodes.forEach(child => {
                if (child.nodeType === Node.ELEMENT_NODE) {
                    updateInputDefaultValues(child);
                }
            });
        }
        if (newValue) {
            updateInputDefaultValues(newValue);
        }
    }
    cloneAndCopyProps(element) {
        const clonedElement = element.cloneNode(false);
        const componentType = element.getAttribute('component-type');
        const key = element.getAttribute('name');
        if (element.options) {
            const options = element.getAttribute('options');
            console.log('page-styling options', element, options);
            if (typeof options === 'string') {
                try {
                    const parsedOptions = JSON.parse(options);
                    clonedElement.options = parsedOptions;
                    if (componentType === 'select-dropdown' && key && key in this.currentAppearance) {
                        const selectedOption = parsedOptions.find((option) => option.value === this.currentAppearance[key]);
                        clonedElement.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                }
                catch (e) {
                    console.error('Error parsing options', e);
                }
            }
            else {
                clonedElement.options = element.options;
            }
        }
        if (element.value) {
            clonedElement.value = element.value;
        }
        element.childNodes.forEach(child => {
            if (child.nodeType === Node.ELEMENT_NODE) {
                const clonedChild = this.cloneAndCopyProps(child);
                clonedElement.appendChild(clonedChild);
            }
            else if (child.nodeType === Node.TEXT_NODE) {
                clonedElement.appendChild(child.cloneNode(true));
            }
        });
        return clonedElement;
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-page-styling', 'selectedConfigurationChangedHandler', newValue);
        this.currentAppearance = newValue?.appearance || {};
        const editor = document.querySelector('nylas-scheduler-editor');
        const slotElement = editor?.shadowRoot?.querySelector('slot[name="custom-page-style-inputs"]');
        if (!slotElement) {
            return;
        }
        const divElement = document.createElement('div');
        const slottedElements = slotElement?.assignedElements({ flatten: true });
        slottedElements?.forEach(element => {
            const clonedElement = this.cloneAndCopyProps(element);
            this.customInputsSlotChangedHandler(clonedElement);
            divElement.appendChild(clonedElement);
        });
        const bodyElement = this.host.shadowRoot?.querySelector('.nylas-page-styling');
        const slotContainer = bodyElement?.querySelector('.nylas-page-styling__body .subsection');
        if (slotContainer) {
            slotContainer.innerHTML = '';
            divElement.childNodes.forEach(child => {
                slotContainer.appendChild(child);
            });
            this.customInputsSlot = divElement;
        }
    }
    checkIfElementIsInSlot(name) {
        const findElement = document?.querySelector(`[slot="custom-page-style-inputs"] [name="${name}"]`);
        return findElement ? true : false;
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        const type = event.detail?.type;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        switch (name) {
            case 'submit_button_label':
                this.currentAppearance = { ...this.currentAppearance, submit_button_label: value };
                break;
            case 'thank_you_message':
                if (type === 'multi_line_text') {
                    const value = sanitize(event.detail.value);
                    this.currentAppearance = { ...this.currentAppearance, thank_you_message: value };
                }
                break;
            default:
                this.currentAppearance = { ...this.currentAppearance, [name]: value };
                break;
        }
        this.updateConfirmationFormValue();
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-page-styling', 'nylasFormDropdownChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'color') {
            this.currentAppearance = { ...this.currentAppearance, color: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    valueChangedHandler(event) {
        debug('nylas-page-styling', 'valueChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'company_logo_url') {
            this.currentAppearance = { ...this.currentAppearance, company_logo_url: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    checkboxToggledHandler(event) {
        const { checked, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: checked };
        this.updateConfirmationFormValue();
    }
    radioChangedHandler(event) {
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: value };
        this.updateConfirmationFormValue();
    }
    updateConfirmationFormValue() {
        debug('nylas-page-styling', 'updateConfirmationFormValue');
        this.internals.setFormValue(JSON.stringify(this.currentAppearance), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.currentAppearance), name: this.name });
    }
    toggleConfirmationEmail() {
        this.isOpen = !this.isOpen;
    }
    render() {
        return (h(Host, { key: '68e1c2f32b4268726ba8df026df3e21dbe68e5dc' }, h("div", { key: '1ae19e1b16b921ff07532f766f4d3cd66cd4eab7', part: "nps", class: { 'nylas-page-styling': true, 'no-border': !this.customInputsSlot } }, this.customInputsSlot ? (h("div", { class: "header", part: "nps__header" }, h("div", null, h("h3", null, i18next.t('nylasPageStyling.headerTitle'))), h("div", { class: "drawer-toggle", part: "nps__drawer-toggle--container" }, h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleConfirmationEmail() }, h("chevron-icon", { width: "24", height: "24" }))))) : null, h("div", { key: '444f71a9a295a038e08fdf46ffd3a48191b1da31', id: "nylas-page-styling__body", class: "nylas-page-styling__body", part: "nps__body" }, h("div", { key: '4033d47d7ffefbf28cdce4742ed90902ec9f5c0d', class: { 'nylas-page-styling__section': true, 'no-padding': !this.customInputsSlot } }, h("div", { key: 'e2b2ad42964df5f04fb0297a667f8724040dd41a', class: "nylas-page-styling__row" }, h("div", { key: '6c74558fa601b9be224758352f9fec1346ce86b7', class: { subsection: true, hide: !this.isOpen } })))))));
    }
    static get is() { return "nylas-page-styling"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-page-styling.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-page-styling.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "The selected configuration."
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "The name of the component"
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'page-styling'"
            },
            "appearance": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Appearance",
                    "resolved": "Appearance | undefined",
                    "references": {
                        "Appearance": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Appearance"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "The appearance data to display"
                        }],
                    "text": ""
                }
            },
            "isOpen": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Is the page styling card open"
                        }],
                    "text": ""
                },
                "attribute": "is-open",
                "reflect": false,
                "defaultValue": "true"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "currentAppearance": {},
            "customInputsSlot": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the email reminders change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }, {
                "method": "bookingFormSubmitted",
                "name": "bookingFormSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the form is submitted in the parent component."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangeHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "valueChanged",
                "method": "valueChangedHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormCheckboxToggled",
                "method": "checkboxToggledHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormRadioChanged",
                "method": "radioChangedHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-page-styling',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasPageStyling.prototype, "render", null);
//# sourceMappingURL=nylas-page-styling.js.map
