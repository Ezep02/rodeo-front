var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { convertTo12HourFormat, convertTo24HourFormat, debug, minutesToTime, timeToMinutes } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { DEFAULT_OPEN_HOURS, TIMEZONE_MAP } from "../../../common/constants";
import i18next from "../../../utils/i18n";
export class NylasAvailabilityPicker {
    constructor() {
        this.name = 'availability';
        this.selectedConfiguration = undefined;
        this.openHours = undefined;
        this.defaultTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.hideHeader = false;
        this.selectedLanguage = undefined;
        this.schedule = {
            SUN: [],
            MON: [{ start: '09:00am', end: '05:00pm' }],
            TUE: [{ start: '09:00am', end: '05:00pm' }],
            WED: [{ start: '09:00am', end: '05:00pm' }],
            THU: [{ start: '09:00am', end: '05:00pm' }],
            FRI: [{ start: '09:00am', end: '05:00pm' }],
            SAT: [],
        };
        this.timezone = '';
        this.overlapDays = {};
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    configChangedHandler(newConfig) {
        const defaultOpenHours = newConfig?.availability?.availability_rules?.default_open_hours ?? DEFAULT_OPEN_HOURS;
        const defaultOpenHoursTimezone = newConfig?.event_booking?.timezone ?? this.defaultTimezone;
        this.timezone = this.name === 'availability' ? defaultOpenHoursTimezone : this.defaultTimezone;
        if (this.openHours) {
            this.openHoursToSchedule(this.openHours);
        }
        else if (defaultOpenHours) {
            this.openHoursToSchedule(defaultOpenHours);
        }
    }
    scheduleChanged(newValue, oldValue) {
        if (newValue !== oldValue) {
            let overlapDays = {};
            Object.keys(newValue).forEach(key => {
                const dayTimeRanges = newValue[key];
                if (dayTimeRanges.length > 0) {
                    const overlaps = this.getOverlaps(dayTimeRanges);
                    if (overlaps.length > 0) {
                        overlapDays[key] = overlaps;
                    }
                }
            });
            this.overlapDays = overlapDays;
            if (typeof this.internals.setFormValue !== 'function') {
                return;
            }
            if (Object.keys(overlapDays).length > 0) {
                const element = this.host.shadowRoot?.getElementById(Object.keys(overlapDays)[0]);
                if (element) {
                    debug('nylas-availability-picker', 'The time ranges are overlapping. Overlap: ', overlapDays);
                    this.internals.setValidity({ customError: true }, 'Overlapping time ranges found', element);
                }
            }
            else {
                this.internals.setValidity({ customError: false });
                this.internals.setFormValue(JSON.stringify({
                    openHours: this.scheduleToOpenHours(this.schedule),
                    timezone: this.timezone,
                }));
            }
            this.valueChanged.emit({
                value: JSON.stringify({
                    openHours: this.scheduleToOpenHours(newValue),
                    timezone: this.timezone,
                }),
                name: this.name,
            });
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.timezone = value;
            if (typeof this.internals.setFormValue !== 'function') {
                return;
            }
            const updateValue = {
                openHours: this.scheduleToOpenHours(this.schedule),
                timezone: this.timezone,
            };
            this.internals.setFormValue(JSON.stringify(updateValue));
            this.valueChanged.emit({
                value: JSON.stringify(updateValue),
                name: this.name,
            });
        }
    }
    connectedCallback() {
        debug('nylas-availability-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-availability-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-availability-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-availability-picker', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.configChangedHandler(this.selectedConfiguration);
        }
        else {
            this.timezone = this.defaultTimezone;
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        const updateValue = {
            openHours: this.scheduleToOpenHours(this.schedule),
            timezone: this.timezone,
        };
        this.internals.setFormValue(JSON.stringify(updateValue));
        this.valueChanged.emit({
            value: JSON.stringify(updateValue),
            name: this.name,
        });
    }
    getOverlaps(timeRanges) {
        let timeRangesInMinutes = timeRanges.map((range, index) => ({
            start: timeToMinutes(range.start),
            end: timeToMinutes(range.end),
            originalIndex: index,
        }));
        timeRangesInMinutes.sort((a, b) => a.start - b.start);
        let overlaps = [];
        for (let i = 1; i < timeRangesInMinutes.length; i++) {
            if (timeRangesInMinutes[i].start < timeRangesInMinutes[i - 1].end) {
                if (!overlaps.includes(timeRangesInMinutes[i].originalIndex)) {
                    overlaps.push(timeRangesInMinutes[i].originalIndex);
                }
                if (!overlaps.includes(timeRangesInMinutes[i - 1].originalIndex)) {
                    overlaps.push(timeRangesInMinutes[i - 1].originalIndex);
                }
            }
        }
        return overlaps.sort((a, b) => a - b);
    }
    addTimeRange(day) {
        const currentTimeRanges = this.schedule[day];
        const dayStart = 0;
        const dayEnd = 1425;
        if (currentTimeRanges.length === 0) {
            this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }];
        }
        else {
            const timeRangesInMinutes = currentTimeRanges
                .map(range => ({
                start: timeToMinutes(range.start),
                end: timeToMinutes(range.end),
            }))
                .sort((a, b) => a.start - b.start);
            const lastRangeEnd = timeRangesInMinutes[timeRangesInMinutes.length - 1].end;
            if (lastRangeEnd + 60 <= dayEnd) {
                this.schedule[day].push({
                    start: convertTo12HourFormat(minutesToTime(lastRangeEnd)),
                    end: convertTo12HourFormat(minutesToTime(lastRangeEnd + 60)),
                });
            }
            else {
                let gapFound = false;
                if (timeRangesInMinutes[0].start > dayStart + 60) {
                    this.schedule[day].push({
                        start: convertTo12HourFormat(minutesToTime(dayStart)),
                        end: convertTo12HourFormat(minutesToTime(dayStart + 60)),
                    });
                    gapFound = true;
                }
                if (!gapFound) {
                    for (let i = 0; i < timeRangesInMinutes.length - 1; i++) {
                        const currentEnd = timeRangesInMinutes[i].end;
                        const nextStart = timeRangesInMinutes[i + 1].start;
                        if (nextStart - currentEnd >= 60) {
                            this.schedule[day].push({
                                start: convertTo12HourFormat(minutesToTime(currentEnd)),
                                end: convertTo12HourFormat(minutesToTime(currentEnd + 60)),
                            });
                            break;
                        }
                    }
                }
            }
        }
        this.schedule[day].sort((a, b) => timeToMinutes(a.start) - timeToMinutes(b.start));
        this.schedule = { ...this.schedule };
    }
    removeTimeRange(day, index) {
        this.schedule[day].splice(index, 1);
        this.schedule = { ...this.schedule };
    }
    setTime(event) {
        const { key, value } = event.detail;
        const [dayIndex, timeType] = key.split('_');
        const [day, index] = dayIndex.split(':');
        if (timeType === 'start') {
            this.schedule[day][index].start = value;
        }
        else if (timeType === 'end') {
            this.schedule[day][index].end = value;
        }
        this.internals.setValidity({ customError: false });
        this.schedule = { ...this.schedule };
    }
    setFormError(event) {
        const { key } = event.detail;
        const [_, timeType] = key.split('_');
        const element = this.host.shadowRoot?.getElementById(key);
        if (element) {
            this.internals.setValidity({ customError: true }, `Invalid ${timeType} time`, element);
        }
    }
    openHoursToSchedule(openHours) {
        const newSchedule = {
            SUN: [],
            MON: [],
            TUE: [],
            WED: [],
            THU: [],
            FRI: [],
            SAT: [],
        };
        openHours.forEach(openHour => {
            openHour.days.forEach(day => {
                const dayKey = this.getDayKey(day);
                const start12hr = convertTo12HourFormat(openHour.start);
                const end12hr = convertTo12HourFormat(openHour.end);
                const timeRange = { start: start12hr, end: end12hr };
                let timeRangeExists = false;
                if (newSchedule[dayKey]) {
                    timeRangeExists = newSchedule[dayKey].some(range => range.start === timeRange.start && range.end === timeRange.end);
                }
                if (!timeRangeExists) {
                    if (newSchedule[dayKey]) {
                        newSchedule[dayKey].push(timeRange);
                    }
                    else {
                        newSchedule[dayKey] = [timeRange];
                    }
                }
            });
        });
        this.schedule = newSchedule;
    }
    getDayKey(dayIndex) {
        const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
        return days[dayIndex];
    }
    scheduleToOpenHours(schedule) {
        const dayKeys = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
        let openHoursMap = new Map();
        dayKeys.forEach((dayKey, index) => {
            if (schedule[dayKey]) {
                schedule[dayKey].forEach(timeRange => {
                    const start24hr = convertTo24HourFormat(timeRange.start);
                    const end24hr = convertTo24HourFormat(timeRange.end);
                    const key = `${start24hr}-${end24hr}`;
                    if (!openHoursMap.has(key)) {
                        openHoursMap.set(key, { days: [index], start: start24hr, end: end24hr });
                    }
                    else {
                        let entry = openHoursMap.get(key);
                        if (entry) {
                            entry.days.push(index);
                            openHoursMap.set(key, entry);
                        }
                    }
                });
            }
        });
        let selectedOpenHours = [];
        openHoursMap.forEach((value, _key) => {
            selectedOpenHours.push({
                days: value.days,
                start: value.start,
                end: value.end,
                timezone: this.timezone,
            });
        });
        return selectedOpenHours;
    }
    render() {
        const timezoneOptions = Object.keys(TIMEZONE_MAP).map(key => ({
            label: TIMEZONE_MAP[key],
            value: key,
        }));
        const selectedTimezoneOption = timezoneOptions.find(i => i.value === this.timezone);
        return (h(Host, { key: '7f5643bbe1297934343819e75a79ddc058e01f5b' }, h("div", { key: '53d182ac0115d273cc3cc15e81a52a488b8d9e52', class: "nylas-availability-picker", part: "nap" }, !this.hideHeader && (h("div", { class: "header", part: "nap__header" }, h("h3", null, i18next.t('nylasAvailabilityPicker.headerTitle')), h("p", null, i18next.t('nylasAvailabilityPicker.headerSubTitle'), h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, i18next.t('nylasAvailabilityPicker.tooltip.desc')))))), h("div", { key: '2818430114319c8993ade1da8be4c8e04754283d', class: "content" }, h("div", { key: '459c8d97a9ab00f2ffb1fe38121f2652b6b06b02', class: "select-timezone", part: "nap__select-timezone" }, h("h4", { key: '5d13b9bf3f44da8097d24b33b37c155500ba9a3c', class: "sub-header" }, i18next.t('nylasAvailabilityPicker.selectTimezone')), selectedTimezoneOption?.label && (h("select-dropdown", { name: "timezone", exportparts: "sd_dropdown: nap__timezone-container, sd_dropdown-button: nap__timezone-button, sd_dropdown-content: nap__timezone-dropdown-content", options: timezoneOptions, defaultSelectedOption: selectedTimezoneOption }, h("span", { slot: "select-icon" }, h("globe-icon", { width: "20", height: "20" }))))), h("div", { key: '055c9ad67845135ba63be4a2f3aa6b3e5f4d2469', class: "availability", part: "nap__availability" }, Object.keys(this.schedule).map(key => {
            const day = key;
            const timeRanges = this.schedule[key];
            return (h("div", { class: "availability-day" }, h("div", { class: "day", part: "nap__day" }, h("input", { type: "checkbox", name: day, id: day, checked: timeRanges.length > 0, onClick: () => {
                    if (timeRanges.length > 0) {
                        this.schedule[day] = [];
                    }
                    else {
                        this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }];
                    }
                    this.schedule = { ...this.schedule };
                } }), h("label", { htmlFor: day, "aria-label": "Select day" }, i18next.t(`nylasAvailabilityPicker.days.${day}`))), h("div", { class: "time-ranges", part: "nap__time-ranges" }, timeRanges.length ? null : h("span", { class: "unavailable" }, i18next.t('nylasAvailabilityPicker.unavailable')), timeRanges.length > 0 &&
                timeRanges.map((timeRange, timeRangeIndex) => {
                    const startKey = `${key}:${timeRangeIndex}_start`;
                    const endKey = `${key}:${timeRangeIndex}_end`;
                    return (h("div", { class: "time-range", part: "nap__time-range" }, h("div", { class: "pickers" }, h("nylas-time-window-picker", { id: startKey, hasError: this.overlapDays[day]?.includes(timeRangeIndex), time: timeRange.start, name: startKey, key: startKey, exportparts: "time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times" }), h("span", null, " - "), h("nylas-time-window-picker", { id: endKey, hasError: this.overlapDays[day]?.includes(timeRangeIndex), time: timeRange.end, name: endKey, key: endKey, minimumStartTime: timeRange.start, exportparts: "time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times" })), h("button", { onClick: () => this.removeTimeRange(day, timeRangeIndex) }, h("close-icon", null))));
                }), h("p", { class: "error" }, this.overlapDays[day] ? 'Overlapping time ranges' : '')), h("div", null, timeRanges.length > 0 ? (h("button", { onClick: () => this.addTimeRange(day), part: "nap__add-time-range" }, h("add-circle-icon", null))) : null)));
        }))))));
    }
    static get is() { return "nylas-availability-picker"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-availability-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-availability-picker.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the availability picker."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'availability'"
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected configuration."
                        }],
                    "text": ""
                }
            },
            "openHours": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "OpenHours[]",
                    "resolved": "OpenHours[] | undefined",
                    "references": {
                        "OpenHours": {
                            "location": "local",
                            "path": "/home/runner/work/nylas/nylas/packages/nylas-web-elements/src/components/scheduler-editor/nylas-availability-picker/nylas-availability-picker.tsx",
                            "id": "src/components/scheduler-editor/nylas-availability-picker/nylas-availability-picker.tsx::OpenHours"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The open hours to display."
                        }],
                    "text": ""
                }
            },
            "defaultTimezone": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The default timezone or preset timezone."
                        }],
                    "text": ""
                },
                "attribute": "default-timezone",
                "reflect": false,
                "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone"
            },
            "hideHeader": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "Hide the header of the availability picker."
                        }],
                    "text": ""
                },
                "attribute": "hide-header",
                "reflect": false,
                "defaultValue": "false"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "schedule": {},
            "timezone": {},
            "overlapDays": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected availability / open hours change.\nThe value is a stringified JSON object with the open hours and timezone.\n```\n{\n openHours: OpenHours[],\n timezone: string\n}\n```"
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "configChangedHandler"
            }, {
                "propName": "schedule",
                "methodName": "scheduleChanged"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "timeChange",
                "method": "setTime",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "formError",
                "method": "setFormError",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-availability-picker',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasAvailabilityPicker.prototype, "render", null);
//# sourceMappingURL=nylas-availability-picker.js.map
