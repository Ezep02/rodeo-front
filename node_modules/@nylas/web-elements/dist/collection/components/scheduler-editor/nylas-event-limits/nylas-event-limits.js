var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { checkForMissingSlots, debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasEventLimits {
    constructor() {
        this.selectedLanguage = undefined;
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-event-limits', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-limits', 'componentWillLoad');
    }
    componentDidLoad() {
        debug('nylas-event-limits', 'componentDidLoad');
        checkForMissingSlots(['inputs'], this.el);
    }
    disconnectedCallback() {
        debug('nylas-event-limits', 'disconnectedCallback');
    }
    render() {
        return (h(Host, { key: '93516fbfa45ce2eb8d5547d220c340e7805135ec' }, h("nylas-form-card", { key: 'ddbe78badd581cac4d92adea6aa3a391149cce46', exportparts: "nfc__header: nel__header" }, h("h1", { key: '4be5660d2d31f98f64dfeea7f64c0d4f50469ab4', slot: "header-title", class: "nylas-event-limits__title" }, i18next.t('nylasEventLimits.headerTitle')), h("div", { key: 'c044112ad30d6bb8965e68e13617466665d4e368', slot: "content", class: "nylas-event-limits__content" }, h("slot", { key: '9ce9fd30ee452a3812f9483e44922a986504cf4a', name: "inputs" })))));
    }
    static get is() { return "nylas-event-limits"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-event-limits.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-event-limits.css"]
        };
    }
    static get properties() {
        return {
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-event-limits',
        stateToProps: new Map([['schedulerConfig.selectedLanguage', 'selectedLanguage']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventLimits.prototype, "render", null);
//# sourceMappingURL=nylas-event-limits.js.map
