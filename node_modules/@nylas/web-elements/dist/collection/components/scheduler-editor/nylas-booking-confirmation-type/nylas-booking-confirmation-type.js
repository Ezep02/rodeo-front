var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasBookingConfirmationType {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-type';
        this.bookingType = 'booking';
        this.showComponent = this.selectedConfiguration?.event_booking?.booking_type !== 'custom-confirmation';
        this.selectedLanguage = undefined;
        this.selectedBookingType = undefined;
        this.showDropdown = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-booking-confirmation-type', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-booking-confirmation-type', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.event_booking?.booking_type) {
            this.selectedBookingType = newValue?.event_booking?.booking_type;
            this.showDropdown = newValue?.event_booking?.booking_type !== 'custom-confirmation' && !!newValue?.scheduler?.organizer_confirmation_url;
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-booking-confirmation-type', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-confirmation-type', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-confirmation-type', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-booking-confirmation-type', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedBookingType = this.bookingType || 'booking';
            this.showDropdown = this.showComponent;
        }
        this.internals.setFormValue(this.selectedBookingType.toString(), this.name);
    }
    componentWillUpdate() {
        debug('nylas-booking-confirmation-type', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-booking-confirmation-type', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-booking-confirmation-type', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-booking-confirmation-type', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-booking-confirmation-type', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedBookingType = value;
            this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ ...event.detail, valueChanged });
    }
    render() {
        const bookingOptions = [
            {
                label: i18next.t('nylasBookingConfirmationType.bookingOption', { context: 'booking' }),
                value: 'booking',
            },
            {
                label: i18next.t('nylasBookingConfirmationType.bookingOption', { context: 'organizerConfirmation' }),
                value: 'organizer-confirmation',
            },
        ];
        return (h(Host, { key: 'e50655127ac22aa67231a50d429fdbb9f85b2b46' }, this.showDropdown && (h("div", { class: "nylas-booking-confirmation-type", part: "nbct" }, bookingOptions.length > 0 && (h("div", { class: "nylas-booking-confirmation-type__dropdown" }, h("span", { class: "label" }, i18next.t('nylasBookingConfirmationType.dropdownLabel'), h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, i18next.t('nylasBookingConfirmationType.tooltip.desc')))), this.selectedBookingType && (h("select-dropdown", { name: "booking-type", options: bookingOptions, withSearch: false, exportparts: "sd_dropdown: nbct__dropdown, sd_dropdown-button: nbct__dropdown-button, sd_dropdown-content: nbct__dropdown-content", defaultSelectedOption: bookingOptions.find(cal => cal.value == this.selectedBookingType) }))))))));
    }
    static get is() { return "nylas-booking-confirmation-type"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-confirmation-type.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-confirmation-type.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the confirmation redirect link."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'confirmation-type'"
            },
            "bookingType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The booking type."
                        }],
                    "text": ""
                },
                "attribute": "booking-type",
                "reflect": false,
                "defaultValue": "'booking'"
            },
            "showComponent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "Show or hide the confirmation type.\nThis prop is automatically determined based on the value of selectedConfiguration in the config,\nmaking it unnecessary to set this prop manually."
                        }],
                    "text": ""
                },
                "attribute": "show-component",
                "reflect": false,
                "defaultValue": "this.selectedConfiguration?.event_booking?.booking_type !== 'custom-confirmation'"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedBookingType": {},
            "showDropdown": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected bookingType changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-confirmation-type',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingConfirmationType.prototype, "render", null);
//# sourceMappingURL=nylas-booking-confirmation-type.js.map
