var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, sanitize } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { CONFERENCE_PROVIDER_MAP, PROVIDER_CONFERENCE_MAP } from "../../../common/constants";
import i18next from "../../../utils/i18n";
const labels = {
    none: 'None',
    custom: 'Custom location',
    google: 'Google Meet',
    microsoft: 'Microsoft Teams',
    zoom: 'Zoom Meeting',
};
export class NylasEventLocation {
    constructor() {
        this.name = 'location';
        this.currentUser = undefined;
        this.userProvider = undefined;
        this.eventConferencing = undefined;
        this.conferenceProviders = undefined;
        this.selectedConfiguration = undefined;
        this.eventLocation = undefined;
        this.selectedLanguage = undefined;
        this.location = this.eventLocation ?? '';
        this.grantId = this.eventConferencing ? this.setDefaultGrantID(this.eventConferencing) : '';
        this.selectedLocationOption = undefined;
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.locationOptions = [
            { value: 'none', label: labels['none'], labelHTML: this.getLabelHTML('none') },
            { value: 'custom', label: labels['custom'], labelHTML: this.getLabelHTML('custom') },
        ];
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-location', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const configLocation = newValue?.event_booking?.location;
        const configConferencing = newValue?.event_booking?.conferencing;
        if (configConferencing?.provider) {
            this.selectedLocationOption = this.setDefaultLocationOption(configConferencing, configLocation ?? '');
            this.grantId = this.setDefaultGrantID(configConferencing);
            this.location = configLocation ? configLocation : '';
        }
        else if (configLocation) {
            this.selectedLocationOption = configLocation ? 'custom' : 'none';
            this.location = configLocation;
        }
        else {
            this.selectedLocationOption = 'none';
            this.location = '';
        }
    }
    currentUserChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'currentUserChangedHandler', newValue);
        if (newValue?.provider) {
            this.userProviderState = newValue?.provider;
            this.setLocationOptionsForProvider(this.userProviderState);
        }
    }
    conferenceProvidersChanged(newValue) {
        if (newValue?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    connectedCallback() {
        debug('nylas-event-location', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-location', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-event-location', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedLocationOption = this.setDefaultLocationOption(this.eventConferencing || null, this.eventLocation ?? '');
        }
        this.userProviderState = this.userProvider ?? this.currentUser?.provider ?? '';
        this.setLocationOptionsForProvider(this.userProviderState);
        if (this.conferenceProviders?.['zoom'] && !this.locationOptions.some(option => option.value === 'zoom')) {
            this.locationOptions.push({ value: 'zoom', label: labels['zoom'], labelHTML: this.getLabelHTML('zoom') });
        }
    }
    disconnectedCallback() {
        debug('nylas-event-location', 'disconnectedCallback');
    }
    nylasFormDropdownChangedHandler(event) {
        this.selectedLocationOption = event.detail.value;
        let payload;
        switch (this.selectedLocationOption) {
            case 'none':
                this.location = '';
                this.setFormValue('', this.name);
                this.valueChanged.emit({ value: '', name: this.name });
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'custom':
                this.valueChanged.emit({ value: JSON.stringify(null), name: 'conference' });
                break;
            case 'google':
                this.location = '';
                this.setFormValue('', this.name);
                const googleConfGrantId = this.conferenceProviders?.['google'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.google,
                    autocreate: googleConfGrantId
                        ? {
                            conf_grant_id: googleConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'microsoft':
                this.location = '';
                this.setFormValue('', this.name);
                const microsoftConfGrantId = this.conferenceProviders?.['microsoft'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.microsoft,
                    autocreate: microsoftConfGrantId
                        ? {
                            conf_grant_id: microsoftConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'zoom':
                this.location = '';
                this.setFormValue('', this.name);
                const zoomConfGrantId = this.conferenceProviders?.['zoom'];
                payload = {
                    provider: PROVIDER_CONFERENCE_MAP.zoom,
                    autocreate: zoomConfGrantId
                        ? {
                            conf_grant_id: zoomConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
        }
    }
    setLocationOptionsForProvider(provider) {
        switch (provider) {
            case 'google':
                if (!this.locationOptions.some(option => option.value === 'google')) {
                    this.locationOptions.push({ value: 'google', label: labels['google'], labelHTML: this.getLabelHTML('google') });
                }
                break;
            case 'microsoft':
                if (!this.locationOptions.some(option => option.value === 'microsoft')) {
                    this.locationOptions.push({ value: 'microsoft', label: labels['microsoft'], labelHTML: this.getLabelHTML('microsoft') });
                }
                break;
        }
    }
    setDefaultLocationOption(eventConferencing, eventLocation) {
        if (eventConferencing != null && eventConferencing?.provider != null && eventConferencing?.autocreate != null) {
            return CONFERENCE_PROVIDER_MAP[eventConferencing?.provider];
        }
        return eventLocation ? 'custom' : 'none';
    }
    setDefaultGrantID(eventConferencing) {
        if (eventConferencing != null && eventConferencing?.autocreate != null) {
            return eventConferencing?.autocreate?.conf_grant_id;
        }
        return '';
    }
    setFormValue(value, name) {
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(value, name);
        }
    }
    handleChange(event) {
        const value = sanitize(event.target.value);
        this.location = value;
        this.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    getIcon(location) {
        switch (location) {
            case 'none':
                return h("location-off-icon", null);
            case 'custom':
                return h("location-icon", null);
            case 'google':
                return h("google-meet-icon", null);
            case 'microsoft':
                return h("microsoft-teams-icon", null);
            case 'zoom':
                return h("zoom-icon", null);
        }
    }
    getLabelHTML(location) {
        return (h("span", { class: "location-label", style: {
                display: 'flex',
                alignItems: 'center',
                gap: '16px',
                width: '-webkit-fill-available',
            } }, this.getIcon(location), h("span", { class: "location-text", style: {
                fontSize: '14px',
                fontWeight: '400',
            } }, labels[location])));
    }
    render() {
        const defaultOption = typeof this.selectedLocationOption !== 'undefined' ? this.locationOptions.find(i => i.value == this.selectedLocationOption) : null;
        return (h(Host, { key: '0096982c14e2b388a2324a10ea8ea2f3e15ea56e' }, h("div", { key: '56911162c07d534ba63be02e9c43686ed51c35fe', class: "nylas-event-location", part: "nel" }, h("label", { key: 'a1a20275ebe5568b2b1e5272c3513b9166841614', htmlFor: "location" }, i18next.t('nylasEventLocation.headerTitle'), h("span", { key: 'ada51f2282f1934f972815dfa93586f50965a6dd', class: "label-icon" }, h("tooltip-component", { key: '15cd36b04166c37b35ab46e56c44cfc07a30291e' }, h("info-icon", { key: 'bf4a6b7a80ba59bcba143b9200f1d60dd0fa909e', slot: "tooltip-icon" }), h("span", { key: '9985da6d6c668b8f01667b48a8d39cb02c5fad74', slot: "tooltip-content" }, i18next.t('nylasEventLocation.tooltip.desc'))))), h("div", { key: '02b96e763b3501411b90633da009345819c398f2', class: "location-input" }, defaultOption && defaultOption?.label && (h("select-dropdown", { withSearch: false, name: "location", options: this.locationOptions, defaultSelectedOption: defaultOption, exportparts: "sd_dropdown: nel__dropdown, sd_dropdown-button: nel__dropdown-button, sd_dropdown-content: nel__dropdown-content" }, h("span", { slot: "select-icon" }, this.getIcon(this.selectedLocationOption)))), this.selectedLocationOption === 'custom' && (h("input", { type: "text", part: "nel__location", id: "location", name: "location", maxlength: "1024", value: this.location, onInput: e => this.handleChange(e) }))))));
    }
    static get is() { return "nylas-event-location"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-event-location.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-event-location.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The name of the event location input."
                        }],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'location'"
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; provider?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The current user"
                        }],
                    "text": ""
                }
            },
            "userProvider": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The users provider"
                        }],
                    "text": ""
                },
                "attribute": "user-provider",
                "reflect": false
            },
            "eventConferencing": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Conference",
                    "resolved": "Conference | undefined",
                    "references": {
                        "Conference": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Conference"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The event conferencing stored in the configuration"
                        }],
                    "text": ""
                }
            },
            "conferenceProviders": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Record<string, string>",
                    "resolved": "undefined | { [x: string]: string; }",
                    "references": {
                        "Record": {
                            "location": "global",
                            "id": "global::Record"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The conference providers where the key is the provider name ('zoom') and the value is the grant id.\nWe currently support same provider ('google', 'microsoft') for all participants and 'zoom' for cross-provider conferencing."
                        }],
                    "text": ""
                }
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The selected config"
                        }],
                    "text": ""
                }
            },
            "eventLocation": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The event location stored in the configuration"
                        }],
                    "text": ""
                },
                "attribute": "event-location",
                "reflect": false
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "location": {},
            "grantId": {},
            "selectedLocationOption": {},
            "userProviderState": {},
            "locationOptions": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the value of the event location changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "currentUser",
                "methodName": "currentUserChangedHandler"
            }, {
                "propName": "conferenceProviders",
                "methodName": "conferenceProvidersChanged"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-event-location',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.conferenceProviders', 'conferenceProviders'],
            ['schedulerConfig.currentUser', 'currentUser'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventLocation.prototype, "render", null);
//# sourceMappingURL=nylas-event-location.js.map
