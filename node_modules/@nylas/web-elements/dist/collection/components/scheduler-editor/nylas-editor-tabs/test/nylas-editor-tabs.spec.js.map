{"version":3,"file":"nylas-editor-tabs.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-editor-tabs/test/nylas-editor-tabs.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasEditorTabs } from '../nylas-editor-tabs';\nimport { h } from '@stencil/core';\nimport { selectedConfiguration } from '@/utils/test-utils';\nimport ExpressFlow from '../../nylas-scheduler-editor/ExpressFlow';\nimport { NylasBookingCalendarPicker } from '../../nylas-booking-calendar-picker/nylas-booking-calendar-picker';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\nimport { ButtonComponent } from '../../../design-system/button-component/button-component';\n\ndescribe('nylas-scheduler-editor', () => {\n  let nylasEditorTabs: NylasEditorTabs;\n  let page: any;\n  beforeEach(async () => {\n    page = await newSpecPage({\n      autoApplyChanges: true,\n      components: [NylasEditorTabs],\n      template: () => {\n        return (\n          <nylas-editor-tabs mode=\"composable\">\n            <ExpressFlow\n              currentUser={{\n                id: '123',\n                email: 'johndoe@example.com',\n                name: 'John Doe',\n              }}\n              calendars={[\n                {\n                  id: '123',\n                  name: 'John Doe',\n                  email: 'johndoe@example.com',\n                },\n              ]}\n              selectedConfiguration={JSON.parse(JSON.stringify(selectedConfiguration))}\n            />\n          </nylas-editor-tabs>\n        );\n      },\n    });\n    nylasEditorTabs = page.rootInstance as NylasEditorTabs;\n    // Mocking `formRef` and its `checkValidity()` method\n    const formMock = {\n      checkValidity: jest.fn().mockReturnValue(true),\n      acceptCharset: '',\n      action: '',\n      autocomplete: '',\n      elements: {} as HTMLFormControlsCollection,\n      encoding: '',\n      enctype: '',\n      length: 0,\n      method: '',\n      name: '',\n      noValidate: false,\n      target: '',\n      reset: jest.fn(),\n      submit: jest.fn(),\n    } as unknown as HTMLFormElement;\n\n    // Set the formRef on editor tabs component instance\n    (nylasEditorTabs as any).formRef = formMock;\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue(JSON.parse(JSON.stringify(selectedConfiguration)));\n    nylasEditorTabs.action = 'create';\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('submit form', async () => {\n    const checkErrorSpy = jest.spyOn(nylasEditorTabs, 'checkForOrganizerConfirmationError');\n    const event = new Event('submit');\n    await nylasEditorTabs.formSubmissionHandler(event);\n    expect(checkErrorSpy).toHaveBeenCalled();\n    expect(checkErrorSpy).toHaveReturnedWith(false);\n  });\n});\n\ndescribe('nylas-scheduler-editor edit', () => {\n  const radio_field = {\n    type: 'radio_button',\n    required: false,\n    order: 1,\n    options: ['yes', ''],\n    label: 'Radio Button Label',\n  };\n  const dropdown = {\n    type: 'dropdown',\n    required: false,\n    order: 1,\n    options: ['yes', ''],\n    label: 'Dropdown Label',\n  };\n  const formState = {\n    title: 'no org confirm',\n    description: '',\n    duration: '30',\n    availability: {\n      openHours: [\n        {\n          days: [1, 2, 3, 4, 5],\n          start: '09:00',\n          end: '17:00',\n          timezone: 'America/Toronto',\n        },\n      ],\n      timezone: 'America/Toronto',\n    },\n    additionalFields: {},\n    conferencing: {},\n    calendarIds: ['primary'],\n    participants: [\n      {\n        email: 'user@nylas.com',\n        is_organizer: true,\n        name: '',\n        availability: {\n          calendar_ids: ['primary'],\n        },\n        booking: {\n          calendar_id: 'user@nylas.com',\n        },\n        timezone: 'America/Toronto',\n      },\n    ],\n    bookingCalendar: 'user@nylas.com',\n    location: '',\n    bookingType: 'booking',\n    buffer: {\n      before: 0,\n      after: 0,\n    },\n    cancellationPolicy: '',\n    availableDaysInFuture: 30,\n    minCancellationNotice: 0,\n    minBookingNotice: 60,\n    timeslotInterval: {\n      interval: 30,\n    },\n    additionalGuestsHidden: false,\n    hideCancellationOptions: false,\n    hideReschedulingOptions: false,\n    participantBookingCalendars: {\n      email: 'user@nylas.com',\n      is_organizer: true,\n      name: '',\n      availability: {\n        calendar_ids: ['primary'],\n      },\n      booking: {\n        calendar_id: 'user@nylas.com',\n      },\n      timezone: 'America/Toronto',\n    },\n    participantCalendars: {\n      'user@nylas.com': ['primary'],\n    },\n    emailTemplate: {\n      logo: '',\n      booking_confirmed: {},\n    },\n    redirectUrl: '',\n    slug: 'dyewgafhjahjerfghjaerf',\n    appearance: null,\n    availabilityMethod: 'collective',\n  };\n\n  let nylasEditorTabs: NylasEditorTabs;\n  let page: any;\n  beforeEach(async () => {\n    page = await newSpecPage({\n      autoApplyChanges: true,\n      components: [NylasEditorTabs],\n      template: () => {\n        return <nylas-editor-tabs mode=\"app\" selectedConfiguration={JSON.parse(JSON.stringify(selectedConfiguration))}></nylas-editor-tabs>;\n      },\n    });\n    nylasEditorTabs = page.rootInstance as NylasEditorTabs;\n    // Mocking `formRef` and its `checkValidity()` method\n    const formMock = {\n      checkValidity: jest.fn().mockReturnValue(true),\n      acceptCharset: '',\n      action: '',\n      autocomplete: '',\n      elements: {} as HTMLFormControlsCollection,\n      encoding: '',\n      enctype: '',\n      length: 0,\n      method: '',\n      name: '',\n      noValidate: false,\n      target: '',\n      reset: jest.fn(),\n      submit: jest.fn(),\n    } as unknown as HTMLFormElement;\n\n    // Set the formRef on editor tabs component instance\n    (nylasEditorTabs as any).formRef = formMock;\n    nylasEditorTabs.action = 'edit';\n  });\n\n  it('should give form error if radio option is not filled', async () => {\n    const checkErrorSpy = jest.spyOn(nylasEditorTabs, 'checkForBookingFormErrors');\n    const setErrorSpy = jest.spyOn(nylasEditorTabs, 'setError');\n    const event = new Event('submit');\n\n    // Radio field\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue({\n      ...JSON.parse(JSON.stringify(formState)),\n      additionalFields: {\n        radio_field: { ...radio_field, options: ['yes', ''] },\n      },\n    });\n    await nylasEditorTabs.setActiveTab(new Event('click'), 'bookingForm' as any);\n    await nylasEditorTabs.formSubmissionHandler(event);\n    expect(checkErrorSpy).toHaveBeenCalled();\n    expect(checkErrorSpy).toHaveReturnedWith(true);\n    expect(setErrorSpy).toHaveBeenCalled();\n\n    // Dropdown field\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue({\n      ...JSON.parse(JSON.stringify(formState)),\n      additionalFields: {\n        dropdown: { ...dropdown, options: ['yes', ''] },\n      },\n    });\n    await nylasEditorTabs.formSubmissionHandler(event);\n    expect(checkErrorSpy).toHaveBeenCalled();\n    expect(checkErrorSpy).toHaveReturnedWith(true);\n    expect(setErrorSpy).toHaveBeenCalled();\n  });\n\n  it('should not give form error if radio / dropdown options are filled', async () => {\n    const checkErrorSpy = jest.spyOn(nylasEditorTabs, 'checkForBookingFormErrors');\n    const event = new Event('submit');\n    const setErrorSpy = jest.spyOn(nylasEditorTabs, 'setError');\n\n    // Radio field\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue({\n      ...JSON.parse(JSON.stringify(formState)),\n      additionalFields: {\n        radio_field: { ...radio_field, options: ['yes', 'no'] },\n      },\n    });\n    await nylasEditorTabs.formSubmissionHandler(event);\n    expect(checkErrorSpy).toHaveBeenCalled();\n    expect(checkErrorSpy).toHaveReturnedWith(false);\n    expect(setErrorSpy).not.toHaveBeenCalled();\n\n    // Dropdown field\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue({\n      ...JSON.parse(JSON.stringify(formState)),\n      additionalFields: {\n        dropdown: { ...dropdown, options: ['yes', 'no'] },\n      },\n    });\n    await nylasEditorTabs.formSubmissionHandler(event);\n    expect(checkErrorSpy).toHaveBeenCalled();\n    expect(checkErrorSpy).toHaveReturnedWith(false);\n    expect(setErrorSpy).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('nylas-scheduler-editor create flow', () => {\n  let nylasEditorTabs: NylasEditorTabs;\n  let page: any;\n  beforeEach(async () => {\n    page = await newSpecPage({\n      autoApplyChanges: true,\n      components: [SelectDropdown, ButtonComponent, NylasBookingCalendarPicker, NylasEditorTabs],\n      template: () => {\n        return (\n          <nylas-editor-tabs mode=\"composable\">\n            <ExpressFlow\n              currentUser={{\n                id: 'abc',\n                email: 'johndoe@example.com',\n                name: 'John Doe',\n              }}\n              calendars={[\n                {\n                  id: '123',\n                  name: 'John Doe calendar',\n                  email: 'johndoe@example.com',\n                },\n                {\n                  id: '456',\n                  name: 'Jane Doe',\n                  email: 'janedoe@example.com',\n                },\n              ]}\n              selectedConfiguration={JSON.parse(\n                JSON.stringify({\n                  requires_session_auth: false,\n                  scheduler: {\n                    rescheduling_url: 'https://book.nylas.com/us/reschedule/:booking_ref',\n                    cancellation_url: 'https://book.nylas.com/us/cancel/:booking_ref',\n                    organizer_confirmation_url: 'https://book.nylas.com/us/confirm/:booking_ref',\n                  },\n                }),\n              )}\n            />\n          </nylas-editor-tabs>\n        );\n      },\n    });\n    nylasEditorTabs = page.rootInstance as NylasEditorTabs;\n    // Mocking `formRef` and its `checkValidity()` method\n    const formMock = {\n      checkValidity: jest.fn().mockReturnValue(true),\n      acceptCharset: '',\n      action: '',\n      autocomplete: '',\n      elements: {} as HTMLFormControlsCollection,\n      encoding: '',\n      enctype: '',\n      length: 0,\n      method: '',\n      name: '',\n      noValidate: false,\n      target: '',\n      reset: jest.fn(),\n      submit: jest.fn(),\n    } as unknown as HTMLFormElement;\n\n    // Set the formRef on editor tabs component instance\n    (nylasEditorTabs as any).formRef = formMock;\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue(\n      JSON.parse(\n        JSON.stringify({\n          event_booking: {\n            title: 'test',\n          },\n          slug: 'dyewgafhjahjerfghjaerf',\n        }),\n      ),\n    );\n    nylasEditorTabs.action = 'create';\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('selects the first calendar if no primary calendar is available', async () => {\n    const calendarPicker = page.root.querySelector('nylas-booking-calendar-picker');\n    const calendarDropdown = calendarPicker.shadowRoot.querySelector('select-dropdown');\n    const calendarDropdownButton = calendarDropdown.shadowRoot.querySelector('button');\n    expect(calendarDropdownButton.textContent).toBe('John Doe calendar');\n  });\n});\n\ndescribe('nylas-scheduler-editor test config merging', () => {\n  let nylasEditorTabs: NylasEditorTabs;\n  let page: any;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      autoApplyChanges: true,\n      components: [NylasEditorTabs],\n      template: () => {\n        return <nylas-editor-tabs mode=\"app\" selectedConfiguration={JSON.parse(JSON.stringify(selectedConfiguration))}></nylas-editor-tabs>;\n      },\n    });\n    nylasEditorTabs = page.rootInstance as NylasEditorTabs;\n    // Mocking `formRef` and its `checkValidity()` method\n    const formMock = {\n      checkValidity: jest.fn().mockReturnValue(true),\n      acceptCharset: '',\n      action: '',\n      autocomplete: '',\n      elements: {} as HTMLFormControlsCollection,\n      encoding: '',\n      enctype: '',\n      length: 0,\n      method: '',\n      name: '',\n      noValidate: false,\n      target: '',\n      reset: jest.fn(),\n      submit: jest.fn(),\n    } as unknown as HTMLFormElement;\n\n    // Set the formRef on editor tabs component instance\n    (nylasEditorTabs as any).formRef = formMock;\n    nylasEditorTabs.action = 'edit';\n    nylasEditorTabs.selectedConfiguration = selectedConfiguration;\n  });\n\n  it('should merge selectedConfiguration into configObject', async () => {\n    const formState = {\n      ...selectedConfiguration,\n      slug: 'dyewgafhjahjerfghjaerf',\n    };\n\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue(formState);\n    const event = new Event('submit');\n    await nylasEditorTabs.formSubmissionHandler(event);\n\n    const emitSpy = jest.spyOn(nylasEditorTabs.schedulerConfigChanged, 'emit');\n    await nylasEditorTabs.formSubmissionHandler(new Event('submit'));\n    const finalConfig = emitSpy.mock.calls[0] && emitSpy.mock.calls[0][0] ? emitSpy.mock.calls[0][0].config : undefined;\n    expect(finalConfig).toEqual(\n      expect.objectContaining({\n        slug: 'dyewgafhjahjerfghjaerf',\n      }),\n    );\n  });\n});\n\ndescribe('nylas-scheduler-editor test default timezone', () => {\n  let nylasEditorTabs: NylasEditorTabs;\n  let page: any;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      autoApplyChanges: true,\n      components: [NylasEditorTabs],\n      template: () => {\n        return <nylas-editor-tabs mode=\"app\" selectedConfiguration={JSON.parse(JSON.stringify(selectedConfiguration))}></nylas-editor-tabs>;\n      },\n    });\n    nylasEditorTabs = page.rootInstance as NylasEditorTabs;\n    // Mocking `formRef` and its `checkValidity()` method\n    const formMock = {\n      checkValidity: jest.fn().mockReturnValue(true),\n      acceptCharset: '',\n      action: '',\n      autocomplete: '',\n      elements: {} as HTMLFormControlsCollection,\n      encoding: '',\n      enctype: '',\n      length: 0,\n      method: '',\n      name: '',\n      noValidate: false,\n      target: '',\n      reset: jest.fn(),\n      submit: jest.fn(),\n    } as unknown as HTMLFormElement;\n\n    // Set the formRef on editor tabs component instance\n    (nylasEditorTabs as any).formRef = formMock;\n    nylasEditorTabs.action = 'edit';\n    nylasEditorTabs.selectedConfiguration = selectedConfiguration;\n  });\n\n  it('should set default participant timezone from the selected configuration if no openhours are present', async () => {\n    // When participants are defined but without openhours, then the timezone submitted for each\n    // participant should equal the timezone of the selected configuration's availability availability_rules.\n    const formState = {\n      ...selectedConfiguration,\n      availability: {\n        timezone: 'America/Toronto',\n      },\n      participants: [\n        {\n          email: 'test@test.com',\n          is_organizer: true,\n          name: '',\n          availability: {\n            calendar_ids: ['user@nylas.com'],\n          },\n          booking: {\n            calendar_id: 'user@nylas.com',\n          },\n        },\n      ],\n    };\n\n    nylasEditorTabs.updateFormState = jest.fn().mockReturnValue(formState);\n    const event = new Event('submit');\n\n    await nylasEditorTabs.formSubmissionHandler(event);\n\n    const emitSpy = jest.spyOn(nylasEditorTabs.schedulerConfigChanged, 'emit');\n    await nylasEditorTabs.formSubmissionHandler(new Event('submit'));\n\n    const finalConfig = emitSpy.mock.calls[0] && emitSpy.mock.calls[0][0] ? emitSpy.mock.calls[0][0].config : undefined;\n    expect(finalConfig?.participants).toEqual(\n      expect.arrayContaining([\n        {\n          availability: { calendar_ids: ['user@nylas.com'], open_hours: [] },\n          booking: { calendar_id: 'user@nylas.com' },\n          email: 'test@test.com',\n          is_organizer: true,\n          name: '',\n          timezone: 'America/Toronto',\n        },\n      ]),\n    );\n  });\n});\n"]}