{"version":3,"file":"new-reminder-emails.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-reminder-emails/test/new-reminder-emails.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,cAAc,EAAE,MAAM,wDAAwD,CAAC;AACxF,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAElC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,IAAS,CAAC;IAEd,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,WAAW,CAAC;YACvB,UAAU,EAAE,CAAC,cAAc,EAAE,mBAAmB,CAAC;YACjD,QAAQ,EAAE,GAAG,EAAE;gBACb,OAAO,CACL,6BACE,cAAc,EAAE;wBACd;4BACE,IAAI,EAAE,SAAS;4BACf,oBAAoB,EAAE,EAAE;4BACxB,aAAa,EAAE,kBAAkB;4BACjC,SAAS,EAAE,KAAK;yBACjB;wBACD;4BACE,IAAI,EAAE,OAAO;4BACb,oBAAoB,EAAE,EAAE;4BACxB,OAAO,EAAE,IAAI;4BACb,aAAa,EAAE,0BAA0B;4BACzC,SAAS,EAAE,OAAO;yBACnB;wBACD;4BACE,IAAI,EAAE,OAAO;4BACb,oBAAoB,EAAE,EAAE;4BACxB,OAAO,EAAE,IAAI;4BACb,aAAa,EAAE,yBAAyB;4BACxC,SAAS,EAAE,MAAM;yBAClB;qBACF,GACD,CACH,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjF,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasReminderEmails } from '../nylas-reminder-emails';\nimport { InputComponent } from '../../../design-system/input-component/input-component';\nimport { h } from '@stencil/core';\n\ndescribe('nylas-reminder-emails', () => {\n  let page: any;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [InputComponent, NylasReminderEmails],\n      template: () => {\n        return (\n          <nylas-reminder-emails\n            eventReminders={[\n              {\n                type: 'webhook',\n                minutes_before_event: 50,\n                email_subject: 'Webhook Reminder',\n                recipient: 'all',\n              },\n              {\n                type: 'email',\n                minutes_before_event: 30,\n                editing: true,\n                email_subject: 'Email Reminder for guest',\n                recipient: 'guest',\n              },\n              {\n                type: 'email',\n                minutes_before_event: 80,\n                editing: true,\n                email_subject: 'Email Reminder for host',\n                recipient: 'host',\n              },\n            ]}\n          />\n        );\n      },\n    });\n    await page.waitForChanges();\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should not render webhook reminder', async () => {\n    const reminders = page.root.shadowRoot.querySelectorAll('.nylas-reminder-email');\n    expect(reminders).not.toBeNull();\n    expect(reminders.length).toBe(2);\n    const reminder = reminders[0];\n    const inputComponent = reminder.querySelector('input-component');\n    const input = inputComponent.shadowRoot.querySelector('input');\n    expect(input.value).toBe('Email Reminder for guest');\n  });\n});\n"]}