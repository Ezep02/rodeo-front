var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import i18next from "../../../utils/i18n";
export class NylasReminderEmails {
    constructor() {
        this.selectedConfiguration = undefined;
        this.eventReminders = undefined;
        this.name = 'reminder-overrides';
        this.selectedLanguage = undefined;
        this.reminders = this.selectedConfiguration?.event_booking?.reminders ?? this.eventReminders ?? [];
        this.reminderErrors = {};
        this.participants = this.selectedConfiguration?.participants ?? [];
    }
    connectedCallback() {
        debug('nylas-reminder-emails', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-reminder-emails', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-emails', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-reminder-emails', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.reminders = this.eventReminders ?? [];
            this.updateRemindersFormValue();
        }
    }
    componentWillUpdate() {
        debug('nylas-reminder-emails', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-reminder-emails', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-reminder-emails', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-reminder-emails', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-emails', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        debug('nylas-reminder-emails', 'selectedConfigurationChangedHandler', newVal);
        this.reminders = newVal?.event_booking?.reminders ?? [];
        this.participants = newVal?.participants ?? [];
        this.updateRemindersFormValue();
    }
    selectedLanguageChangedHandler(newVal, oldVal) {
        if (newVal === oldVal)
            return;
        i18next.changeLanguage(newVal);
    }
    handleValueChanged(event) {
        debug('nylas-reminder-emails', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (name.startsWith('reminder-time-')) {
            const [_, reminderIndex] = name.split(/(\d+)/);
            const updatedReminders = [...this.reminders];
            updatedReminders[reminderIndex].minutes_before_event = parseInt(value);
            this.reminders = [...updatedReminders];
            this.updateRemindersFormValue();
        }
    }
    handleNylasFormDropdownChanged(event) {
        debug('nylas-reminder-emails', 'handleNylasFormDropdownChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('recipient-')) {
            return;
        }
        const [_, reminderIndex] = name.split(/(\d+)/);
        const updatedReminders = [...this.reminders];
        updatedReminders[reminderIndex].recipient = value;
        this.reminders = [...updatedReminders];
        this.updateRemindersFormValue();
    }
    handleNylasFormInputChanged(event) {
        debug('nylas-reminder-emails', 'handleNylasFormInputChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('reminder-subject-')) {
            return;
        }
        const [_, reminderIndex] = name.split(/(\d+)/);
        const updatedReminders = [...this.reminders];
        updatedReminders[reminderIndex].email_subject = value;
        this.reminders = [...updatedReminders];
        this.updateRemindersFormValue();
    }
    addReminder() {
        debug('nylas-reminder-emails', 'addReminder');
        this.reminders = [
            ...this.reminders,
            {
                type: 'email',
                minutes_before_event: 30,
                editing: true,
                recipient: 'all',
            },
        ];
        this.updateRemindersFormValue();
    }
    deleteReminder(index) {
        this.reminders = this.reminders.filter((_, i) => i !== index).map(p => ({ ...p }));
        this.updateRemindersFormValue();
    }
    get isInternalsAvailable() {
        return this.internals !== undefined && typeof this.internals.setFormValue === 'function';
    }
    updateRemindersFormValue() {
        debug('nylas-reminder-emails', 'updateRemindersFormValue');
        const eventReminders = this.reminders.map(reminder => {
            const rem = { ...reminder };
            rem?.editing && delete rem.editing;
            return rem;
        });
        this.valueChanged.emit({
            value: JSON.stringify(eventReminders),
            name: 'reminder-overrides',
        });
        this.isInternalsAvailable && this.internals.setFormValue(JSON.stringify(eventReminders), 'reminder-overrides');
    }
    formatReminderTime(reminderTime) {
        switch (true) {
            case reminderTime > 24 * 60:
                return `${reminderTime / 60 / 24} days`;
            case reminderTime === 24 * 60:
                return '1 day';
            case reminderTime > 90 || reminderTime === 60:
                return `${reminderTime / 60} hours`;
            default:
                return `${reminderTime} minute${reminderTime > 1 ? 's' : ''} `;
        }
    }
    render() {
        const organizerName = this.participants.find(p => p.is_organizer)?.name;
        const recipientOptions = [
            {
                label: i18next.t('nylasReminderEmails.recipientOptions', { context: 'all' }),
                value: 'all',
            },
            {
                label: i18next.t('nylasReminderEmails.recipientOptions', { context: 'guest' }),
                value: 'guest',
            },
            {
                label: i18next.t('nylasReminderEmails.recipientOptions', { context: 'host' }),
                value: 'host',
            },
        ];
        return (h(Host, { key: 'b0be143161728aa82e29124cd7daca684481362e' }, h("div", { key: '5d272b3d2016c20cd38dc0b3a5e488bec54d1fb6', class: "cards-container" }, this.reminders.map((reminder, index) => {
            return reminder.type !== 'webhook' ? (h("div", { class: "nylas-reminder-email", part: "nre" }, h("div", { class: "header", part: "nre__header" }, h("div", null, h("h3", null, i18next.t('nylasReminderEmails.headerTitle', { organizerName: organizerName ? ` with ${organizerName} ` : '' })), h("p", null, i18next.t('nylasReminderEmails.headerSubTitle'))), !reminder.editing ? (h("button-component", { variant: 'basic', key: `edit-${index} `, clickHandler: event => {
                    event.preventDefault();
                    reminder.editing = true;
                    this.reminders = [...this.reminders];
                } }, h("edit-icon", { width: "16", height: "16" }), i18next.t('nylasReminderEmails.editButtonText'))) : (h("div", { class: "reminder-open-close-toggle" }, h("button-component", { variant: 'basic', class: "delete-btn", tooltip: "Delete reminder", key: `delete -${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.deleteReminder(index);
                } }, h("trash-icon", { width: "16", height: "16" })), h("span", { class: `chevron ${reminder.editing ? 'open' : 'closed'}`, onClick: () => {
                    reminder.editing = !reminder.editing;
                    this.reminders = [...this.reminders];
                } }, h("chevron-icon", { width: "24", height: "24" }))))), reminder.editing ? (h("div", { class: "nylas-reminder-email__body", part: "nre__body" }, h("div", { class: "nylas-reminder-email__section" }, h("div", { class: "nylas-reminder-email__row" }, h("label", null, i18next.t('nylasReminderEmails.emailRecipients.label')), h("select-dropdown", { name: `recipient-${index}`, options: recipientOptions, defaultSelectedOption: recipientOptions.find(i => i.value === reminder.recipient) ?? recipientOptions[0], withSearch: false })), h("div", { class: "nylas-reminder-email__row" }, h("label", null, i18next.t('nylasReminderEmails.sendConfirmation.label'), h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, i18next.t('nylasReminderEmails.sendConfirmation.tooltip.desc'))))), h("nylas-reminder-time", { name: `reminder-time-${index}`, eventReminderTimeMinutes: reminder.minutes_before_event, exportparts: "nrt, nrt__number-dropdown, nrt__number-dropdown-button, nrt__number-dropdown-content, nrt__period-dropdown, nrt__period-dropdown-button, nrt__period-dropdown-content, nrt__time-period-selector" })), h("div", { class: "nylas-reminder-email__block" }, h("label", null, i18next.t('nylasReminderEmails.emailSubject.label')), h("input-component", { name: `reminder-subject-${index}`, maxLength: 60, placeholder: i18next.t('nylasReminderEmails.emailSubject.placeholder', { organizerName: organizerName ? ` with ${organizerName}` : '' }), defaultValue: reminder?.email_subject || '' }))))) : (h("div", { class: "nylas-reminder-email__summary", part: "nre__summary" }, h("p", null, h("span", { class: "summary-icon" }, h("person-clipboard-icon", null)), recipientOptions.find(i => i.value === reminder.recipient)?.label), h("p", null, h("span", { class: "summary-icon" }, h("clock-icon", null)), this.formatReminderTime(reminder.minutes_before_event), " before the event"))))) : null;
        })), h("button-component", { key: '48bd0ab7e17afdbb185e41aa780218fcf18da0a2', class: "create-reminder", variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.addReminder();
            } }, h("plus-icon", { key: '3734f73c9916f80e2bbf771281c014ced6541fcd', width: "16", height: "16" }), i18next.t('nylasReminderEmails.newReminderButtonText'))));
    }
    static get is() { return "nylas-reminder-emails"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-reminder-emails.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-reminder-emails.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected configuration."
                }
            },
            "eventReminders": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "(EventReminder & { editing?: boolean })[]",
                    "resolved": "(EventReminder & { editing?: boolean | undefined; })[] | undefined",
                    "references": {
                        "EventReminder": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::EventReminder"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event reminders prop."
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'reminder-overrides'"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LANGUAGE_CODE",
                    "resolved": "LANGUAGE_CODE.de | LANGUAGE_CODE.en | LANGUAGE_CODE.es | LANGUAGE_CODE.fr | LANGUAGE_CODE.ja | LANGUAGE_CODE.nl | LANGUAGE_CODE.sv | LANGUAGE_CODE.zh | undefined",
                    "references": {
                        "LANGUAGE_CODE": {
                            "location": "import",
                            "path": "@/common/constants",
                            "id": "src/common/constants.ts::LANGUAGE_CODE"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "reminders": {},
            "reminderErrors": {},
            "participants": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the email reminders change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "valueChanged",
                "method": "handleValueChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormDropdownChanged",
                "method": "handleNylasFormDropdownChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputChanged",
                "method": "handleNylasFormInputChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-emails',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderEmails.prototype, "render", null);
//# sourceMappingURL=nylas-reminder-emails.js.map
