var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { addDaysToCurrentDate, convertMinutesToHoursAndMinutes, getFirstDayOfMonth, getLastDayOfMonth, isSameDay, isSameMonth, translateMonth } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { timeDay } from "d3-time";
import i18next from "../../../utils/i18n";
import { debug } from "../../../utils/utils";
export class NylasDatePicker {
    constructor() {
        this.selectableDates = undefined;
        this.configSettings = undefined;
        this.themeConfig = undefined;
        this.selectedDate = undefined;
        this.selectedLanguage = undefined;
        this.isLoading = undefined;
        this.eventDuration = undefined;
        this.month = this.selectedDate || new Date();
        this.dates = this.getDates();
        this.disableNextMonthButton = false;
    }
    configSettingsChanged(newConfigSettings) {
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = newConfigSettings?.scheduler?.available_days_in_future;
        if (availableDaysInFuture === undefined) {
            return;
        }
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
    }
    selectedLanguageChanged(newLanguage) {
        i18next.changeLanguage(newLanguage);
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    componentDidLoad() {
        debug(`[nylas-date-picker] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    getDates() {
        const lastDayOfMonth = getLastDayOfMonth(this.month);
        const firstDayOfMonth = getFirstDayOfMonth(this.month);
        return timeDay.range(timeDay.offset(firstDayOfMonth, -firstDayOfMonth.getDay()), timeDay.offset(lastDayOfMonth, 7 - lastDayOfMonth.getDay()));
    }
    selectDate(date) {
        this.dateSelected.emit(date);
    }
    changeMonth(change) {
        this.month = new Date(this.month.getFullYear(), this.month.getMonth() + change, 1);
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = this.configSettings?.scheduler?.available_days_in_future;
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
        this.dates = this.getDates();
        this.monthChanged.emit(this.month);
    }
    isSelected(date, selectedDate, selectableDates) {
        return date && selectedDate && isSameDay(date, selectedDate) && selectableDates && selectableDates?.length > 0;
    }
    isDisabled(date, selectableDates) {
        return date && selectableDates?.find(d => isSameDay(d, date)) === undefined;
    }
    render() {
        return (h(Host, { key: '4c20e8d37a61de3397cac0625884fdd9c11cc8af', part: "ndp" }, h("div", { key: '44174b6408db8263ab96c9acb57985af0d0780d2', class: "nylas-date-picker" }, h("div", { key: '962fc8b1ab8d8794df5838e16a477b8f705e4e6f', class: "title", part: "ndp__title" }, this.configSettings?.name ? (h("h1", null, this.configSettings?.name)) : (this.configSettings?.organizer?.name && (h("h1", null, h("person-icon", null), this.configSettings?.organizer?.name || 'Organizer'))), h("p", { key: '422505548dffc0ee5a70811415ff030641faeeff' }, h("clock-icon", { key: 'ef51faa1c20ef5caf3f3a8f7ff619c619ba72401' }), this.eventDuration ? convertMinutesToHoursAndMinutes(this.eventDuration) : `- ${i18next.t('time.minutes')}`)), h("div", { key: 'f593d3bbcb954bd863381e445cff053ce0085714', class: 'header flex-row' }, h("h2", { key: 'bc844a479c3d7e7b4a2065e91aa79baace20b302', part: 'ndp__month-header' }, h("strong", { key: 'da5035f141b874d58f626426b71ee7e9dd0b6424' }, translateMonth(this.month.toLocaleDateString(undefined, { month: 'long' }).toLocaleLowerCase())), "\u00A0", this.month.toLocaleDateString(undefined, { year: 'numeric' })), h("div", { key: 'a2721542d5155de0072aa8a191b111b7d8cd7eea', class: 'pagination' }, h("button", { key: 'ad051ec43c6eb386ddefcab4db66932b079d75e0', title: "Previous month", onClick: () => this.changeMonth(-1), class: { 'chevron-left': true, 'button': true }, disabled: this.month <= new Date(), part: "ndp__month-button" }, h("chevron-icon", { key: '29cc3852bddacb1d4dd014aceb061d6baa27bfb4' })), h("button", { key: '92de9256c6c89f2dde6c59717bc9866a122e455c', title: "Next month", onClick: () => this.changeMonth(1), class: { 'chevron-right': true, 'button': true }, disabled: this.disableNextMonthButton, part: "ndp__month-button" }, h("chevron-icon", { key: '98e5e9d80629c9e86767ba151e88b20fb1a188b7' })))), h("div", { key: 'a63a1331d33c6f1b79d0e2f99e06c8ad0e4a2e50', class: 'dates' }, [
            i18next.t('days.sunday'),
            i18next.t('days.monday'),
            i18next.t('days.tuesday'),
            i18next.t('days.wednesday'),
            i18next.t('days.thursday'),
            i18next.t('days.friday'),
            i18next.t('days.saturday'),
        ].map(day => {
            return (h("div", { class: 'day', part: "ndp__day" }, day));
        }), this.dates.map((date, i) => {
            const isDisabled = this.isDisabled(date, this.selectableDates);
            if (this.isLoading) {
                return (h("button", { disabled: true, class: {
                        'date day-skeleton': true,
                        'current-month': isSameMonth(date, this.month),
                    }, style: { animationDelay: `${i * 20}ms` }, part: `ndp__date ndp__date--disabled` }, date.getDate()));
            }
            return (h("button", { class: {
                    'date': true,
                    'selected': !!(this.selectedDate && isSameDay(date, this.selectedDate) && this.selectableDates && this.selectableDates?.length > 0),
                    'current-day': isSameDay(date, new Date()),
                    'current-month': isSameMonth(date, this.month),
                }, "aria-label": date.toLocaleDateString(undefined, { dateStyle: 'full' }), disabled: isDisabled, onClick: () => this.selectDate(date), part: `ndp__date ${this.isSelected(date, this.selectedDate, this.selectableDates) ? 'ndp__date--selected' : ''} ${isSameDay(date, new Date()) ? 'ndp__date--current-day' : ''} ${isSameMonth(date, this.month) ? 'ndp__date--current-month' : ''}` }, date.getDate()));
        })))));
    }
    static get is() { return "nylas-date-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-date-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-date-picker.css"]
        };
    }
    static get properties() {
        return {
            "selectableDates": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date[]",
                    "resolved": "Date[] | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The dates that are selectable."
                        }],
                    "text": ""
                }
            },
            "configSettings": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "undefined | { configuration_id: string; booking?: { additional_fields: Record<string, string>; additional_guests: { email: string; name: string; }[]; booking_ref: string; booking_ref_salt: string; guest: { email: string; name: string; }; timezone: string; email_language: string; event_data: { location: string; when: { start_time: Date; end_time: Date; end_timezone: string; start_timezone: string; object: string; }; }; event_organizer: { name: string; email: string; is_organizer: boolean; }; } | undefined; scheduler: { available_days_in_future: number; min_cancellation_notice: number; min_booking_notice: number; rescheduling_url?: string | undefined; cancellation_url?: string | undefined; cancellation_policy?: string | undefined; hide_additional_guests?: boolean | undefined; hide_cancellation_options?: boolean | undefined; hide_rescheduling_options?: boolean | undefined; additional_fields?: Record<string, AdditionalFields> | undefined; confirmation_redirect_url?: string | undefined; organizer_confirmation_url?: string | undefined; }; organizer: { name: string; email: string; }; slug: string; appearance: Appearance; booking_type: string; name: string; }",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::ConfigSettings"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The config settings."
                        }],
                    "text": ""
                }
            },
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            },
            "selectedDate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected date."
                }
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state."
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "eventDuration": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event duration."
                },
                "attribute": "event-duration",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "month": {},
            "dates": {},
            "disableNextMonthButton": {}
        };
    }
    static get events() {
        return [{
                "method": "dateSelected",
                "name": "dateSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when a date is selected."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }, {
                "method": "monthChanged",
                "name": "monthChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the month is changed."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "configSettings",
                "methodName": "configSettingsChanged"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChanged"
            }, {
                "propName": "themeConfig",
                "methodName": "themeConfigChanged"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-date-picker',
        stateToProps: new Map([
            ['scheduler.selectableDates', 'selectableDates'],
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.eventDuration', 'eventDuration'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            dateSelected: async (event, nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'dateSelected', event.detail);
                nylasSchedulerConnector.scheduler.selectDate(event.detail);
            },
            monthChanged: async (event, _nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'monthChanged', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasDatePicker.prototype, "render", null);
//# sourceMappingURL=nylas-date-picker.js.map
