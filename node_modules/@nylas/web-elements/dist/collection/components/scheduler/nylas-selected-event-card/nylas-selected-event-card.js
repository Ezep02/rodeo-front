var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { capitalizeFirstLetter, debug } from "../../../utils/utils";
import { LANGUAGE_CODE_MAP, TIMEZONE_MAP } from "../../../common/constants";
export class NylasSelectedEventCard {
    constructor() {
        this.themeConfig = undefined;
        this.selectedDate = undefined;
        this.selectedTimeslot = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = undefined;
        this.startTime = '';
        this.endTime = '';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-selected-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-selected-event-card] Component did load`);
        if (!this.selectedDate) {
            console.warn('[nylas-selected-event-card] "selectedDate" prop is not provided.');
        }
        if (!this.selectedTimeslot) {
            console.warn('[nylas-selected-event-card] "selectedTimeslot" prop is not provided.');
        }
        this.applyThemeConfig(this.themeConfig);
        const timeFormat = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: this.selectedTimezone,
        });
        this.startTime = timeFormat.format(new Date(this.selectedTimeslot?.start_time));
        this.endTime = timeFormat.format(new Date(this.selectedTimeslot?.end_time));
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    render() {
        return (h(Host, { key: 'e03c7985396173ef1d2bb0ba02ea88e958811a35', part: "nsec" }, h("div", { key: '017d6ce8fc92ef11070d94038e80095acbd90f29', class: "event-card", part: "nsec__card" }, h("div", { key: 'b475d6d8481d4e85a383822ed34139a2838a686c', class: "calendar-icon", part: "nsec__icon" }, h("calendar-icon", { key: '83df23c0d499b2932c84175c45c05bb589294f74' })), h("div", { key: 'e11fe3c83e6cf3fa926ec3b7e0e381625cb98b0f', class: "nylas-selected-event-card__date", part: "nsec__date" }, this.selectedDate
            ? capitalizeFirstLetter(this.selectedDate?.toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage || navigator.language], { dateStyle: 'full', timeZone: this.selectedTimezone }))
            : '-'), h("div", { key: 'ed9773f2567782ab354ffe28fbbc365d3d2effa5', class: "nylas-selected-event-card__time", part: "nsec__time" }, this.startTime, " - ", this.endTime)), h("div", { key: '16389c36fe0ab7c55e5f71ab22ad8576dc509cae', class: "event-timezone", part: "nsec__timezone" }, h("globe-icon", { key: '2c6d9e03e0687a5912e1f674c08c19b6e612e90a' }), TIMEZONE_MAP[this.selectedTimezone])));
    }
    static get is() { return "nylas-selected-event-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-selected-event-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-selected-event-card.css"]
        };
    }
    static get properties() {
        return {
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            },
            "selectedDate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected date."
                }
            },
            "selectedTimeslot": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "undefined | { start_time: Date; end_time: Date; emails?: string[] | undefined; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected time."
                }
            },
            "selectedTimezone": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timezone."
                },
                "attribute": "selected-timezone",
                "reflect": false,
                "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "startTime": {},
            "endTime": {}
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "themeConfig",
                "methodName": "themeConfigChanged"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-selected-event-card',
        stateToProps: new Map([
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasSelectedEventCard.prototype, "render", null);
//# sourceMappingURL=nylas-selected-event-card.js.map
