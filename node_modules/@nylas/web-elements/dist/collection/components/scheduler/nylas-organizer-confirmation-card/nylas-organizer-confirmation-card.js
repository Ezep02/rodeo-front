var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { debug } from "../../../utils/utils";
import i18next from "../../../utils/i18n";
export class NylasOrganizerConfirmationCard {
    constructor() {
        this.handleConfirmBookingButtonClicked = () => {
            this.action = 'confirm';
            const errorHandler = (error) => {
                this.confirmBookingError.emit(error);
            };
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.confirmBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host, errorHandler });
            }
        };
        this.handleRejectBookingButtonClicked = () => {
            this.action = 'reject';
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.rejectBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host });
            }
        };
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.organizerConfirmationBookingId = undefined;
        this.selectedLanguage = navigator.language;
        this.action = null;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-organizer-confirmation-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-organizer-confirmation-card] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    async resetAction() {
        this.action = null;
    }
    render() {
        return (h(Host, { key: 'b4c323bc2244bedc43ffea38922a0ba97424b5bf', part: "nmcc" }, h("div", { key: 'd7b9bea1042b6c23497c4a34a730884d1581f7a1', class: "event-card-wrapper", part: "nmccc__card" }, h("div", { key: 'c62045056e85744d1b94ae14b926aed48b821fdd', class: "calendar-icon" }, h("calendar-check-icon", { key: '38e95954bf2695949935b6998f5b5422ac2120ef' })), h("div", { key: '9bf921461d40ffe93856da6aa3dd6b29bcdf366e', class: "booked-event-header" }, h("h2", { key: '27beea17ad61d225cd1448b1a1e22c3089bfea6c', slot: "card-title", part: "nmcc__title" }, !!this.organizerConfirmationBookingId && `${i18next.t('bookingPendingTitle')}!`)), h("div", { key: '49a8c37598e7cc0b9148441db85a5f3b9c59cfcb', class: "manage-booking-description" }, h("p", { key: 'bba62e3fb07460d9ea1dd0bfa507a2aa29cd3ad8' }, i18next.t('bookingPendingnDescription'))), h("div", { key: '1d9b9e5965133b7863cc3aca80c73b88e2455dab', class: {
                'footer': true,
                'no-footer': this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options,
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleRejectBookingButtonClicked, isLoading: this.isLoading && this.action === 'reject', part: "nmcc__button-outline nmcc__cancel-cta" }, `${i18next.t('rejectBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleConfirmBookingButtonClicked, isLoading: this.isLoading && this.action === 'confirm', part: "nmcc__button-outline nmcc__reschedule-cta" }, `${i18next.t('confirmBookingButton')}`))))));
    }
    static get is() { return "nylas-organizer-confirmation-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-organizer-confirmation-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-organizer-confirmation-card.css"]
        };
    }
    static get properties() {
        return {
            "configSettings": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "any",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The config settings for the scheduler."
                        }],
                    "text": ""
                },
                "attribute": "config-settings",
                "reflect": false
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The loading state prop. Used to display loading state when fetching availability."
                        }],
                    "text": ""
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            },
            "organizerConfirmationBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Booking flow type."
                },
                "attribute": "organizer-confirmation-booking-id",
                "reflect": false
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false,
                "defaultValue": "navigator.language"
            }
        };
    }
    static get states() {
        return {
            "action": {}
        };
    }
    static get events() {
        return [{
                "method": "rejectBookingButtonClicked",
                "name": "rejectBookingButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Reject booking button clicked event."
                },
                "complexType": {
                    "original": "{ bookingId: string; host: HTMLNylasOrganizerConfirmationCardElement }",
                    "resolved": "{ bookingId: string; host: HTMLNylasOrganizerConfirmationCardElement; }",
                    "references": {
                        "HTMLNylasOrganizerConfirmationCardElement": {
                            "location": "global",
                            "id": "global::HTMLNylasOrganizerConfirmationCardElement"
                        }
                    }
                }
            }, {
                "method": "confirmBookingButtonClicked",
                "name": "confirmBookingButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Reschedule button clicked event."
                },
                "complexType": {
                    "original": "{\n    bookingId: string;\n    host: HTMLNylasOrganizerConfirmationCardElement;\n    errorHandler?: (error: NylasSchedulerErrorResponse) => void;\n  }",
                    "resolved": "{ bookingId: string; host: HTMLNylasOrganizerConfirmationCardElement; errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "HTMLNylasOrganizerConfirmationCardElement": {
                            "location": "global",
                            "id": "global::HTMLNylasOrganizerConfirmationCardElement"
                        },
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "confirmBookingError",
                "name": "confirmBookingError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while rescheduling the booking."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "resetAction": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "themeConfig",
                "methodName": "themeConfigChanged"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-organizer-confirmation-card',
        stateToProps: new Map([
            ['scheduler.organizerConfirmationBookingId', 'organizerConfirmationBookingId'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            rejectBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setReject(event.detail.bookingId);
            },
            confirmBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                const { host } = event.detail;
                const result = await nylasSchedulerConnector.scheduler.updateBooking({
                    bookingId: event.detail.bookingId,
                    status: 'confirmed',
                });
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
                await host.resetAction();
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasOrganizerConfirmationCard.prototype, "render", null);
//# sourceMappingURL=nylas-organizer-confirmation-card.js.map
