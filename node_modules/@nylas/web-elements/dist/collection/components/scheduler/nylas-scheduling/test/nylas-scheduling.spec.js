import { newSpecPage } from "@stencil/core/testing";
import { NylasScheduling } from "../nylas-scheduling";
import { NylasBookingForm } from "../../nylas-booking-form/nylas-booking-form";
import { NylasSelectedEventCard } from "../../nylas-selected-event-card/nylas-selected-event-card";
import { h } from "@stencil/core";
import { NylasDatePicker } from "../../nylas-date-picker/nylas-date-picker";
import { NylasTimeslotPicker } from "../../nylas-timeslot-picker/nylas-timeslot-picker";
import { NylasLocaleSwitch } from "../../nylas-locale-switch/nylas-locale-switch";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
const configSettings = {
    name: '',
    slug: '',
    configuration_id: '19ca4a10-be05-4d1b-a830-5b639a362cef',
    scheduler: {
        available_days_in_future: 30,
        min_cancellation_notice: 0,
        min_booking_notice: 60,
        rescheduling_url: 'https://book.nylas.com/scheduler/reschedule/:booking_ref',
        cancellation_url: 'https://book.nylas.com/scheduler/cancel/:booking_ref',
        organizer_confirmation_url: 'https://book.nylas.com/scheduler/confirm/:booking_ref',
        confirmation_redirect_url: 'https://nylas.com',
        hide_rescheduling_options: false,
        hide_cancellation_options: false,
        hide_additional_guests: false,
        cancellation_policy: '',
        additional_fields: {
            dropdown: {
                label: 'Dropdown Label',
                type: 'dropdown',
                required: false,
                order: 2,
                options: ['option 1', 'option 2'],
            },
            short_text: {
                label: 'Short Text Label',
                type: 'text',
                required: false,
                order: 1,
            },
        },
    },
    organizer: {
        email: 'pooja.g@nylas.com',
        name: '',
    },
    booking_type: 'booking',
    appearance: {
        company_logo_url: '',
    },
};
const defaultSchedulerState = {
    showBookingForm: true,
    availability: [
        {
            emails: ['pooja.g@nylas.com'],
            end_time: 1728639000,
            start_time: 1728637200,
        },
    ],
    selectableDates: [new Date(1728639000000)],
    selectedDate: new Date(1728639000000),
    selectedTimeslot: {
        end_time: 1728639000,
        start_time: 1728637200,
        emails: ['janedoe@example.com'],
    },
    selectedTimezone: 'America/Los_Angeles',
    bookingInfo: {
        primaryParticipant: {
            name: 'John Doe',
            email: 'johndoe@example.com',
        },
        guests: [],
        additionalFields: {
            short_text: {
                value: 'some value',
                type: 'text',
            },
            dropdown: {
                value: 'option 2',
                type: 'dropdown',
            },
            field2: {
                value: 'some value',
                type: 'text',
            },
        },
    },
    configSettings: { ...configSettings },
};
describe('nylas-scheduling', () => {
    const REAL_DATE = Date;
    const testBookingRef = 'Of_H8WLEQ4aZTtx0NKajeAF1l9qpekHbo4by7AaZc8M=';
    beforeEach(() => {
        jest.clearAllMocks();
    });
    beforeAll(() => {
        const originalDate = Date;
        global.Date = class extends originalDate {
            constructor(date) {
                super(date ? date : '2022-01-01T00:00:00.000Z');
            }
        };
    });
    afterAll(() => {
        global.Date = REAL_DATE;
    });
    it('renders', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('listens for NylasSchedulingError event and updates state', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        const mockError = { title: 'Error', description: 'Test Error', type: 'error', category: 'component', ttl: 'none' };
        const errorEvent = new CustomEvent('NylasSchedulingError', { detail: mockError, bubbles: true });
        page.win.dispatchEvent(errorEvent);
        await page.waitForChanges();
        const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');
        expect(notification).not.toBeNull();
        const notifRoot = notification?.shadowRoot?.querySelector('.notif');
        expect(notifRoot).not.toBeNull();
    });
    it('shows no error when configID is set, and no sessionID is set', async () => {
        const availability = [
            {
                emails: ['xyz@gmail.com'],
                end_time: new Date(1709303400000),
                start_time: new Date(1709301600000),
            },
        ];
        const page = await newSpecPage({
            components: [NylasScheduling],
            template: () => (h("nylas-scheduling", { "config-id": "configid", defaultSchedulerState: {
                    availability,
                } })),
        });
        await page.waitForChanges();
        const notification = page?.root?.shadowRoot?.querySelector('nylas-notification');
        const notifRoot = notification?.shadowRoot?.querySelector('.notif');
        expect(notifRoot).toBeUndefined();
    });
    it('listens for dateSelected event and updates date label', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling></nylas-scheduling>`,
        });
        const selectedDate = new Date();
        const dateSelectedEvent = new CustomEvent('dateSelected', { detail: selectedDate, bubbles: true });
        page.win.dispatchEvent(dateSelectedEvent);
        await page.waitForChanges();
        const selectedDateLabel = page?.root?.shadowRoot?.querySelector('#selectedDate');
        expect(selectedDateLabel?.textContent).toBe('No date selected');
    });
    it('conditionally renders cancel flow based on cancelBookingRef prop', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling cancel-booking-ref=${testBookingRef}></nylas-scheduling>`,
        });
        await page.waitForChanges();
        const cancelFlowPage = page?.root?.shadowRoot?.querySelector('.cancel-flow-page');
        expect(cancelFlowPage).not.toBeNull();
    });
    it('renders composable UI when mode is set to composable', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling mode="composable">
      <nylas-if-state state="scheduler.eventInfo" is-state-set="false">
      <div class="flex">
        <div class="flex flex-col gap-4 px-6 pt-4 h-[514px] w-[433px] border-slate-200 dark:border-slate-700 border-r">
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="false">
            <nylas-date-picker></nylas-date-picker>
            <div class="border-slate-200 dark:border-slate-700 border-t -mx-6 h-px"></div>
            <nylas-locale-switch></nylas-locale-switch>
          </nylas-if-state>
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="true">
            <div class="flex flex-col justify-center h-[496px]">
              <nylas-selected-event-card></nylas-selected-event-card>
            </div>
          </nylas-if-state>
        </div>
        <div class="flex flex-col items-center min-w-[360px] overflow-hidden bg-slate-50 dark:bg-slate-700">
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="false" class="w-full">
            <div class="flex flex-col justify-start w-full">
              <nylas-if-state state="scheduler.selectableDates" is-state-set="true">
                <h2 class="flex items-center justify-center text-lg font-semibold w-full text-center gap-1 mb-4 mt-6 text-slate-700 dark:text-white">
                  <calendar-icon></calendar-icon>
                  <nylas-if-state state="scheduler.selectedDate" is-state-set="false">
                    <span>No date selected</span>
                  </nylas-if-state>
                  <nylas-if-state state="scheduler.selectedDate" is-state-set="true">
                    <span id="selectedDate"></span>
                  </nylas-if-state>
                </h2>
              </nylas-if-state>
              <nylas-timeslot-picker></nylas-timeslot-picker>
            </div>
          </nylas-if-state>
          <nylas-if-state state="scheduler.showBookingForm" is-boolean="true" class="w-full">
            <div class="flex flex-col justify-center h-[496px]">
              <nylas-booking-form></nylas-booking-form>
            </div>
          </nylas-if-state>
        </div>
      </div>
    </nylas-if-state>
      </nylas-scheduling>`,
        });
        expect(page.root).toMatchSnapshot();
    });
    it('exposes getNylasSchedulingStore method and returns store', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling session-id="sessionid"></nylas-scheduling>`,
        });
        const scheduler = page.rootInstance;
        const store = await scheduler.getNylasSchedulerStore();
        expect(store).toBeDefined();
    });
    it('exposes getNylasSchedulingConnector method and returns connector', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling session-id="sessionid"></nylas-scheduling>`,
        });
        const scheduler = page.rootInstance;
        const connector = await scheduler.getNylasSchedulerConnector();
        expect(connector).toBeDefined();
    });
    it('should render the reschedule flow when rescheduleBookingRef is set', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            html: `<nylas-scheduling reschedule-booking-ref=${testBookingRef}></nylas-scheduling>`,
        });
        await page.waitForChanges();
        const messageBanner = page?.root?.shadowRoot?.querySelector('.message-banner');
        expect(messageBanner).not.toBeNull();
    });
    it('hides the nylas logo in the footer if nylasBranding is set', async () => {
        const page = await newSpecPage({
            components: [NylasScheduling],
            template: () => h("nylas-scheduling", { "config-id": "configid", nylasBranding: false }),
        });
        await page.waitForChanges();
        const footer = page?.root?.shadowRoot?.querySelector('.footer');
        expect(footer?.textContent).not.toContain('Powered by Nylas');
    });
    it('applies themeConfig to sub components', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(url => {
            if (url === 'https://api.us.nylas.com/v3/scheduling/ui-settings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({ request_id: 'test', data: configSettings });
            }
            else if (url === 'https://api.us.nylas.com/v3/scheduling/bookings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({
                    json: () => Promise.resolve({
                        request_id: '1729109187-ffa7e86e-c276-45c2-8cda-e3205e46d234',
                        data: {
                            event_id: 'jlid5nji0nmoupl87ls85iv8do',
                            booking_id: '8f9f5145-c40c-4477-8d30-5c43256ddb60',
                            title: 'm',
                            description: '',
                            organizer: {
                                email: 'johndoe@example.com',
                                name: '',
                            },
                            status: 'booked',
                        },
                    }),
                });
            }
            return fetch(url);
        });
        const page = await newSpecPage({
            components: [NylasDatePicker, NylasTimeslotPicker, NylasScheduling],
            template: () => (h("nylas-scheduling", { configurationId: '19ca4a10-be05-4d1b-a830-5b639a362cef', bookingInfo: defaultSchedulerState.bookingInfo, defaultSchedulerState: { ...defaultSchedulerState, showBookingForm: false }, themeConfig: {
                    '--nylas-primary': 'red',
                    '--nylas-base-500': 'orange',
                } })),
        });
        await page.waitForChanges();
        const datePicker = page?.root?.shadowRoot?.querySelector('nylas-date-picker');
        const timeslotPicker = page?.root?.shadowRoot?.querySelector('nylas-timeslot-picker');
        datePicker.themeConfig = {
            '--nylas-primary': 'red',
            '--nylas-base-500': 'orange',
        };
        timeslotPicker.themeConfig = {
            '--nylas-primary': 'red',
            '--nylas-base-500': 'orange',
        };
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const datePickerHost = datePicker?.shadowRoot?.host;
        expect(datePickerHost?.style.getPropertyValue('--nylas-primary')).toBe('red');
        expect(datePickerHost?.style.getPropertyValue('--nylas-base-500')).toBe('orange');
        const timeslotPickerHost = timeslotPicker?.shadowRoot?.host;
        expect(timeslotPickerHost?.style.getPropertyValue('--nylas-primary')).toBe('red');
        expect(timeslotPickerHost?.style.getPropertyValue('--nylas-base-500')).toBe('orange');
    });
    it('applies bookingInfo timezone and language to sub components', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(url => {
            if (url === 'https://api.us.nylas.com/v3/scheduling/ui-settings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({ request_id: 'test', data: configSettings });
            }
            else if (url === 'https://api.us.nylas.com/v3/scheduling/bookings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({
                    json: () => Promise.resolve({
                        request_id: '1729109187-ffa7e86e-c276-45c2-8cda-e3205e46d234',
                        data: {
                            event_id: 'jlid5nji0nmoupl87ls85iv8do',
                            booking_id: '8f9f5145-c40c-4477-8d30-5c43256ddb60',
                            title: 'm',
                            description: '',
                            organizer: {
                                email: 'johndoe@example.com',
                                name: '',
                            },
                            status: 'booked',
                        },
                    }),
                });
            }
            return fetch(url);
        });
        const page = await newSpecPage({
            components: [SelectDropdown, NylasDatePicker, NylasTimeslotPicker, NylasLocaleSwitch, NylasScheduling],
            template: () => (h("nylas-scheduling", { configurationId: '19ca4a10-be05-4d1b-a830-5b639a362cef', bookingInfo: { ...defaultSchedulerState.bookingInfo, timezone: 'America/Toronto' }, defaultSchedulerState: { ...defaultSchedulerState, showBookingForm: false } })),
        });
        await page.waitForChanges();
        const localeSwitch = page?.root?.shadowRoot?.querySelector('nylas-locale-switch');
        localeSwitch.bookingInfo = { ...defaultSchedulerState.bookingInfo, language: 'fr', timezone: 'America/Toronto' };
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const timezoneSelectDropdown = localeSwitch?.shadowRoot?.querySelector('.timezone select-dropdown');
        const timezoneButton = timezoneSelectDropdown?.shadowRoot?.querySelector('button');
        expect(timezoneButton?.textContent).toContain('America / Toronto');
        const languageSelectDropdown = localeSwitch?.shadowRoot?.querySelector('.language select-dropdown');
        const languageButton = languageSelectDropdown?.shadowRoot?.querySelector('button');
        expect(languageButton?.textContent).toContain('Français');
    });
    it('redirects with the query params when redirectUrl is set', async () => {
        jest.spyOn(global, 'fetch').mockImplementation(url => {
            if (url === 'https://api.us.nylas.com/v3/scheduling/ui-settings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({ request_id: 'test', data: configSettings });
            }
            else if (url === 'https://api.us.nylas.com/v3/scheduling/bookings?configuration_id=19ca4a10-be05-4d1b-a830-5b639a362cef') {
                return Promise.resolve({
                    json: () => Promise.resolve({
                        request_id: '1729109187-ffa7e86e-c276-45c2-8cda-e3205e46d234',
                        data: {
                            event_id: 'jlid5nji0nmoupl87ls85iv8do',
                            booking_id: '8f9f5145-c40c-4477-8d30-5c43256ddb60',
                            title: 'm',
                            description: '',
                            organizer: {
                                email: 'johndoe@example.com',
                                name: '',
                            },
                            status: 'booked',
                        },
                    }),
                });
            }
            return fetch(url);
        });
        let nylasScheduling;
        const page = await newSpecPage({
            components: [NylasSelectedEventCard, NylasBookingForm, NylasScheduling],
            template: () => (h("nylas-scheduling", { mode: "app", configurationId: '19ca4a10-be05-4d1b-a830-5b639a362cef', bookingInfo: defaultSchedulerState.bookingInfo, defaultSchedulerState: defaultSchedulerState })),
        });
        nylasScheduling = page.rootInstance;
        const redirectSpy = jest.spyOn(nylasScheduling, 'redirectToCustomUrl');
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const nylasBookingForm = page?.root?.shadowRoot?.querySelector('nylas-booking-form');
        nylasBookingForm.bookingInfo = defaultSchedulerState.bookingInfo;
        await page.waitForChanges();
        const form = nylasBookingForm?.shadowRoot?.querySelector('form');
        expect(form).not.toBeNull();
        const detailsConfirmedEvent = new CustomEvent('detailsConfirmed', {
            detail: {
                additionalFields: { dropdown: 'option 2', short_text: 'hello' },
                guests: [],
                start_time: new Date(1729013400000),
                timezone: 'America/Toronto',
                email_language: 'en-US',
                end_time: new Date(1729015200000),
                timeslot: {
                    start_time: new Date(1729013400000),
                    end_time: new Date(1729015200000),
                },
                primaryParticipant: { name: 'John Doe', email: 'johndoe@example.com' },
            },
            bubbles: true,
        });
        await nylasScheduling.bookButtonClickedHandler(detailsConfirmedEvent);
        await page.waitForChanges();
        expect(redirectSpy).toHaveBeenCalled();
        expect(redirectSpy).toHaveBeenCalledWith('https://nylas.com?booking_id=8f9f5145-c40c-4477-8d30-5c43256ddb60&name=John+Doe&email=johndoe%40example.com&start_time=1728637.2&end_time=1728639&tz=America%2FLos_Angeles&additional_values=%7B%22dropdown%22%3A%22option+2%22%2C%22short_text%22%3A%22hello%22%2C%22field2%22%3A%22some+value%22%7D&config_id=19ca4a10-be05-4d1b-a830-5b639a362cef');
    });
});
//# sourceMappingURL=nylas-scheduling.spec.js.map
