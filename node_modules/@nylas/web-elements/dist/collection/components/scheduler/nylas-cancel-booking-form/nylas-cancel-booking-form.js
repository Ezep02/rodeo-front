var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { debug } from "../../../utils/utils";
import i18next from "../../../utils/i18n";
export class NylasCancelBookingForm {
    constructor() {
        this.handleGoBackClicked = () => {
            this.goBackButtonClicked.emit();
        };
        this.handleSubmitCancelBooking = (event) => {
            this.triggerValidation.emit({});
            event.preventDefault();
            if (!this.cancellationReason) {
                this.cancellationError = i18next.t('cancellationErrorMessage');
                this.cancelBookingFormError.emit({ title: i18next.t('cancelBokingFormError'), description: i18next.t('cancellationErrorMessage') });
                return;
            }
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            if (this.selectedTimeslot && minCancellationNotice) {
                const startTime = new Date(this.selectedTimeslot?.start_time);
                const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
                if (dateTillCancellation < new Date().getTime()) {
                    this.cancelBookedEventError.emit({
                        error: {
                            title: i18next.t('cancellationErrorTitle'),
                            message: i18next.t('minimumCancellationNoticeErrorMessage', { minCancellationNotice }),
                        },
                    });
                    return;
                }
            }
            debug(`[nylas-cancel-booking-form] Cancel booking form submitted with reason: ${this.cancellationReason}`);
            const errorHandler = (error) => {
                this.cancelBookedEventError.emit(error);
            };
            if (this.cancelBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.cancelBookingId, action: 'cancel', reason: this.cancellationReason, errorHandler });
            }
            else if (this.rejectBookingId) {
                this.cancelBookingFormSubmitted.emit({ bookingId: this.rejectBookingId, action: 'reject', reason: this.cancellationReason, errorHandler });
            }
        };
        this.cancelBookingId = undefined;
        this.rejectBookingId = undefined;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
        this.eventInfo = undefined;
        this.isLoading = undefined;
        this.themeConfig = undefined;
        this.cancellationReason = '';
        this.cancellationError = '';
        this.cancellationPolicy = this.configSettings?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    configSettingsChangedHandler(newValue) {
        this.cancellationPolicy = newValue?.scheduler?.cancellation_policy || 'Your current timeslot will become available to others.';
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    connectedCallback() {
        debug(`[nylas-cancel-booking-form] Component connected`);
    }
    async componentWillLoad() {
        debug(`[nylas-cancel-booking-form] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-cancel-booking-form] Component did load`);
        if (!this.cancelBookingId) {
            console.warn(`[nylas-cancel-booking-form] No booking ID provided, "cancelBookingId" prop is required.`);
        }
        this.applyThemeConfig(this.themeConfig);
    }
    disconnectedCallback() {
        debug(`[nylas-cancel-booking-form] Component disconnected`);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    handleNylasFormInputChanged(event) {
        this.triggerValidation.emit({});
        if (event.detail.name === 'cancel-reason') {
            this.cancellationReason = event.detail.value;
            this.cancellationError = event.detail.error;
        }
    }
    render() {
        return (h(Host, { key: 'a883955600837a2006648886cc55ac8bd0ea0076', part: "ncbf" }, h("div", { key: '868e3b711cd18b2fabc29d5d179255ed1d9ba0dc', class: "nylas-cancel-booking-form", part: "ncbf__card" }, h("div", { key: '20dabbd57825f213f7a7f1700de22cd8228409b8', class: "nylas-cancel-booking-form__calendar-icon", part: "ncbf__icon" }, h("calendar-cancel-icon", { key: 'd6bab72a846359fdec0e0ee30c23c4ab41f33a8e' })), h("h3", { key: 'ac741c5913c7977bb411f6dec7ca25ce498a875a', class: "nylas-cancel-booking-form__title", part: "ncbf__title" }, i18next.t('cancelBookingTitle')), h("div", { key: '4938ceba259171a7b73465ee1979f7f42d99110f', class: "nylas-cancel-booking-form__description", part: "ncbf__description" }, !this.configSettings?.scheduler?.cancellation_policy ? `${i18next.t('cancelBookingMessage')}` : this.cancellationPolicy), h("form", { key: '7b33c284b2c9ee3aa92b5faf1f9b25acb5cacd2e', onSubmit: this.handleSubmitCancelBooking }, h("textarea-component", { key: 'c2cdfac338d6af301c84ce5120d79e0eba92f56a', id: "cancel-reason", name: "cancel-reason", required: true, label: i18next.t('reasonForCancellation'), class: this.cancellationError ? 'error' : '', part: "ncbf__reason-textarea", defaultValue: this.cancellationReason }), h("div", { key: '675ccb5dc874a97d05cacde94fec4b17c95c2e07', class: "footer" }, h("button-component", { key: '2dcba1cec03a6f21766dc1bc3f10aa8790dcc022', variant: 'destructive', class: "cancel", type: "submit", part: "ncbf__button-cta", disabled: this.isLoading }, i18next.t('cancelBookingButton')), !!this.eventInfo && (h("button-component", { variant: 'basic', class: "back", part: "ncbf__button-outline", onClick: this.handleGoBackClicked }, i18next.t('goBackButton'))))))));
    }
    static get is() { return "nylas-cancel-booking-form"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-cancel-booking-form.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-cancel-booking-form.css"]
        };
    }
    static get properties() {
        return {
            "cancelBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booking ID to cancel."
                },
                "attribute": "cancel-booking-id",
                "reflect": false
            },
            "rejectBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booking ID to reject."
                },
                "attribute": "reject-booking-id",
                "reflect": false
            },
            "selectedTimeslot": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "{ start_time: Date; end_time: Date; emails?: string[] | undefined; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timeslot."
                }
            },
            "configSettings": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "undefined | { configuration_id: string; booking?: { additional_fields: Record<string, string>; additional_guests: { email: string; name: string; }[]; booking_ref: string; booking_ref_salt: string; guest: { email: string; name: string; }; timezone: string; email_language: string; event_data: { location: string; when: { start_time: Date; end_time: Date; end_timezone: string; start_timezone: string; object: string; }; }; event_organizer: { name: string; email: string; is_organizer: boolean; }; } | undefined; scheduler: { available_days_in_future: number; min_cancellation_notice: number; min_booking_notice: number; rescheduling_url?: string | undefined; cancellation_url?: string | undefined; cancellation_policy?: string | undefined; hide_additional_guests?: boolean | undefined; hide_cancellation_options?: boolean | undefined; hide_rescheduling_options?: boolean | undefined; additional_fields?: Record<string, AdditionalFields> | undefined; confirmation_redirect_url?: string | undefined; organizer_confirmation_url?: string | undefined; }; organizer: { name: string; email: string; }; slug: string; appearance: Appearance; booking_type: string; name: string; }",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::ConfigSettings"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The config settings."
                        }],
                    "text": ""
                }
            },
            "eventInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasEvent",
                    "resolved": "undefined | { booking_id: string; organizer: { email: string; name: string; is_organizer?: boolean | undefined; }; title: string; description: string; status: string; }",
                    "references": {
                        "NylasEvent": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::NylasEvent"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The event info."
                        }],
                    "text": ""
                }
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The loading state."
                        }],
                    "text": ""
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "cancellationReason": {},
            "cancellationError": {},
            "cancellationPolicy": {}
        };
    }
    static get events() {
        return [{
                "method": "goBackButtonClicked",
                "name": "goBackButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the Go back button is clicked on the cancel booking form."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "cancelBookingFormSubmitted",
                "name": "cancelBookingFormSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the cancel booking form is submitted."
                },
                "complexType": {
                    "original": "{\n    bookingId: string;\n    action: 'reject' | 'cancel';\n    reason: string;\n    errorHandler?: (error: NylasSchedulerErrorResponse) => void;\n  }",
                    "resolved": "{ bookingId: string; action: \"cancel\" | \"reject\"; reason: string; errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "triggerValidation",
                "name": "triggerValidation",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is only for triggering the validation on the text area for cancellation reason. This is for internal purposes only."
                },
                "complexType": {
                    "original": "{}",
                    "resolved": "{}",
                    "references": {}
                }
            }, {
                "method": "cancelBookedEventError",
                "name": "cancelBookedEventError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while cancelling the booking."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelBookingFormError",
                "name": "cancelBookingFormError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs in the booking form."
                },
                "complexType": {
                    "original": "Partial<Notification>",
                    "resolved": "{ id?: string | undefined; type?: NotificationType | undefined; title?: string | undefined; code?: number | undefined; category?: string | undefined; description?: string | undefined; ttl?: number | \"none\" | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "Notification": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Notification"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "configSettings",
                "methodName": "configSettingsChangedHandler"
            }, {
                "propName": "themeConfig",
                "methodName": "themeConfigChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "handleNylasFormInputChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-cancel-booking-form',
        stateToProps: new Map([
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.eventInfo', 'eventInfo'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.cancelBookingId', 'cancelBookingId'],
            ['scheduler.rejectBookingId', 'rejectBookingId'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            cancelBookingFormSubmitted: async (event, nylasSchedulerConnector) => {
                const { action, errorHandler } = event.detail;
                if (action === 'cancel') {
                    const result = await nylasSchedulerConnector.scheduler.cancelBooking(event.detail.bookingId, event.detail.reason);
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
                else if (action === 'reject') {
                    const result = await nylasSchedulerConnector.scheduler.updateBooking({
                        bookingId: event.detail.bookingId,
                        status: 'cancelled',
                        reason: event.detail.reason,
                    });
                    if (errorHandler && (!result || 'error' in result)) {
                        errorHandler(result);
                    }
                }
            },
            goBackButtonClicked: async (event, nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'goBackButtonClicked', event.detail);
                nylasSchedulerConnector.scheduler.goBack();
            },
            cancelBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookedEventError', event.detail);
            },
            cancelBookingFormError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-cancel-booking-form', 'cancelBookingFormError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancelBookingForm.prototype, "render", null);
//# sourceMappingURL=nylas-cancel-booking-form.js.map
