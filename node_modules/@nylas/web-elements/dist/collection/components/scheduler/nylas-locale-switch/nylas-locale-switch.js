var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { Host, h } from "@stencil/core";
import { LANGUAGE_MAP, TIMEZONE_MAP } from "../../../common/constants";
import { RegisterComponent } from "../../../common/register-component";
import { debug, getTimezoneOffset } from "../../../utils/utils";
export class NylasLocaleSwitch {
    constructor() {
        this.themeConfig = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = this.bookingInfo?.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = this.bookingInfo?.language || navigator.language;
    }
    themeConfigChanged(newThemeConfig) {
        this.applyThemeConfig(newThemeConfig);
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue?.timezone) {
            this.changeTimezone(newValue.timezone);
        }
        if (newValue && newValue?.language) {
            this.changeLanguage(newValue.language);
        }
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    componentDidLoad() {
        debug(`[nylas-locale-switch] Component did load`);
        this.applyThemeConfig(this.themeConfig);
        if (this.bookingInfo && this.bookingInfo?.timezone) {
            this.changeTimezone(this.bookingInfo.timezone);
        }
        if (this.bookingInfo && this.bookingInfo?.language) {
            this.changeLanguage(this.bookingInfo.language);
        }
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    changeTimezone(timezone) {
        this.selectedTimezone = timezone;
        this.timezoneChanged.emit(timezone);
    }
    changeLanguage(language) {
        this.selectedLanguage = language;
        this.languageChanged.emit(language);
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.changeTimezone(value);
        }
        else if (name === 'language') {
            this.changeLanguage(value);
        }
    }
    getTimezoneLabelHTML(timezone) {
        const offset = getTimezoneOffset(timezone);
        return (h("span", { class: "timezone-label", style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                width: '-webkit-fill-available',
            } }, TIMEZONE_MAP[timezone], ' ', h("span", { class: "timezone-offset", style: {
                fontSize: '14px',
                fontWeight: '400',
                color: 'var(--nylas-base-500)',
            } }, offset)));
    }
    render() {
        const timezoneOptions = Object.keys(TIMEZONE_MAP).map(key => ({
            labelHTML: this.getTimezoneLabelHTML(key),
            label: TIMEZONE_MAP[key],
            value: key,
        }));
        const languageOptions = Object.keys(LANGUAGE_MAP).map(key => ({
            label: LANGUAGE_MAP[key],
            value: key,
        }));
        return (h(Host, { key: '00af320c95ef648f69c9ebde6d741df848190059' }, h("div", { key: '56998ac07ecebb57f763852ea1c46b11328d4d15', class: "nylas-locale-switch", part: "nls" }, h("div", { key: 'ba294660f0716060787c9034010ad26b133338f5', class: {
                'select-wrapper': true,
                'timezone': true,
            }, part: "nls__timezone" }, h("select-dropdown", { key: 'e3d1a121cb6230c32ad2e4cf9aeffa4395bd635c', name: "timezone", options: timezoneOptions, defaultSelectedOption: timezoneOptions.find(op => op.value == this.selectedTimezone), exportparts: "sd_dropdown: nls__timezone-dropdown, sd_dropdown-button: nls__timezone-drop-button, sd_dropdown-button-selected-label: nls__timezone-drop-button-selected-label, sd_dropdown-content: nls__timezone-drop-content, sd_dropdown_label: nls__timezone-drop-label" }, h("span", { key: 'cc7bb4f138747aab7c5cf673c1b7b3ed09fb9de5', slot: "select-icon" }, h("globe-icon", { key: '717894778dc82c415eab8f764c2c18afc3636ee3', width: "20", height: "20" })))), h("div", { key: 'd0a64b3910138c1764e17e2be841dbd3fb746f3d', class: {
                'select-wrapper': true,
                'language': true,
            }, part: "nls__language" }, h("select-dropdown", { key: '86b417f7b62a0e6c74383e3315e1c6dfdfa09868', name: "language", options: languageOptions, defaultSelectedOption: languageOptions.find(lang => lang.value == this.selectedLanguage), exportparts: "sd_dropdown: nls__language-dropdown, sd_dropdown-button: nls__language-drop-button, sd_dropdown-content: nls__language-drop-content, sd_dropdown_label: nls__language-drop-label" }, h("span", { key: '0f1c14fae74a2543fcc57358c507d1288b02ba9c', slot: "select-icon" }, h("translate-icon", { key: 'f5a373fff866cf48f39e5bb3b2aa0f6567044433', width: "20", height: "20" })))))));
    }
    static get is() { return "nylas-locale-switch"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-locale-switch.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-locale-switch.css"]
        };
    }
    static get properties() {
        return {
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            },
            "bookingInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasSchedulerBookingData",
                    "resolved": "undefined | { primaryParticipant: NylasSchedulerBookingParticipant; startTime?: Date | undefined; endTime?: Date | undefined; timezone?: string | undefined; language?: string | undefined; guests?: NylasSchedulerBookingParticipant[] | undefined; additionalFields?: Record<string, { value: string; type: string; }> | undefined; }",
                    "references": {
                        "NylasSchedulerBookingData": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::NylasSchedulerBookingData"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The booking info."
                        }],
                    "text": ""
                }
            },
            "selectedTimezone": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timezone."
                },
                "attribute": "selected-timezone",
                "reflect": false,
                "defaultValue": "this.bookingInfo?.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone"
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false,
                "defaultValue": "this.bookingInfo?.language || navigator.language"
            }
        };
    }
    static get events() {
        return [{
                "method": "timezoneChanged",
                "name": "timezoneChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the timezone is changed."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "languageChanged",
                "name": "languageChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the language is changed."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "themeConfig",
                "methodName": "themeConfigChanged"
            }, {
                "propName": "bookingInfo",
                "methodName": "bookingInfoChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-locale-switch',
        stateToProps: new Map([
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.themeConfig', 'themeConfig'],
        ]),
        eventToProps: {
            timezoneChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'timezoneChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectTimezone(event.detail);
            },
            languageChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'languageChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectLanguage(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLocaleSwitch.prototype, "render", null);
//# sourceMappingURL=nylas-locale-switch.js.map
