var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { debug } from "../../../utils/utils";
import i18next from "../../../utils/i18n";
export class NylasFeedbackForm {
    constructor() {
        this.handleConfirmBookingButtonClicked = () => {
            const validationEvent = this.triggerValidation.emit();
            if (validationEvent.defaultPrevented) {
                return;
            }
            this.feedbackSubmitted.emit({ feedback: this.feedbackMessage });
        };
        this.themeConfig = undefined;
        this.feedbackMessage = '';
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-feedback-form] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-feedback-form] Component did load`);
        this.applyThemeConfig(this.themeConfig);
    }
    applyThemeConfig(themeConfig) {
        if (themeConfig) {
            for (const [key, value] of Object.entries(themeConfig)) {
                this.host.style.setProperty(`${key}`, value);
            }
        }
    }
    handleFormInputChanged(event) {
        debug(`[nylas-feedback-form] Form input changed`);
        if (!event.detail.value) {
            return;
        }
        this.triggerValidation.emit();
        if (event.detail.name === 'feedback') {
            this.feedbackMessage = event.detail.value;
        }
    }
    closeModal(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        this.feedbackModalClosed.emit();
    }
    render() {
        return (h(Host, { key: 'd9e46e03000d836deb146a105ad5af7314fc93d3', part: "nfbf" }, h("div", { key: '6924101eb302c203949378720eea5a6c0ecb34a3', class: "card-wrapper", part: "nfbfc__card" }, h("div", { key: '29ad795443767409c2d9812f55b20678d79188ba', class: "close-button" }, h("button-component", { key: '6a2c2454351b7d1fdff44e03e5557da13eb75ade', tooltip: "Close", id: "close", variant: 'invisible', onClick: e => this.closeModal(e), part: "nfbf__close-button" }, h("close-icon", { key: 'cad67f709930a3d4f439de83f15d2cc4bf48ded5' }))), h("div", { key: '4060b186ead7f5dceb82275ca7c5f3daae6603e8', class: "header" }, h("h2", { key: 'dc5d83a6e9d0c8898011d2f490940bc7e9bcce8b', slot: "card-title", part: "nfbf__title" }, i18next.t('feedbackFormTitle'))), h("div", { key: '8f5519ff02c341fe26613e640b76556b6edcd4ac', class: "description title-desc" }, h("p", { key: '2bd0aa700560b3381ab3902be2da9bb6765ca1bb' }, i18next.t('feedbackFormDescription'))), h("textarea-component", { key: '959082460c4ed316ba7d74e8ce2a95225b53deb4', label: i18next.t('feedbackMessageLabel'), required: true, maxLength: 500, part: "nfbf__description", name: "feedback", placeholder: i18next.t('feedbackMessagePlaceholder') }), h("div", { key: 'b0b085c8d8c7d5855ade8a9e91ed172e710f5b7d', class: 'description footer-desc' }, h("p", { key: 'd64ed3e021f0590ee0d792f8d37fcf860332d50d' }, "By sending this report, you agree to Nylas\u2019 access to the data necessary to respond to this issue, subject to Nylas\u2019", ' ', h("a", { key: '7dc7c199ee9f4abd84274cd5bfca904f6aa8d19c', href: "https://www.nylas.com/privacy-policy/", target: "_blank", rel: "nofollow noreferrer noopener" }, "Privacy Policy"), ".")), h("div", { key: 'aa907c4c9462c5218b279b0cb6495aa7177a68aa', class: {
                footer: true,
            } }, h("button-component", { key: '049883425d2a7657b84dfd9cf1829b61771c23bc', variant: 'invisible', onClick: e => this.closeModal(e), part: "nfbf__button-outline nfbf__cancel-cta" }, `${i18next.t('feedbackModalCloseButton')}`), h("button-component", { key: '5a97be9f193e984237835f1707af9ce541a4f063', variant: 'primary', onClick: this.handleConfirmBookingButtonClicked, part: "nfbf__button-outline nfbf__reschedule-cta" }, `${i18next.t('feedbackModalSubmitButton')}`)))));
    }
    static get is() { return "nylas-feedback-form"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-feedback-form.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-feedback-form.css"]
        };
    }
    static get properties() {
        return {
            "themeConfig": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "standalone",
                            "text": "The theme configuration."
                        }],
                    "text": ""
                },
                "attribute": "theme-config",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "feedbackMessage": {}
        };
    }
    static get events() {
        return [{
                "method": "feedbackModalClosed",
                "name": "feedbackModalClosed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Feedback modal close event."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "feedbackSubmitted",
                "name": "feedbackSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Feedback submitted event."
                },
                "complexType": {
                    "original": "{ feedback: string }",
                    "resolved": "{ feedback: string; }",
                    "references": {}
                }
            }, {
                "method": "triggerValidation",
                "name": "triggerValidation",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This is an internal event that is used to trigger validation on the form."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "handleFormInputChanged",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-feedback-form',
        stateToProps: new Map([]),
        eventToProps: {
            feedbackSubmitted: async (_event, _nylasSchedulerConnector) => {
            },
        },
        localPropsToProp: new Map([['themeConfig', 'themeConfig']]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasFeedbackForm.prototype, "render", null);
//# sourceMappingURL=nylas-feedback-form.js.map
