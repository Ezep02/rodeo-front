const b = {
  allRenderFn: !1,
  cmpDidLoad: !0,
  cmpDidUnload: !1,
  cmpDidUpdate: !0,
  cmpDidRender: !0,
  cmpWillLoad: !0,
  cmpWillUpdate: !0,
  cmpWillRender: !0,
  connectedCallback: !0,
  disconnectedCallback: !0,
  element: !0,
  event: !0,
  hasRenderFn: !0,
  lifecycle: !0,
  hostListener: !0,
  hostListenerTargetWindow: !0,
  hostListenerTargetDocument: !0,
  hostListenerTargetBody: !0,
  hostListenerTargetParent: !1,
  hostListenerTarget: !0,
  member: !0,
  method: !0,
  mode: !0,
  observeAttribute: !0,
  prop: !0,
  propMutable: !0,
  reflect: !0,
  scoped: !0,
  shadowDom: !0,
  slot: !0,
  cssAnnotations: !0,
  state: !0,
  style: !0,
  formAssociated: !1,
  svg: !0,
  updatable: !0,
  vdomAttribute: !0,
  vdomXlink: !0,
  vdomClass: !0,
  vdomFunctional: !0,
  vdomKey: !0,
  vdomListener: !0,
  vdomRef: !0,
  vdomPropOrAttr: !0,
  vdomRender: !0,
  vdomStyle: !0,
  vdomText: !0,
  watchCallback: !0,
  taskQueue: !0,
  hotModuleReplacement: !1,
  isDebug: !1,
  isDev: !1,
  isTesting: !1,
  hydrateServerSide: !1,
  hydrateClientSide: !1,
  lifecycleDOMEvents: !1,
  lazyLoad: !1,
  profile: !1,
  slotRelocation: !0,
  // TODO(STENCIL-914): remove this option when `experimentalSlotFixes` is the default behavior
  appendChildSlotFix: !1,
  // TODO(STENCIL-914): remove this option when `experimentalSlotFixes` is the default behavior
  cloneNodeFix: !1,
  hydratedAttribute: !1,
  hydratedClass: !0,
  scriptDataOpts: !1,
  // TODO(STENCIL-914): remove this option when `experimentalSlotFixes` is the default behavior
  scopedSlotTextContentFix: !1,
  // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field
  shadowDomShim: !1,
  // TODO(STENCIL-914): remove this option when `experimentalSlotFixes` is the default behavior
  slotChildNodesFix: !1,
  invisiblePrehydration: !0,
  propBoolean: !0,
  propNumber: !0,
  propString: !0,
  constructableCSS: !0,
  cmpShouldUpdate: !0,
  devTools: !1,
  shadowDelegatesFocus: !0,
  initializeNextTick: !1,
  asyncLoading: !1,
  asyncQueue: !1,
  transformTagName: !1,
  attachStyles: !0,
  // TODO(STENCIL-914): remove this option when `experimentalSlotFixes` is the default behavior
  experimentalSlotFixes: !1
};
let L, H, A, ot = !1, F = !1, W = !1, v = !1, q = null, M = !1;
const x = (t, e = "") => () => {
}, mt = "slot-fb{display:contents}slot-fb[hidden]{display:none}", Q = "http://www.w3.org/1999/xlink", X = {}, kt = "http://www.w3.org/2000/svg", bt = "http://www.w3.org/1999/xhtml", Tt = (t) => t != null, z = (t) => (t = typeof t, t === "object" || t === "function");
function xt(t) {
  var e, n, s;
  return (s = (n = (e = t.head) === null || e === void 0 ? void 0 : e.querySelector('meta[name="csp-nonce"]')) === null || n === void 0 ? void 0 : n.getAttribute("content")) !== null && s !== void 0 ? s : void 0;
}
const U = (t, e, ...n) => {
  let s = null, l = null, c = null, o = !1, r = !1;
  const i = [], u = ($) => {
    for (let d = 0; d < $.length; d++)
      s = $[d], Array.isArray(s) ? u(s) : s != null && typeof s != "boolean" && ((o = typeof t != "function" && !z(s)) && (s = String(s)), o && r ? i[i.length - 1].$text$ += s : i.push(o ? j(null, s) : s), r = o);
  };
  if (u(n), e) {
    e.key && (l = e.key), e.name && (c = e.name);
    {
      const $ = e.className || e.class;
      $ && (e.class = typeof $ != "object" ? $ : Object.keys($).filter((d) => $[d]).join(" "));
    }
  }
  if (typeof t == "function")
    return t(e === null ? {} : e, i, _t);
  const f = j(t, null);
  return f.$attrs$ = e, i.length > 0 && (f.$children$ = i), f.$key$ = l, f.$name$ = c, f;
}, j = (t, e) => {
  const n = {
    $flags$: 0,
    $tag$: t,
    $text$: e,
    $elm$: null,
    $children$: null
  };
  return n.$attrs$ = null, n.$key$ = null, n.$name$ = null, n;
}, Lt = {}, Et = (t) => t && t.$tag$ === Lt, _t = {
  forEach: (t, e) => t.map(G).forEach(e),
  map: (t, e) => t.map(G).map(e).map(At)
}, G = (t) => ({
  vattrs: t.$attrs$,
  vchildren: t.$children$,
  vkey: t.$key$,
  vname: t.$name$,
  vtag: t.$tag$,
  vtext: t.$text$
}), At = (t) => {
  if (typeof t.vtag == "function") {
    const n = Object.assign({}, t.vattrs);
    return t.vkey && (n.key = t.vkey), t.vname && (n.name = t.vname), U(t.vtag, n, ...t.vchildren || []);
  }
  const e = j(t.vtag, t.vtext);
  return e.$attrs$ = t.vattrs, e.$children$ = t.vchildren, e.$key$ = t.vkey, e.$name$ = t.vname, e;
}, Rt = (t) => se.map((e) => e(t)).find((e) => !!e), Ot = (t, e) => t != null && !z(t) ? e & 4 ? t === "false" ? !1 : t === "" || !!t : e & 2 ? parseFloat(t) : e & 1 ? String(t) : t : t, K = /* @__PURE__ */ new WeakMap(), Ct = (t, e, n) => {
  let s = B.get(t);
  ie && n ? (s = s || new CSSStyleSheet(), typeof s == "string" ? s = e : s.replaceSync(e)) : s = e, B.set(t, s);
}, wt = (t, e, n) => {
  var s;
  const l = it(e, n), c = B.get(l);
  if (t = t.nodeType === 11 ? t : S, c)
    if (typeof c == "string") {
      t = t.head || t;
      let o = K.get(t), r;
      if (o || K.set(t, o = /* @__PURE__ */ new Set()), !o.has(l)) {
        {
          r = S.createElement("style"), r.innerHTML = c;
          const i = (s = p.$nonce$) !== null && s !== void 0 ? s : xt(S);
          i != null && r.setAttribute("nonce", i), t.insertBefore(r, t.querySelector("link"));
        }
        e.$flags$ & 4 && (r.innerHTML += mt), o && o.add(l);
      }
    } else t.adoptedStyleSheets.includes(c) || (t.adoptedStyleSheets = [...t.adoptedStyleSheets, c]);
  return l;
}, Ft = (t) => {
  const e = t.$cmpMeta$, n = t.$hostElement$, s = e.$flags$, l = x("attachStyles", e.$tagName$), c = wt(n.shadowRoot ? n.shadowRoot : n.getRootNode(), e, t.$modeName$);
  s & 10 && (n["s-sc"] = c, n.classList.add(c + "-h"), s & 2 && n.classList.add(c + "-s")), l();
}, it = (t, e) => "sc-" + (e && t.$flags$ & 32 ? t.$tagName$ + "-" + e : t.$tagName$), J = (t, e, n, s, l, c) => {
  if (n !== s) {
    let o = et(t, e), r = e.toLowerCase();
    if (e === "class") {
      const i = t.classList, u = Y(n), f = Y(s);
      i.remove(...u.filter(($) => $ && !f.includes($))), i.add(...f.filter(($) => $ && !u.includes($)));
    } else if (e === "style") {
      for (const i in n)
        (!s || s[i] == null) && (i.includes("-") ? t.style.removeProperty(i) : t.style[i] = "");
      for (const i in s)
        (!n || s[i] !== n[i]) && (i.includes("-") ? t.style.setProperty(i, s[i]) : t.style[i] = s[i]);
    } else if (e !== "key")
      if (e === "ref")
        s && s(t);
      else if (!t.__lookupSetter__(e) && e[0] === "o" && e[1] === "n") {
        if (e[2] === "-" ? e = e.slice(3) : et(D, r) ? e = r.slice(2) : e = r[2] + e.slice(3), n || s) {
          const i = e.endsWith(ct);
          e = e.replace(jt, ""), n && p.rel(t, e, n, i), s && p.ael(t, e, s, i);
        }
      } else {
        const i = z(s);
        if ((o || i && s !== null) && !l)
          try {
            if (t.tagName.includes("-"))
              t[e] = s;
            else {
              const f = s ?? "";
              e === "list" ? o = !1 : (n == null || t[e] != f) && (t[e] = f);
            }
          } catch {
          }
        let u = !1;
        r !== (r = r.replace(/^xlink\:?/, "")) && (e = r, u = !0), s == null || s === !1 ? (s !== !1 || t.getAttribute(e) === "") && (u ? t.removeAttributeNS(Q, e) : t.removeAttribute(e)) : (!o || c & 4 || l) && !i && (s = s === !0 ? "" : s, u ? t.setAttributeNS(Q, e, s) : t.setAttribute(e, s));
      }
  }
}, Ut = /\s/, Y = (t) => t ? t.split(Ut) : [], ct = "Capture", jt = new RegExp(ct + "$"), rt = (t, e, n, s) => {
  const l = e.$elm$.nodeType === 11 && e.$elm$.host ? e.$elm$.host : e.$elm$, c = t && t.$attrs$ || X, o = e.$attrs$ || X;
  for (s in c)
    s in o || J(l, s, c[s], void 0, n, e.$flags$);
  for (s in o)
    J(l, s, c[s], o[s], n, e.$flags$);
}, P = (t, e, n, s) => {
  const l = e.$children$[n];
  let c = 0, o, r, i;
  if (ot || (W = !0, l.$tag$ === "slot" && (L && s.classList.add(L + "-s"), l.$flags$ |= l.$children$ ? (
    // slot element has fallback content
    2
  ) : (
    // slot element does not have fallback content
    1
  ))), l.$text$ !== null)
    o = l.$elm$ = S.createTextNode(l.$text$);
  else if (l.$flags$ & 1)
    o = l.$elm$ = S.createTextNode("");
  else {
    if (v || (v = l.$tag$ === "svg"), o = l.$elm$ = S.createElementNS(v ? kt : bt, l.$flags$ & 2 ? "slot-fb" : l.$tag$), v && l.$tag$ === "foreignObject" && (v = !1), rt(null, l, v), Tt(L) && o["s-si"] !== L && o.classList.add(o["s-si"] = L), l.$children$)
      for (c = 0; c < l.$children$.length; ++c)
        r = P(t, l, c, o), r && o.appendChild(r);
    l.$tag$ === "svg" ? v = !1 : o.tagName === "foreignObject" && (v = !0);
  }
  return o["s-hn"] = A, l.$flags$ & 3 && (o["s-sr"] = !0, o["s-cr"] = H, o["s-sn"] = l.$name$ || "", i = t && t.$children$ && t.$children$[n], i && i.$tag$ === l.$tag$ && t.$elm$ && R(t.$elm$, !1)), o;
}, R = (t, e) => {
  p.$flags$ |= 1;
  const n = t.childNodes;
  for (let s = n.length - 1; s >= 0; s--) {
    const l = n[s];
    l["s-hn"] !== A && l["s-ol"] && (ft(l).insertBefore(l, I(l)), l["s-ol"].remove(), l["s-ol"] = void 0, l["s-sh"] = void 0, W = !0), e && R(l, e);
  }
  p.$flags$ &= -2;
}, $t = (t, e, n, s, l, c) => {
  let o = t["s-cr"] && t["s-cr"].parentNode || t, r;
  for (o.shadowRoot && o.tagName === A && (o = o.shadowRoot); l <= c; ++l)
    s[l] && (r = P(null, n, l, t), r && (s[l].$elm$ = r, o.insertBefore(r, I(e))));
}, at = (t, e, n) => {
  for (let s = e; s <= n; ++s) {
    const l = t[s];
    if (l) {
      const c = l.$elm$;
      ht(l), c && (F = !0, c["s-ol"] ? c["s-ol"].remove() : R(c, !0), c.remove());
    }
  }
}, Pt = (t, e, n, s, l = !1) => {
  let c = 0, o = 0, r = 0, i = 0, u = e.length - 1, f = e[0], $ = e[u], d = s.length - 1, a = s[0], h = s[d], y, g;
  for (; c <= u && o <= d; )
    if (f == null)
      f = e[++c];
    else if ($ == null)
      $ = e[--u];
    else if (a == null)
      a = s[++o];
    else if (h == null)
      h = s[--d];
    else if (w(f, a, l))
      E(f, a, l), f = e[++c], a = s[++o];
    else if (w($, h, l))
      E($, h, l), $ = e[--u], h = s[--d];
    else if (w(f, h, l))
      (f.$tag$ === "slot" || h.$tag$ === "slot") && R(f.$elm$.parentNode, !1), E(f, h, l), t.insertBefore(f.$elm$, $.$elm$.nextSibling), f = e[++c], h = s[--d];
    else if (w($, a, l))
      (f.$tag$ === "slot" || h.$tag$ === "slot") && R($.$elm$.parentNode, !1), E($, a, l), t.insertBefore($.$elm$, f.$elm$), $ = e[--u], a = s[++o];
    else {
      for (r = -1, i = c; i <= u; ++i)
        if (e[i] && e[i].$key$ !== null && e[i].$key$ === a.$key$) {
          r = i;
          break;
        }
      r >= 0 ? (g = e[r], g.$tag$ !== a.$tag$ ? y = P(e && e[o], n, r, t) : (E(g, a, l), e[r] = void 0, y = g.$elm$), a = s[++o]) : (y = P(e && e[o], n, o, t), a = s[++o]), y && ft(f.$elm$).insertBefore(y, I(f.$elm$));
    }
  c > u ? $t(t, s[d + 1] == null ? null : s[d + 1].$elm$, n, s, o, d) : o > d && at(e, c, u);
}, w = (t, e, n = !1) => t.$tag$ === e.$tag$ ? t.$tag$ === "slot" ? t.$name$ === e.$name$ : n ? !0 : t.$key$ === e.$key$ : !1, I = (t) => t && t["s-ol"] || t, ft = (t) => (t["s-ol"] ? t["s-ol"] : t).parentNode, E = (t, e, n = !1) => {
  const s = e.$elm$ = t.$elm$, l = t.$children$, c = e.$children$, o = e.$tag$, r = e.$text$;
  let i;
  r === null ? (v = o === "svg" ? !0 : o === "foreignObject" ? !1 : v, o === "slot" || rt(t, e, v), l !== null && c !== null ? Pt(s, l, e, c, n) : c !== null ? (t.$text$ !== null && (s.textContent = ""), $t(s, null, e, c, 0, c.length - 1)) : l !== null && at(l, 0, l.length - 1), v && o === "svg" && (v = !1)) : (i = s["s-cr"]) ? i.parentNode.textContent = r : t.$text$ !== r && (s.data = r);
}, dt = (t) => {
  const e = t.childNodes;
  for (const n of e)
    if (n.nodeType === 1) {
      if (n["s-sr"]) {
        const s = n["s-sn"];
        n.hidden = !1;
        for (const l of e)
          if (l !== n) {
            if (l["s-hn"] !== n["s-hn"] || s !== "") {
              if (l.nodeType === 1 && (s === l.getAttribute("slot") || s === l["s-sn"])) {
                n.hidden = !0;
                break;
              }
            } else if (l.nodeType === 1 || l.nodeType === 3 && l.textContent.trim() !== "") {
              n.hidden = !0;
              break;
            }
          }
      }
      dt(n);
    }
}, m = [], ut = (t) => {
  let e, n, s;
  for (const l of t.childNodes) {
    if (l["s-sr"] && (e = l["s-cr"]) && e.parentNode) {
      n = e.parentNode.childNodes;
      const c = l["s-sn"];
      for (s = n.length - 1; s >= 0; s--)
        if (e = n[s], !e["s-cn"] && !e["s-nr"] && e["s-hn"] !== l["s-hn"] && !b.experimentalSlotFixes)
          if (Z(e, c)) {
            let o = m.find((r) => r.$nodeToRelocate$ === e);
            F = !0, e["s-sn"] = e["s-sn"] || c, o ? (o.$nodeToRelocate$["s-sh"] = l["s-hn"], o.$slotRefNode$ = l) : (e["s-sh"] = l["s-hn"], m.push({
              $slotRefNode$: l,
              $nodeToRelocate$: e
            })), e["s-sr"] && m.map((r) => {
              Z(r.$nodeToRelocate$, e["s-sn"]) && (o = m.find((i) => i.$nodeToRelocate$ === e), o && !r.$slotRefNode$ && (r.$slotRefNode$ = o.$slotRefNode$));
            });
          } else m.some((o) => o.$nodeToRelocate$ === e) || m.push({
            $nodeToRelocate$: e
          });
    }
    l.nodeType === 1 && ut(l);
  }
}, Z = (t, e) => t.nodeType === 1 ? t.getAttribute("slot") === null && e === "" || t.getAttribute("slot") === e : t["s-sn"] === e ? !0 : e === "", ht = (t) => {
  t.$attrs$ && t.$attrs$.ref && t.$attrs$.ref(null), t.$children$ && t.$children$.map(ht);
}, Bt = (t, e, n = !1) => {
  var s, l, c, o, r;
  const i = t.$hostElement$, u = t.$cmpMeta$, f = t.$vnode$ || j(null, null), $ = Et(e) ? e : U(null, null, e);
  if (A = i.tagName, u.$attrsToReflect$ && ($.$attrs$ = $.$attrs$ || {}, u.$attrsToReflect$.map(([d, a]) => $.$attrs$[a] = i[d])), n && $.$attrs$)
    for (const d of Object.keys($.$attrs$))
      i.hasAttribute(d) && !["key", "ref", "style", "class"].includes(d) && ($.$attrs$[d] = i[d]);
  $.$tag$ = null, $.$flags$ |= 4, t.$vnode$ = $, $.$elm$ = f.$elm$ = i.shadowRoot || i, L = i["s-sc"], H = i["s-cr"], ot = (u.$flags$ & 1) !== 0, F = !1, E(f, $, n);
  {
    if (p.$flags$ |= 1, W) {
      ut($.$elm$);
      for (const d of m) {
        const a = d.$nodeToRelocate$;
        if (!a["s-ol"]) {
          const h = S.createTextNode("");
          h["s-nr"] = a, a.parentNode.insertBefore(a["s-ol"] = h, a);
        }
      }
      for (const d of m) {
        const a = d.$nodeToRelocate$, h = d.$slotRefNode$;
        if (h) {
          const y = h.parentNode;
          let g = h.nextSibling;
          {
            let T = (s = a["s-ol"]) === null || s === void 0 ? void 0 : s.previousSibling;
            for (; T; ) {
              let k = (l = T["s-nr"]) !== null && l !== void 0 ? l : null;
              if (k && k["s-sn"] === a["s-sn"] && y === k.parentNode && (k = k.nextSibling, !k || !k["s-nr"])) {
                g = k;
                break;
              }
              T = T.previousSibling;
            }
          }
          (!g && y !== a.parentNode || a.nextSibling !== g) && a !== g && (!a["s-hn"] && a["s-ol"] && (a["s-hn"] = a["s-ol"].parentNode.nodeName), y.insertBefore(a, g), a.nodeType === 1 && (a.hidden = (c = a["s-ih"]) !== null && c !== void 0 ? c : !1));
        } else
          a.nodeType === 1 && (n && (a["s-ih"] = (o = a.hidden) !== null && o !== void 0 ? o : !1), a.hidden = !0);
      }
    }
    F && dt($.$elm$), p.$flags$ &= -2, m.length = 0;
  }
  if (b.experimentalScopedSlotChanges && u.$flags$ & 2)
    for (const d of $.$elm$.childNodes)
      d["s-hn"] !== A && !d["s-sh"] && (n && d["s-ih"] == null && (d["s-ih"] = (r = d.hidden) !== null && r !== void 0 ? r : !1), d.hidden = !0);
  H = void 0;
}, Dt = (t, e) => {
}, pt = (t, e) => (t.$flags$ |= 16, Dt(t, t.$ancestorComponent$), $e(() => Ht(t, e))), Ht = (t, e) => {
  const n = t.$hostElement$, s = x("scheduleUpdate", t.$cmpMeta$.$tagName$), l = n;
  let c;
  return e ? c = _(l, "componentWillLoad") : c = _(l, "componentWillUpdate"), c = V(c, () => _(l, "componentWillRender")), s(), V(c, () => Nt(t, l, e));
}, V = (t, e) => Mt(t) ? t.then(e) : e(), Mt = (t) => t instanceof Promise || t && t.then && typeof t.then == "function", Nt = async (t, e, n) => {
  const s = t.$hostElement$, l = x("update", t.$cmpMeta$.$tagName$);
  s["s-rc"], n && Ft(t);
  const c = x("render", t.$cmpMeta$.$tagName$);
  Wt(t, e, s, n), c(), l(), zt(t);
}, Wt = (t, e, n, s) => {
  try {
    q = e, e = e.render && e.render(), t.$flags$ &= -17, t.$flags$ |= 2, (b.hasRenderFn || b.reflect) && (b.vdomRender || b.reflect) && (b.hydrateServerSide || Bt(t, e, s));
  } catch (i) {
    C(i, t.$hostElement$);
  }
  return q = null, null;
}, zt = (t) => {
  const e = t.$cmpMeta$.$tagName$, n = t.$hostElement$, s = x("postUpdate", e), l = n;
  t.$ancestorComponent$, _(l, "componentDidRender"), t.$flags$ & 64 ? (_(l, "componentDidUpdate"), s()) : (t.$flags$ |= 64, _(l, "componentDidLoad"), s());
}, _ = (t, e, n) => {
  if (t && t[e])
    try {
      return t[e](n);
    } catch (s) {
      C(s);
    }
}, It = (t, e) => O(t).$instanceValues$.get(e), qt = (t, e, n, s) => {
  const l = O(t), c = t, o = l.$instanceValues$.get(e), r = l.$flags$, i = c;
  n = Ot(n, s.$members$[e][0]);
  const u = Number.isNaN(o) && Number.isNaN(n);
  if (n !== o && !u) {
    l.$instanceValues$.set(e, n);
    {
      if (s.$watchers$ && r & 128) {
        const $ = s.$watchers$[e];
        $ && $.map((d) => {
          try {
            i[d](n, o, e);
          } catch (a) {
            C(a, c);
          }
        });
      }
      if ((r & 18) === 2) {
        if (i.componentShouldUpdate && i.componentShouldUpdate(n, o, e) === !1)
          return;
        pt(l, !1);
      }
    }
  }
}, Qt = (t, e, n) => {
  var s;
  const l = t.prototype;
  if (e.$members$) {
    t.watchers && (e.$watchers$ = t.watchers);
    const c = Object.entries(e.$members$);
    c.map(([o, [r]]) => {
      (r & 31 || r & 32) && Object.defineProperty(l, o, {
        get() {
          return It(this, o);
        },
        set(i) {
          qt(this, o, i, e);
        },
        configurable: !0,
        enumerable: !0
      });
    });
    {
      const o = /* @__PURE__ */ new Map();
      l.attributeChangedCallback = function(r, i, u) {
        p.jmp(() => {
          var f;
          const $ = o.get(r);
          if (this.hasOwnProperty($))
            u = this[$], delete this[$];
          else {
            if (l.hasOwnProperty($) && typeof this[$] == "number" && this[$] == u)
              return;
            if ($ == null) {
              const d = O(this), a = d == null ? void 0 : d.$flags$;
              if (a && !(a & 8) && a & 128 && u !== i) {
                const y = this, g = (f = e.$watchers$) === null || f === void 0 ? void 0 : f[r];
                g == null || g.forEach((T) => {
                  y[T] != null && y[T].call(y, u, i, r);
                });
              }
              return;
            }
          }
          this[$] = u === null && typeof this[$] == "boolean" ? !1 : u;
        });
      }, t.observedAttributes = Array.from(/* @__PURE__ */ new Set([
        ...Object.keys((s = e.$watchers$) !== null && s !== void 0 ? s : {}),
        ...c.filter(
          ([r, i]) => i[0] & 15
          /* MEMBER_FLAGS.HasAttribute */
        ).map(([r, i]) => {
          var u;
          const f = i[1] || r;
          return o.set(f, r), i[0] & 512 && ((u = e.$attrsToReflect$) === null || u === void 0 || u.push([r, f])), f;
        })
      ]));
    }
  }
  return t;
}, Xt = async (t, e, n, s) => {
  let l;
  if (!(e.$flags$ & 32) && (e.$flags$ |= 32, l = t.constructor, customElements.whenDefined(n.$tagName$).then(() => e.$flags$ |= 128), l.style)) {
    let o = l.style;
    typeof o != "string" && (o = o[e.$modeName$ = Rt(t)]);
    const r = it(n, e.$modeName$);
    if (!B.has(r)) {
      const i = x("registerStyles", n.$tagName$);
      Ct(r, o, !!(n.$flags$ & 1)), i();
    }
  }
  e.$ancestorComponent$, pt(e, !0);
}, tt = (t) => {
}, Gt = (t) => {
  if (!(p.$flags$ & 1)) {
    const e = O(t), n = e.$cmpMeta$, s = x("connectedCallback", n.$tagName$);
    e.$flags$ & 1 ? (gt(t, e, n.$listeners$), e != null && e.$lazyInstance$ ? tt(e.$lazyInstance$) : e != null && e.$onReadyPromise$ && e.$onReadyPromise$.then(() => tt(e.$lazyInstance$))) : (e.$flags$ |= 1, // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field
    n.$flags$ & 12 && Kt(t), n.$members$ && Object.entries(n.$members$).map(([l, [c]]) => {
      if (c & 31 && t.hasOwnProperty(l)) {
        const o = t[l];
        delete t[l], t[l] = o;
      }
    }), Xt(t, e, n)), s();
  }
}, Kt = (t) => {
  const e = t["s-cr"] = S.createComment("");
  e["s-cn"] = !0, t.insertBefore(e, t.firstChild);
}, Jt = async (t) => {
  if (!(p.$flags$ & 1)) {
    const e = O(t);
    e.$rmListeners$ && (e.$rmListeners$.map((n) => n()), e.$rmListeners$ = void 0);
  }
}, Yt = (t, e) => {
  const n = {
    $flags$: e[0],
    $tagName$: e[1]
  };
  n.$members$ = e[2], n.$listeners$ = e[3], n.$watchers$ = t.$watchers$, n.$attrsToReflect$ = [], !st && n.$flags$ & 1 && (n.$flags$ |= 8);
  const s = t.prototype.connectedCallback, l = t.prototype.disconnectedCallback;
  return Object.assign(t.prototype, {
    __registerHost() {
      ee(this, n);
    },
    connectedCallback() {
      Gt(this), s && s.call(this);
    },
    disconnectedCallback() {
      Jt(this), l && l.call(this);
    },
    __attachShadow() {
      st ? this.attachShadow({
        mode: "open",
        delegatesFocus: !!(n.$flags$ & 16)
      }) : this.shadowRoot = this;
    }
  }), t.is = n.$tagName$, Qt(t, n);
}, gt = (t, e, n, s) => {
  n && n.map(([l, c, o]) => {
    const r = Vt(t, l), i = Zt(e, o), u = te(l);
    p.ael(r, c, i, u), (e.$rmListeners$ = e.$rmListeners$ || []).push(() => p.rel(r, c, i, u));
  });
}, Zt = (t, e) => (n) => {
  try {
    b.lazyLoad || t.$hostElement$[e](n);
  } catch (s) {
    C(s);
  }
}, Vt = (t, e) => e & 4 ? S : e & 8 ? D : e & 16 ? S.body : t, te = (t) => le ? {
  passive: (t & 1) !== 0,
  capture: (t & 2) !== 0
} : (t & 2) !== 0, yt = /* @__PURE__ */ new WeakMap(), O = (t) => yt.get(t), ee = (t, e) => {
  const n = {
    $flags$: 0,
    $hostElement$: t,
    $cmpMeta$: e,
    $instanceValues$: /* @__PURE__ */ new Map()
  };
  return gt(t, n, e.$listeners$), yt.set(t, n);
}, et = (t, e) => e in t, C = (t, e) => (0, console.error)(t, e), B = /* @__PURE__ */ new Map(), se = [], D = typeof window < "u" ? window : {}, S = D.document || { head: {} }, ne = D.HTMLElement || class {
}, p = {
  $flags$: 0,
  $resourcesUrl$: "",
  jmp: (t) => t(),
  raf: (t) => requestAnimationFrame(t),
  ael: (t, e, n, s) => t.addEventListener(e, n, s),
  rel: (t, e, n, s) => t.removeEventListener(e, n, s),
  ce: (t, e) => new CustomEvent(t, e)
}, st = (
  // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field
  !0
), le = /* @__PURE__ */ (() => {
  let t = !1;
  try {
    S.addEventListener("e", null, Object.defineProperty({}, "passive", {
      get() {
        t = !0;
      }
    }));
  } catch {
  }
  return t;
})(), oe = (t) => Promise.resolve(t), ie = /* @__PURE__ */ (() => {
  try {
    return new CSSStyleSheet(), typeof new CSSStyleSheet().replaceSync == "function";
  } catch {
  }
  return !1;
})(), nt = [], vt = [], ce = (t, e) => (n) => {
  t.push(n), M || (M = !0, e && p.$flags$ & 4 ? re(N) : p.raf(N));
}, lt = (t) => {
  for (let e = 0; e < t.length; e++)
    try {
      t[e](performance.now());
    } catch (n) {
      C(n);
    }
  t.length = 0;
}, N = () => {
  lt(nt), lt(vt), (M = nt.length > 0) && p.raf(N);
}, re = (t) => oe().then(t), $e = /* @__PURE__ */ ce(vt, !0), ae = ".sc-italic-icon-h{display:flex}", fe = ae, St = Yt(class extends ne {
  constructor() {
    super(), this.__registerHost(), this.width = "15", this.height = "15";
  }
  render() {
    return U("svg", { key: "ccf9dbecc9187261cf82a794eb7fb38bd83a56ee", width: this.width, height: this.height, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, U("path", { key: "3ab4e5ba544361bc9a7a58a5056674701d528f5b", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "m10 20 4-16m2 0h-4m0 16H8" }));
  }
  static get style() {
    return fe;
  }
}, [2, "italic-icon", {
  width: [1],
  height: [1]
}]);
function de() {
  if (typeof customElements > "u")
    return;
  ["italic-icon"].forEach((e) => {
    switch (e) {
      case "italic-icon":
        customElements.get(e) || customElements.define(e, St);
        break;
    }
  });
}
const he = St, pe = de;
export {
  he as ItalicIcon,
  pe as defineCustomElement
};
