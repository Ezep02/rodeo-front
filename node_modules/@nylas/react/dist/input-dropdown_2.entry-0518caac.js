import { r as l, c as p, h as r, g as c, d as a } from "./index-cd93b584.js";
import "react";
import "react-dom";
const h = ':host{display:block;position:relative;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:"Inter", sans-serif}@media screen and (max-width: 768px){:host{position:unset}}.dropdown{display:inline-block}.dropbtn{color:var(--nylas-base-800);padding:10px;font-size:16px;font-family:var(--nylas-font-family);cursor:pointer;display:flex;gap:0.5rem;background:transparent;border:none;border-radius:var(--nylas-border-radius-2x);width:50px;padding:14px 16px;border-radius:var(--nylas-border-radius-2x)}.dropbtn.focus{background:transparent}.dropbtn:hover,.dropbtn:active{outline:1px solid var(--nylas-primary)}.dropbtn:active{outline:2px solid var(--nylas-primary)}.dropbtn span.chevron{display:flex;align-self:center}.dropbtn span.open{transform:rotate(90deg)}.dropbtn span.closed{transform:rotate(270deg)}.dropbtn span.selected-option{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:144px;font-size:14px;line-height:20px}@media screen and (max-width: 768px){.dropbtn span.selected-option{max-width:124px;font-size:16px}}.dropdown-content{display:block;margin-top:0.5rem;background-color:var(--nylas-base-0);max-width:306px;width:max-content;max-height:336px;overflow:auto;z-index:1;border-radius:4px;position:absolute;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1)}@media screen and (max-width: 768px){.dropdown-content{right:0;width:325px;max-width:unset}}.search-box{border-bottom:1px solid var(--nylas-base-200);padding:10px;position:sticky;top:0;background:var(--nylas-base-0)}.search-box .icon{position:absolute;top:1.25rem;left:1.25rem;color:var(--nylas-base-300)}.dropdown-content ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px}.dropdown-content ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.dropdown-content ul li:hover,.dropdown-content ul li:focus{background-color:var(--nylas-base-100)}.dropdown-content .selected{background-color:#e7e7e7}input[type=text]{width:-webkit-fill-available;padding:inherit;border:1px solid #ccc;border-radius:4px;position:sticky;background:no-repeat scroll 7px 7px;padding-left:30px;background-size:16px 16px}', u = h, m = class {
  constructor(e) {
    l(this, e), this.inputOptionChanged = p(this, "inputOptionChanged", 7), this.name = void 0, this.options = [], this.defaultInputOption = void 0, this.inputValue = void 0, this.pluralizedLabel = "", this.filterable = !1, this.selectedOption = this.defaultInputOption || null, this.isOpen = !1, this.typedValue = "", this.filteredOptions = [...this.options], this.ariaActivedescendant = "", this.shouldAutoScroll = !1;
  }
  optionsChangedHandler(e, t) {
    e !== t && (this.filteredOptions = this.getFilteredOptions(e));
  }
  defaultSelectedOptionChangedHandler(e, t) {
    (e == null ? void 0 : e.label) !== (t == null ? void 0 : t.label) && (this.selectedOption = e);
  }
  inputValueChangedHandler(e, t) {
    e !== t && (this.filteredOptions = this.getFilteredOptions(this.options));
  }
  componentWillLoad() {
    this.filteredOptions = this.getFilteredOptions(this.options), !this.selectedOption && this.defaultInputOption && (this.selectedOption = this.defaultInputOption), !this.selectedOption && this.options.length > 0 && (this.selectedOption = this.options[0]);
  }
  getFilteredOptions(e) {
    return this.filterable ? e.filter((t) => {
      var i, s, n, o;
      return ((s = t == null ? void 0 : t.value) == null ? void 0 : s.toString().toLowerCase().includes((i = this.typedValue) == null ? void 0 : i.toLowerCase())) || ((o = t == null ? void 0 : t.label) == null ? void 0 : o.toLowerCase().includes((n = this.typedValue) == null ? void 0 : n.toLowerCase()));
    }) : e;
  }
  toggleDropdown() {
    this.isOpen = !this.isOpen;
  }
  selectOption(e) {
    this.selectedOption = e, this.toggleDropdown(), this.inputOptionChanged.emit({
      value: e.value,
      name: this.name
    });
  }
  handleOnInput(e) {
    const t = e.target.value;
    this.typedValue = t;
    const i = this.options.findIndex((s) => s.label.toLowerCase().includes(t.toLowerCase()));
    i > -1 && this.scrollToViewWithinParent(i), this.inputOptionChanged.emit({
      value: t,
      name: this.name
    });
  }
  scrollToViewWithinParent(e) {
    var d;
    const t = this.options[e], i = (d = this.el.shadowRoot) == null ? void 0 : d.getElementById(t.value.toString()), s = this.optionsRef;
    if (this.ariaActivedescendant = t.value.toString(), !i || !s)
      return;
    const n = i.getBoundingClientRect(), o = s.getBoundingClientRect();
    n.top < o.top ? s.scrollTop -= o.top - n.top : n.bottom > o.bottom && (s.scrollTop += n.bottom - o.bottom);
  }
  handleSelectButtonKeyDown(e) {
    var t;
    switch (e.key) {
      case "ArrowDown":
      case "Enter":
        e.preventDefault(), this.isOpen || this.toggleDropdown(), (t = this.inputRef) == null || t.focus();
        break;
      case "Escape":
        this.isOpen = !1;
        break;
    }
  }
  handleClick(e) {
    if (this.isOpen) {
      const t = e.target.value, i = this.options.findIndex((s) => s.label.toLowerCase().includes(t.toLowerCase()));
      i > -1 && setTimeout(() => {
        this.scrollToViewWithinParent(i);
      }, 10);
    }
  }
  handleListboxKeydown(e) {
    var s, n;
    const t = this.filteredOptions, i = t.findIndex((o) => o.value === this.ariaActivedescendant);
    if (e.key === "ArrowDown" || e.key === "Tab" && !e.shiftKey) {
      if (e.preventDefault(), i === t.length - 1) {
        this.ariaActivedescendant = "", (s = this.inputRef) == null || s.focus();
        return;
      }
      const o = i + 1 < t.length ? i + 1 : 0;
      this.ariaActivedescendant = t[o].value, this.focusOption(o);
    } else if (e.key === "ArrowUp" || e.key === "Tab" && e.shiftKey) {
      if (e.preventDefault(), i === 0) {
        this.ariaActivedescendant = "", (n = this.inputRef) == null || n.focus();
        return;
      }
      const o = i - 1 >= 0 ? i - 1 : t.length - 1;
      this.ariaActivedescendant = t[o].value, this.focusOption(o);
    } else
      e.key === "Enter" ? (e.preventDefault(), this.ariaActivedescendant && this.selectOption(t[i])) : e.key === "Escape" && (this.isOpen = !1);
  }
  focusOption(e) {
    var n;
    const t = this.filteredOptions[e];
    if (!t)
      return;
    const i = t.value, s = (n = this.el.shadowRoot) == null ? void 0 : n.getElementById(i);
    s && (s.focus(), s.scrollIntoView({ behavior: "smooth", block: "nearest" }));
  }
  handleComboboxKeyDown(e) {
    if (e.key === "ArrowDown" || e.key == "Tab" && !e.shiftKey) {
      if (e.preventDefault(), !this.isOpen) {
        this.isOpen = !0, this.shouldAutoScroll = !0;
        return;
      }
      this.ariaActivedescendant = this.filteredOptions[0].value, this.focusOption(0);
    } else
      e.key === "ArrowUp" || e.key === "Tab" && e.shiftKey ? (e.preventDefault(), this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value, this.focusOption(this.filteredOptions.length - 1)) : e.key === "Escape" && (this.isOpen = !1);
  }
  handleOutsideClick(e) {
    !e.composedPath().includes(this.el) && this.isOpen && (this.isOpen = !1);
  }
  render() {
    return r("div", { key: "9d5c9dfd32cc331198fdda58da51ed89cee2ede0", class: "dropdown", part: "id_dropdown" }, r("input", { key: "6aa03686c990fd7fb44945807b5b67c53a762f91", type: "text", name: this.name, id: this.name, part: "id_dropdown-input", class: { dropbtn: !0, open: this.isOpen }, value: this.inputValue, onClick: (e) => {
      this.toggleDropdown(), this.shouldAutoScroll = !0, this.handleClick(e);
    }, "aria-haspopup": "listbox", "aria-label": this.name, "aria-expanded": this.isOpen ? "true" : "false", onKeyDown: (e) => this.handleComboboxKeyDown(e), onInput: (e) => this.handleOnInput(e) }), this.isOpen ? r("div", { class: "dropdown-content", part: "id_dropdown-content", ref: (e) => this.optionsRef = e }, r("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: (e) => this.handleListboxKeydown(e) }, this.filteredOptions.map((e) => r("li", { tabindex: "0", key: e.value, id: e.value, onClick: () => this.selectOption(e), role: "option", class: {
      focused: this.ariaActivedescendant === e.value.toString()
    } }, e.labelHTML ? e.labelHTML : e.label)))) : null);
  }
  get el() {
    return c(this);
  }
  static get watchers() {
    return {
      options: ["optionsChangedHandler"],
      defaultInputOption: ["defaultSelectedOptionChangedHandler"],
      inputValue: ["inputValueChangedHandler"]
    };
  }
};
m.style = u;
const b = ".time-period-selector.sc-time-period-selector{display:grid;gap:0.5rem;grid-template-columns:auto 1fr}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector,.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector{width:116px}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector{width:84px;display:flex;align-items:center}.time-period-selector.sc-time-period-selector select-dropdown#time-period.sc-time-period-selector::part(sd_dropdown-button){width:100%}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown){width:inherit;height:100%}.time-period-selector.sc-time-period-selector input-dropdown#time-number.sc-time-period-selector::part(id_dropdown-input){border:none;border-radius:var(--nylas-border-radius-2x)}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown-input){padding:17px;gap:1rem}.time-period-selector.sc-time-period-selector input-dropdown.sc-time-period-selector::part(id_dropdown-content){width:100%;max-height:200px}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown){width:inherit}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-button){padding:1rem;gap:1rem;justify-content:space-between}.time-period-selector.sc-time-period-selector select-dropdown.sc-time-period-selector::part(sd_dropdown-content){width:100%;max-height:200px}", f = b, g = {
  hours: "hour",
  days: "day",
  weeks: "week",
  months: "month"
}, w = class {
  constructor(e) {
    l(this, e), this.timePeriodChanged = p(this, "timePeriodChanged", 7), this.timePeriods = ["hour", "day", "week", "month"], this.defaultSelectedPeriod = void 0, this.defaultSelectedNumber = void 0, this.selectedPeriod = this.defaultSelectedPeriod, this.selectedNumber = this.defaultSelectedNumber, this.numberOptions = this.calculateOptions(this.defaultSelectedPeriod || "hour").map((t) => ({
      label: t.toString(),
      value: t.toString()
    })), this.timePeriodOptions = this.timePeriods.map((t) => ({
      label: t,
      value: t
    }));
  }
  defaultSelectedPeriodChanged(e) {
    this.selectedPeriod = e, this.updateNumberOptionsAndSelectedNumber(e);
  }
  defaultSelectedNumberChanged(e) {
    this.selectedNumber = e;
  }
  timePeriodsChanged(e) {
    this.timePeriodOptions = e.map((t) => ({
      label: t,
      value: t
    }));
  }
  componentDidLoad() {
    this.selectedNumber = this.defaultSelectedNumber, this.selectedPeriod = this.defaultSelectedPeriod;
    const e = g[this.selectedPeriod] ?? this.selectedPeriod, t = this.calculateOptions(e);
    this.numberOptions = t.map((i) => ({
      label: i.toString(),
      value: i.toString()
    }));
  }
  calculateOptions(e) {
    switch (e) {
      case "hour":
        return Array.from({ length: 23 }, (t, i) => i + 1);
      case "minute":
        return Array.from({ length: 13 }, (t, i) => i * 5);
      case "day":
        return Array.from({ length: 30 }, (t, i) => i + 1);
      case "week":
        return Array.from({ length: 4 }, (t, i) => i + 1);
      case "month":
        return Array.from({ length: 12 }, (t, i) => i + 1);
      default:
        return [];
    }
  }
  inputOptionChangedHandler(e) {
    a("time-period-selector", "inputOptionChangedHandler", e.detail);
    const { value: t, name: i } = e.detail;
    i === "time-number" && (this.selectedNumber = t ? parseInt(t) : this.defaultSelectedNumber);
    const s = {
      number: this.selectedNumber,
      period: this.selectedPeriod
    };
    this.timePeriodChanged.emit(s);
  }
  nylasFormDropdownChangedHandler(e) {
    a("time-period-selector", "nylasFormDropdownChangedHandler", e.detail);
    const { value: t, name: i } = e.detail;
    i === "time-period" ? (this.selectedPeriod = t, this.updateNumberOptionsAndSelectedNumber(t)) : i === "time-number" && (this.selectedNumber = parseInt(t));
    const s = {
      number: this.selectedNumber,
      period: this.selectedPeriod
    };
    this.timePeriodChanged.emit(s);
  }
  updateNumberOptionsAndSelectedNumber(e) {
    const t = this.calculateOptions(e);
    this.numberOptions = t.map((i) => ({
      label: i.toString(),
      value: i.toString()
    }));
  }
  render() {
    return r("div", { key: "c079631c07b14e3727b2a838c1ee01acac85592c", class: "time-period-selector" }, typeof this.selectedNumber == "number" && r("input-dropdown", { id: "time-number", name: "time-number", inputValue: this.selectedNumber.toString(), exportparts: "id_dropdown: tps__number-dropdown, id_dropdown-input: tps__number-dropdown-button, id_dropdown-content: tps__number-dropdown-content", options: this.numberOptions, defaultInputOption: this.numberOptions.find((e) => e.value == this.selectedNumber.toString()) }), typeof this.selectedPeriod == "string" && r("select-dropdown", { id: "time-period", name: "time-period", options: this.timePeriodOptions, exportparts: "sd_dropdown: tps__period-dropdown, sd_dropdown-button: tps__period-dropdown-button, sd_dropdown-content: tps__period-dropdown-content", pluralizedLabel: this.selectedNumber > 1 ? "s" : "", defaultSelectedOption: this.timePeriodOptions.find((e) => e.value == this.selectedPeriod), withSearch: !1 }));
  }
  get host() {
    return c(this);
  }
  static get watchers() {
    return {
      defaultSelectedPeriod: ["defaultSelectedPeriodChanged"],
      defaultSelectedNumber: ["defaultSelectedNumberChanged"],
      timePeriods: ["timePeriodsChanged"]
    };
  }
};
w.style = f;
export {
  m as input_dropdown,
  w as time_period_selector
};
