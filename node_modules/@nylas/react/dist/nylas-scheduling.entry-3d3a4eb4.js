import { i as f, r as G, c as C, d as O, f as D, j as Y, k as J, h as n, H as w, g as K, F as Q } from "./index-cd93b584.js";
import { n as z, N as X } from "./index.es-ef72cd61-3075f564.js";
import { E as S, C as Z, N as V } from "./scheduler-store-8e74959b-ffa0b3c6.js";
import { L as ee, b as te } from "./constants-91d76d21-1638ead6.js";
import { i as ne, a as ie, c as oe, b as se, f as ae } from "./feedbackSync-b5d35a5b-20032e5d.js";
import "react";
import "react-dom";
class re {
  constructor({ schedulerAPIURL: e, nylasSchedulerStore: i, sessionId: a, configId: o, slug: r, clientId: d }) {
    if (!e)
      throw new Error("schedulerAPIURL is required");
    if (!i)
      throw new Error("nylasSchedulerStore is required");
    if (!a && !o && !(r || d))
      throw new Error("sessionId is required for private configs. If using public config either pass a configurationId or a combination of slug and clientId.");
    e === "/" && (e = new URL(window.location.href).origin), this.configId = o, this.sessionId = a, this.schedulerAPIURL = e, this.nylasSchedulerStore = i, this.slug = r, this.clientId = d;
  }
  init() {
    O("NylasConnector init");
  }
  get schedulerStore() {
    return this.nylasSchedulerStore;
  }
  get scheduler() {
    return this._schedulerAPIConnector ? this._schedulerAPIConnector : (this._schedulerAPIConnector = new V({
      schedulerAPIURL: this.schedulerAPIURL,
      schedulerStore: this.schedulerStore,
      sessionId: this.sessionId,
      configId: this.configId,
      slug: this.slug,
      clientId: this.clientId
    }), this._schedulerAPIConnector);
  }
  resetStores() {
    this.nylasSchedulerStore.reset();
  }
}
const x = (t, e) => {
  const i = t.isLoading, a = t.showNotification, o = t.nylasBranding;
  return n(
    Q,
    null,
    a && n("nylas-notification", null),
    i && n(
      "div",
      { class: "loading" },
      n(
        "div",
        { class: "left" },
        n("div", { class: "skeleton" })
      ),
      n(
        "div",
        { class: "right" },
        n("div", { class: "skeleton" }),
        n("div", { class: "skeleton" }),
        n("div", { class: "skeleton" }),
        n("div", { class: "skeleton" }),
        n("div", { class: "skeleton" })
      )
    ),
    !i && e,
    n("div", { class: "footer" }, o && n(
      "a",
      { href: "https://scheduler.nylas.com?utm_source=powered-by-nylas-logoutm_medium=link&utm_campaign=get-scheduler&utm_id=get-scheduler", class: "powered-by-nylas", target: "_blank", rel: "noreferrer noopener" },
      "Powered byÂ ",
      n("span", { class: "sr-only" }, "Nylas"),
      n("nylas-logo", { "aria-hidden": !0 })
    ))
  );
}, W = (t, e) => n("div", { class: "message-banner" }, e), de = ':host{display:flex;flex-direction:column;overflow:visible;border-radius:var(--nylas-border-radius-2x);width:fit-content;background:var(--nylas-base-0);position:relative;box-shadow:0px 4px 8px 2px rgba(0, 0, 0, 0.05), 0px 8px 16px -2px rgba(0, 0, 0, 0.1);--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:"Inter", sans-serif;font-family:var(--nylas-font-family);font-optical-sizing:auto;font-style:normal;font-variation-settings:"slnt" 0}@media screen and (max-width: 768px){:host{width:auto;min-width:325px}}:root{font-family:inherit}.error{padding:8rem 12rem;color:var(--nylas-base-0);background-color:var(--nylas-error);margin:1.5rem;border-radius:var(--nylas-border-radius-2x)}.message-banner{text-align:right;color:var(--nylas-base-800);padding:1rem;border-bottom:1px solid var(--nylas-color-primary-200);margin:0}.loading{margin:1.5rem;display:flex;gap:1rem}.loading .skeleton{border-radius:var(--nylas-border-radius-2x);animation:pulsate 1.5s infinite}.loading .skeleton:nth-child(2){animation-delay:-100ms}.loading .skeleton:nth-child(3){animation-delay:-200ms}.loading .skeleton:nth-child(4){animation-delay:-300ms}.loading .skeleton:nth-child(5){animation-delay:-400ms}.loading .left .skeleton{height:100%;width:400px}.loading .right .skeleton{height:5rem;width:300px;margin-bottom:1rem}.loading .right .skeleton:last-child{margin-bottom:0}@keyframes pulsate{0%{background-color:var(--nylas-base-50)}50%{background-color:var(--nylas-base-100)}100%{background-color:var(--nylas-base-50)}}.select-date-page,.additional-data-page,.booked-event-page,.manual-confirmation-page,.cancelled-event-page,.cancel-flow-page{border-top-left-radius:var(--nylas-border-radius-2x);border-top-right-radius:var(--nylas-border-radius-2x)}.select-date-page,.additional-data-page{display:flex}@media screen and (max-width: 768px){.select-date-page,.additional-data-page{flex-direction:column}}.booked-event-page,.manual-confirmation-page{background-color:var(--nylas-base-50)}.cancelled-event-page,.manual-confirmation-page,.cancel-flow-page{padding:1rem;height:496px;display:flex;justify-content:center;align-items:center}.booked-event-page,.manual-confirmation-page,.cancelled-event-page,.cancel-flow-page{min-width:784px;background:var(--nylas-base-50)}@media screen and (max-width: 768px){.booked-event-page,.manual-confirmation-page,.cancelled-event-page,.cancel-flow-page{min-width:90%}}.left-panel{display:flex;flex-direction:column;min-width:424px;border-top-left-radius:inherit;background:var(--nylas-base-0);position:relative;padding:1rem 0 0 0;height:624px}@media screen and (max-width: 768px){.left-panel{border-top-right-radius:inherit;min-width:unset;height:auto}}@media screen and (max-width: 768px){.select-date-page .left-panel{padding:0.5rem 4px 0;height:624px}}.border{margin-left:-20px;margin-right:-20px;border-top-width:1px;height:0.5px;background-color:var(--nylas-base-200)}@media screen and (max-width: 768px){.border{display:none}}.right-panel{min-width:360px;width:360px;background-color:var(--nylas-base-50);height:624px;padding-top:16px;border-left:1px solid var(--nylas-base-200);border-top-right-radius:inherit}.right-panel.reschedule{border-top-right-radius:0px}@media screen and (max-width: 768px){.right-panel{border-top-right-radius:0px;width:inherit;min-width:unset;height:auto}}.right-panel h2{display:flex;margin:0;height:48px;gap:0.5rem;justify-content:center;align-items:center;width:auto;font-size:1.125rem;line-height:1.5rem;font-weight:500;text-align:center;color:var(--nylas-base-800)}.additional-data-page .left-panel{background-color:var(--nylas-base-50)}.additional-data-page .right-panel{background-color:var(--nylas-base-0)}nylas-selected-event-card{height:604px;padding:0 1rem}@media screen and (max-width: 768px){nylas-selected-event-card{height:250px}}.footer{display:flex;justify-content:flex-end;align-items:center;padding:16px;font-size:14px;font-weight:300;color:var(--nylas-base-500);border-top:1px solid var(--nylas-base-200);min-height:24px}.footer .powered-by-nylas{display:flex;align-items:center;text-decoration:none;color:var(--nylas-base-500)}.footer .powered-by-nylas:hover{color:var(--nylas-base-800)}.footer svg{fill:var(--nylas-base-500)}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.footer svg{margin-top:1px}nylas-selected-event-card::part(nsec__timezone){position:absolute;bottom:0}nylas-notification{margin:1.5rem;width:-webkit-fill-available;width:-moz-available;position:absolute}nylas-locale-switch{position:absolute;padding:18px 20px;bottom:0;width:-webkit-fill-available;width:-moz-available;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){nylas-locale-switch{height:auto}}nylas-date-picker{padding:0 20px}button-component#report-issue{width:auto;position:absolute;bottom:4px;left:16px}nylas-feedback-form{position:absolute;top:0;height:100%;width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(0, 0, 0, 0.6);z-index:2;border-radius:inherit}', le = de, $ = { title: f.t("genericErrorTitle"), type: z.Error, category: S.Component }, ce = class {
  constructor(t) {
    G(this, t), this.init = C(this, "init", 7), this.schedulerWillLoad = C(this, "schedulerWillLoad", 7), this.schedulerDidLoad = C(this, "schedulerDidLoad", 7), this.nylasSchedulerError = C(this, "nylasSchedulerError", 7), this.configSettingsLoaded = C(this, "configSettingsLoaded", 7), this.bookingRefExtracted = C(this, "bookingRefExtracted", 7), this.bookedEventInfo = C(this, "bookedEventInfo", 7), this.mode = "app", this.defaultSchedulerState = void 0, this.sessionId = void 0, this.schedulerApiUrl = "https://api.us.nylas.com", this.bookingInfo = void 0, this.rescheduleBookingRef = void 0, this.cancelBookingRef = void 0, this.organizerConfirmationBookingRef = void 0, this.configurationId = void 0, this.slug = void 0, this.clientId = void 0, this.nylasBranding = !0, this.eventOverrides = {}, this.isLoading = void 0, this.themeConfig = void 0, this.localization = void 0, this.showNotification = !0, this.enableUserFeedback = !0, this.automaticComponentRegistration = !0, this.selectedDateLabel = (/* @__PURE__ */ new Date()).toLocaleDateString(void 0, { dateStyle: "full" }) || `${f.t("noDateSelected")}`, this.refConfigId = void 0, this.language = navigator.language, this.showFeedbackModal = !1, this.bookingInfoConfirmed = null;
  }
  connectedCallback() {
    O("[nylas-scheduler] connectedCallback");
  }
  async componentWillLoad() {
    var o, r;
    O("[nylas-scheduler] Component will load"), this.enableUserFeedback && !ne() && ie({
      dsn: "https://9d5731f1c77ca84c9ed3fb9b3ccf7ee1@o74852.ingest.us.sentry.io/4507889638178816",
      release: "1.3.4",
      integrations: (d) => [
        ...d.filter((s) => !1),
        ae({
          colorScheme: "system",
          autoInject: !1
        })
      ],
      autoSessionTracking: !1,
      beforeSend: () => null
    });
    const t = this.schedulerWillLoad.emit(this.host);
    if ("schedulerWillLoad" in this.eventOverrides && (await this.eventOverrides.schedulerWillLoad(t, this.nylasSchedulerConnector), t.defaultPrevented))
      return;
    this.stores = {
      scheduler: Z({
        bookingInfo: this.bookingInfo,
        nylasBranding: this.nylasBranding,
        themeConfig: this.themeConfig,
        ...this.defaultSchedulerState
      })
    }, this.baseProvider = new X(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides), this.refConfigId = this.configurationId;
    let e;
    if (this.rescheduleBookingRef) {
      const [d, s, c] = D(this.rescheduleBookingRef);
      this.refConfigId = d, this.stores.scheduler.set("rescheduleBookingId", s), e = this.bookingRefExtracted.emit({ configurationId: d, bookingId: s });
    } else if (this.cancelBookingRef) {
      const [d, s, c] = D(this.cancelBookingRef);
      this.refConfigId = d, this.stores.scheduler.set("cancelBookingId", s), e = this.bookingRefExtracted.emit({ configurationId: d, bookingId: s });
    } else if (this.organizerConfirmationBookingRef) {
      const [d, s, c] = D(this.organizerConfirmationBookingRef);
      this.refConfigId = d, this.stores.scheduler.set("organizerConfirmationBookingId", s), this.stores.scheduler.set("organizerConfirmationSalt", c), e = this.bookingRefExtracted.emit({ configurationId: d, bookingId: s, salt: c });
    }
    if ("bookingRefExtracted" in this.eventOverrides && (await this.eventOverrides.bookingRefExtracted(e, this.nylasSchedulerConnector), e.defaultPrevented) || !this.checkIfSessionIdOrConfigIdExists())
      return;
    const i = (o = this.baseProvider) == null ? void 0 : o.getStore("scheduler");
    this.nylasSchedulerConnector = new re({
      schedulerAPIURL: this.schedulerApiUrl,
      sessionId: this.sessionId,
      configId: this.refConfigId,
      slug: this.slug,
      clientId: this.clientId,
      nylasSchedulerStore: i
    });
    const a = this.init.emit(this.host);
    "init" in this.eventOverrides && (await this.eventOverrides.init(a, this.nylasSchedulerConnector), a.defaultPrevented) || ((r = this.baseProvider) == null || r.componentWillLoad(this.nylasSchedulerConnector), this.applyThemeConfig(this.themeConfig));
  }
  async componentDidLoad() {
    var c, m, p, g, h, u, y, B;
    (c = this.baseProvider) == null || c.componentDidLoad();
    const t = this.schedulerDidLoad.emit(this.host);
    if ("schedulerDidLoad" in this.eventOverrides && (await this.eventOverrides.schedulerDidLoad(t, this.nylasSchedulerConnector), t.defaultPrevented) || !this.checkIfSessionIdOrConfigIdExists())
      return;
    this.localizationChanged(this.localization);
    const e = await ((m = this.nylasSchedulerConnector) == null ? void 0 : m.scheduler.getUISettings());
    if (!e || "error" in e) {
      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(e == null ? void 0 : e.error) }, host: this.host });
      return;
    } else {
      "data" in e && ((p = e.data) != null && p.appearance) && console.info("Appearance settings have been returned from the configuration used byt his scheduling page; please remember to grab them from the configSettingsLoaded event and apply them as desired.");
      const b = this.configSettingsLoaded.emit({ settings: e });
      if ("configSettingsLoaded" in this.eventOverrides && (await this.eventOverrides.configSettingsLoaded(b, this.nylasSchedulerConnector), b.defaultPrevented))
        return;
    }
    const i = (g = this.baseProvider) == null ? void 0 : g.getStore("scheduler"), a = (u = (h = i == null ? void 0 : i.get("configSettings")) == null ? void 0 : h.scheduler) == null ? void 0 : u.available_days_in_future, o = i == null ? void 0 : i.get("selectedTimeslot");
    if (o && (o != null && o.start_time)) {
      if (!this.isTimeslotValid(o))
        return;
      if (i != null && i.get("showBookingForm")) {
        i == null || i.set("selectedDate", o.start_time);
        return;
      }
    }
    const r = i == null ? void 0 : i.get("selectedDate"), d = i == null ? void 0 : i.get("availability");
    let s;
    if (!(d && d.length > 0)) {
      if (r) {
        const { startTime: b, endTime: v, endTimeForAvailableDaysInFuture: _ } = this.validateAvailableDaysInFuture(r, a || 30);
        r.getTime() < _ * 1e3 && (s = await ((B = this.nylasSchedulerConnector) == null ? void 0 : B.scheduler.getAvailability(b, v)));
      } else {
        const b = /* @__PURE__ */ new Date(), { startTime: v, endTime: _, endTimeForAvailableDaysInFuture: L } = this.validateAvailableDaysInFuture(b, a || 30);
        b.getTime() < L * 1e3 && (s = await ((y = this.nylasSchedulerConnector) == null ? void 0 : y.scheduler.getAvailability(v, _)));
      }
      if ((!s || "error" in s) && this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(s == null ? void 0 : s.error) }, host: this.host }), !r) {
        let b = /* @__PURE__ */ new Date();
        const v = i == null ? void 0 : i.get("availability").find((_) => new Date(_.start_time) > /* @__PURE__ */ new Date());
        v && (b = v.start_time), i == null || i.set("selectedDate", b);
      }
    }
  }
  componentDisconnected() {
    var t;
    (t = this.baseProvider) == null || t.componentDisconnected();
  }
  bookingInfoChanged(t) {
    var e;
    (e = this.stores) == null || e.scheduler.set("bookingInfo", t);
  }
  rescheduleBookingRefChanged(t) {
    var e, i;
    if (t) {
      const [a, o] = D(t);
      (e = this.stores) == null || e.scheduler.set("rescheduleBookingId", o), this.refConfigId = a, (i = this.nylasSchedulerConnector) == null || i.scheduler.setConfigId(a);
    }
  }
  cancelBookingRefChanged(t) {
    var e, i;
    if (t) {
      const [a, o] = D(t);
      (e = this.stores) == null || e.scheduler.set("cancelBookingId", o), this.refConfigId = a, (i = this.nylasSchedulerConnector) == null || i.scheduler.setConfigId(a);
    }
  }
  organizerConfirmationBookingRefChanged(t) {
    var e, i;
    if (t) {
      const [a, o] = D(t);
      (e = this.stores) == null || e.scheduler.set("organizerConfirmationBookingId", o), this.refConfigId = a, (i = this.nylasSchedulerConnector) == null || i.scheduler.setConfigId(a);
    }
  }
  localizationChanged(t) {
    t && Object.keys(t).forEach((e) => {
      e in ee && f.addResourceBundle(e, "translation", t[e], !1, !0);
    });
  }
  themeConfigChanged(t) {
    var e, i;
    (i = (e = this.baseProvider) == null ? void 0 : e.getStore("scheduler")) == null || i.set("themeConfig", t), this.applyThemeConfig(t);
  }
  languageChanged(t) {
    const e = t.detail;
    this.language = e, f.changeLanguage(e);
  }
  async registerComponentHandler(t) {
    var e;
    (e = this.baseProvider) == null || e.registerComponent(t.detail);
  }
  async unregisterComponentHandler(t) {
    var e;
    (e = this.baseProvider) == null || e.unregisterComponent(t.detail);
  }
  async monthChangedHandler(t) {
    var d, s, c, m, p, g, h;
    const e = t.detail, i = (m = (c = (s = (d = this.nylasSchedulerConnector) == null ? void 0 : d.schedulerStore) == null ? void 0 : s.get("configSettings")) == null ? void 0 : c.scheduler) == null ? void 0 : m.available_days_in_future, { startTime: a, endTime: o, endTimeForAvailableDaysInFuture: r } = this.validateAvailableDaysInFuture(e, i || 30);
    if (!t.defaultPrevented && a < r && e.getTime() < r * 1e3) {
      const u = await ((p = this.nylasSchedulerConnector) == null ? void 0 : p.scheduler.getAvailability(a, o));
      (!u || "error" in u) && this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(u == null ? void 0 : u.error) }, host: this.host });
      const y = (g = this.stores) == null ? void 0 : g.scheduler.get("selectableDates");
      y && y.length > 0 && ((h = this.stores) == null || h.scheduler.set("selectedDate", y[0]));
    }
  }
  mapToBookingData(t) {
    var d, s, c;
    const e = (d = this.stores) == null ? void 0 : d.scheduler.get("selectedTimeslot"), i = (s = this.stores) == null ? void 0 : s.scheduler.get("selectedLanguage"), a = (c = this.stores) == null ? void 0 : c.scheduler.get("selectedTimezone"), o = e != null && e.start_time ? new Date(e == null ? void 0 : e.start_time).getTime() / 1e3 : "", r = e != null && e.end_time ? new Date(e == null ? void 0 : e.end_time).getTime() / 1e3 : "";
    return {
      additional_guests: t.guests,
      guest: { ...t.primaryParticipant },
      additional_fields: { ...t.additionalFields },
      start_time: o,
      end_time: r,
      email_language: i,
      timezone: a
    };
  }
  async bookButtonClickedHandler(t) {
    var c, m, p, g;
    if (t.defaultPrevented)
      return;
    const e = t.detail, i = this.mapToBookingData(e);
    this.bookingInfoConfirmed = e;
    const o = (m = (c = this.nylasSchedulerConnector) == null ? void 0 : c.schedulerStore) == null ? void 0 : m.get("rescheduleBookingId");
    if (o) {
      const h = await ((p = this.nylasSchedulerConnector) == null ? void 0 : p.scheduler.rescheduleBooking(o, e));
      (!h || "error" in h) && this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(h == null ? void 0 : h.error) }, host: this.host });
      const u = h == null ? void 0 : h.data, y = this.bookedEventInfo.emit({ ...h, data: { ...u, ...i } });
      "bookedEventInfo" in this.eventOverrides && await this.eventOverrides.bookedEventInfo(y, this.nylasSchedulerConnector);
      return;
    }
    const r = await ((g = this.nylasSchedulerConnector) == null ? void 0 : g.scheduler.bookTimeslot(e));
    (!r || "error" in r) && this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(r == null ? void 0 : r.error) }, host: this.host });
    const d = r == null ? void 0 : r.data, s = this.bookedEventInfo.emit({ ...r, data: { ...d, ...i } });
    "bookedEventInfo" in this.eventOverrides && await this.eventOverrides.bookedEventInfo(s, this.nylasSchedulerConnector);
  }
  dateSelectedHandler(t) {
    const e = t.detail;
    this.selectedDateLabel = e ? e.toLocaleDateString(void 0, { dateStyle: "full" }) : `${f.t("noDateSelected")}`;
  }
  cancelBookedEventErrorHandler(t) {
    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(t.detail.error) }, host: this.host });
  }
  cancelBookedEventValidationErrorHandler(t) {
    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(t.detail.error) }, host: this.host });
  }
  rescheduleBookedEventErrorHandler(t) {
    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(t.detail.error) }, host: this.host });
  }
  confirmBookingErrorHandler(t) {
    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(t.detail.error) }, host: this.host });
  }
  feedbackModalClosedHandler() {
    this.showFeedbackModal = !1;
  }
  feedbackSubmittedHandler(t) {
    const i = {
      eventId: oe("Scheduling Page User Feedback"),
      message: t.detail.feedback
    };
    se(i, {
      includeReplay: !0,
      captureContext: {
        tags: {
          "nylas-web-element": "nylas-schduling",
          "nylas-web-element-version": "1.3.4"
        },
        extra: {
          configId: this.configurationId,
          slug: this.slug
        }
      }
    }), this.showFeedbackModal = !1;
  }
  async getNylasSchedulerStore() {
    var t;
    return (t = this.baseProvider) == null ? void 0 : t.getStore("scheduler");
  }
  async getNylasSchedulerConnector() {
    return this.nylasSchedulerConnector;
  }
  async getRef() {
    return this.host;
  }
  getErrorObject(t) {
    return {
      title: (t == null ? void 0 : t.title) || $.title,
      category: (t == null ? void 0 : t.category) || $.category,
      type: z.Error,
      description: (t == null ? void 0 : t.message) || "",
      id: (/* @__PURE__ */ new Date()).getTime().toString(),
      ttl: "none"
    };
  }
  checkIfSessionIdOrConfigIdExists() {
    if (!this.sessionId && !this.refConfigId && !(this.slug && this.clientId)) {
      let t = "";
      return this.sessionId || (t += f.t("sessionIdRequiredErrorMessage")), !this.sessionId && !this.refConfigId && !(this.slug && this.clientId) && (t = f.t("sessionIdRequiredErrorMessage") + " " + f.t("publicConfigErrorMessage")), this.nylasSchedulerError.emit({
        notification: {
          title: f.t("schedulingComponentErrorTitle"),
          category: S.Component,
          type: z.Error,
          description: t,
          id: (/* @__PURE__ */ new Date()).getTime().toString(),
          ttl: "none"
        },
        host: this.host
      }), !1;
    }
    return !0;
  }
  isTimeslotValid(t) {
    return new Date(t.start_time) < /* @__PURE__ */ new Date() ? (this.nylasSchedulerError.emit({
      notification: {
        title: f.t("invalidTimeslotErrorTitle"),
        category: S.Component,
        type: z.Error,
        description: f.t("invalidTimeslotErrorMessage"),
        id: (/* @__PURE__ */ new Date()).getTime().toString(),
        ttl: "none"
      },
      host: this.host
    }), !1) : !0;
  }
  validateAvailableDaysInFuture(t, e) {
    const i = /* @__PURE__ */ new Date(), a = new Date(t.getFullYear(), t.getMonth(), 1).getTime() / 1e3, o = new Date(t.getFullYear(), t.getMonth() + 1, 1).getTime() / 1e3, r = Math.floor(Y(i, e).getTime() / 1e3), d = Math.min(r, o);
    return { startTime: a < i.getTime() / 1e3 ? Math.floor(i.getTime() / 1e3) : a, endTime: d, endTimeForAvailableDaysInFuture: r };
  }
  applyThemeConfig(t) {
    if (t)
      for (const [e, i] of Object.entries(t))
        this.host.style.setProperty(`${e}`, i);
  }
  onFeedbackClick(t) {
    t.preventDefault(), this.showFeedbackModal = !0;
  }
  redirectToCustomUrl(t) {
    window.location.assign(t);
  }
  render() {
    var y, B, b, v, _, L, P, N, A, M;
    const t = this.mode === "app", e = (y = this.baseProvider) == null ? void 0 : y.getStore("scheduler"), i = e == null ? void 0 : e.get("eventInfo"), a = e == null ? void 0 : e.get("showBookingForm"), o = e == null ? void 0 : e.get("cancelledEventInfo"), r = e == null ? void 0 : e.get("cancelBookingId"), d = e == null ? void 0 : e.get("selectedTimeslot"), s = e == null ? void 0 : e.get("rescheduleBookingId"), c = e == null ? void 0 : e.get("organizerConfirmationBookingId"), m = e == null ? void 0 : e.get("rejectBookingId"), p = e == null ? void 0 : e.get("confirmedEventInfo"), g = (e == null ? void 0 : e.get("nylasBranding")) || this.nylasBranding, h = e == null ? void 0 : e.get("selectedDate"), u = (b = (B = e == null ? void 0 : e.get("configSettings")) == null ? void 0 : B.scheduler) == null ? void 0 : b.confirmation_redirect_url;
    if (this.selectedDateLabel = h && this.language ? J(h.toLocaleDateString(te[this.language], { dateStyle: "full" })) : `${f.t("noDateSelected")}`, t && (r || m) && !o)
      return n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, n("div", { class: "cancel-flow-page", part: "cancel-flow-page" }, n("nylas-cancel-booking-form", { selectedTimeslot: d, cancelBookingId: r, rejectBookingId: m, exportparts: "ncbf, ncbf__icon, ncbf__title, ncbf__description, ncbf__reason-textarea, ncbf__button-cta, ncbf__button-outline, ncbf__card" }))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    if (t && c)
      return n(w, null, n(x, null, n("div", { class: "manual-confirmation-page", part: "manual-confirmation-page" }, n("nylas-organizer-confirmation-card", { organizerConfirmationBookingId: c, exportparts: "nmcc, nmcc__title, nmcc__description, nmcc__button-cta, nmcc__button-outline" }))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    if (t && o)
      return n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, n("div", { class: "cancelled-event-page", part: "cancelled-event-page" }, n("nylas-cancelled-event-card", { cancelledEventInfo: o, exportparts: "ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card" }))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    if (t && p)
      return n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, n("div", { class: "cancelled-event-page", part: "confirmed-event-page" }, n("nylas-confirmed-event-card", { confirmedEventInfo: p, exportparts: "ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card" }))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    if (t && i && u) {
      const l = (v = this.bookingInfoConfirmed) == null ? void 0 : v.primaryParticipant, E = ((_ = this.bookingInfoConfirmed) == null ? void 0 : _.additionalFields) || {};
      if (this.bookingInfo && typeof ((L = this.bookingInfo) == null ? void 0 : L.additionalFields) < "u") {
        const T = this.bookingInfo.additionalFields;
        Object.keys(T).forEach((F) => {
          !E[F] && (T != null && T[F]) && (E[F] = T[F].value);
        });
      }
      const I = (P = this.stores) == null ? void 0 : P.scheduler.get("selectedTimeslot"), U = (N = this.stores) == null ? void 0 : N.scheduler.get("selectedTimezone"), j = (A = this.stores) == null ? void 0 : A.scheduler.get("selectedLanguage"), R = (M = this.stores) == null ? void 0 : M.scheduler.get("configSettings"), H = this.configurationId ? this.configurationId : R == null ? void 0 : R.configuration_id, q = window.location.search, k = new URLSearchParams(q);
      k.set("booking_id", i.booking_id), l != null && l.name && k.set("name", l.name), l != null && l.email && k.set("email", l.email), I != null && I.start_time && k.set("start_time", (new Date(I.start_time).getTime() / 1e3).toString()), I != null && I.end_time && k.set("end_time", (new Date(I.end_time).getTime() / 1e3).toString()), U && k.set("tz", U), j && k.set("language", j), E && k.set("additional_values", JSON.stringify(E)), this.slug && k.set("page_slug", this.slug), H && k.set("config_id", H), this.redirectToCustomUrl(`${u}?${k.toString()}`);
      return;
    }
    if (t && i)
      return n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, n("div", { class: "booked-event-page", part: "booked-event-page" }, n("nylas-booked-event-card", { selectedTimeslot: d, eventInfo: i, exportparts: "nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta" }))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    if (t && (!i || s) && !a) {
      const l = this.host.querySelector('[slot="timeslot-picker-cta-label"]');
      return n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, s && n(W, null, `${f.t("rescheduleTitle")}`), n("div", { class: "select-date-page", part: "select-date-page" }, n("div", { class: "left-panel" }, n("nylas-date-picker", { exportparts: "ndp, ndp__title, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--disabled, ndp__date--selected, ndp__date--current-day, ndp__date--current-month" }), n("nylas-locale-switch", { exportparts: "nls, nls__timezone, nls__timezone-dropdown, nls__timezone-drop-button, nls__timezone-drop-button-selected-label, nls__timezone-drop-content, nls__timezone-drop-label, nls__language, nls__language-dropdown, nls__language-drop-button, nls__language-drop-content, nls__language-drop-label" })), n("div", { class: `right-panel ${s ? "reschedule" : ""}` }, n("h2", null, n("calendar-icon", null), n("span", { id: "selectedDate" }, this.selectedDateLabel)), n("nylas-timeslot-picker", { exportparts: "ntp, ntp__time-picker-wrapper, ntp__timeslots, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary" }, l && n("span", { slot: "timeslot-picker-cta-label" }, n("slot", { name: "timeslot-picker-cta-label" })))))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (E) => this.onFeedbackClick(E) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null));
    }
    return t && !i && a ? n(w, null, n(x, { nylasBranding: g, isLoading: this.isLoading, showNotification: this.showNotification }, s && n(W, null, `${f.t("rescheduleTitle")}`), n("div", { class: "additional-data-page", part: "additional-data-page" }, n("div", { class: "left-panel" }, n("div", { class: "wrapper" }, n("nylas-selected-event-card", { exportparts: "nsec, nsec__card, nsec__icon, nsec__date, nsec__time, nsec__timezone" }))), n("div", { class: `right-panel ${s ? "reschedule" : ""}` }, n("nylas-booking-form", { exportparts: "nbf, nbf__input-textfield, nbf__button-ghost, nbf__button-outline, nbf__button-primary, nbf__input-wrapper, nbf__checkbox-component, nbf__radio-button-group, nbf__textarea-component, nbf__dropdown, nbf__dropdown-button, nbf__dropdown-content" })))), this.enableUserFeedback && n("button-component", { id: "report-issue", variant: "basic", onClick: (l) => this.onFeedbackClick(l) }, n("feedback-icon", null)), this.showFeedbackModal && n("nylas-feedback-form", null)) : n(w, null, n("slot", null));
  }
  get host() {
    return K(this);
  }
  static get watchers() {
    return {
      bookingInfo: ["bookingInfoChanged"],
      rescheduleBookingRef: ["rescheduleBookingRefChanged"],
      cancelBookingRef: ["cancelBookingRefChanged"],
      organizerConfirmationBookingRef: ["organizerConfirmationBookingRefChanged"],
      localization: ["localizationChanged"],
      themeConfig: ["themeConfigChanged"]
    };
  }
};
ce.style = le;
export {
  ce as nylas_scheduling
};
