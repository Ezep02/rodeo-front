import { r as q, h as e, c as k, d as u, n as St, i as d, o as tt, H as Tt, g as Ft, F as Ut } from "./index-cd93b584.js";
import { R as Bt } from "./register-component-a169494c-62768a00.js";
import { D as Lt } from "./constants-91d76d21-1638ead6.js";
import { i as Rt, a as At, c as jt, b as $t, f as Jt } from "./feedbackSync-b5d35a5b-20032e5d.js";
import "react";
import "react-dom";
const Vt = ".sc-google-logo-icon-h{display:flex}", Zt = Vt, Gt = class {
  constructor(t) {
    q(this, t), this.width = "24", this.height = "24";
  }
  render() {
    return e("svg", { key: "3ca599e18ce6095779ded84b497b5296f17c10d2", width: this.width, height: this.height, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, e("g", { key: "88b3f5f83ede3ed85a770467f48ad836405b990a", "clip-path": "url(#clip0_959_12452)" }, e("path", { key: "4e15a1ff9fd5ed8752a01653cc0313519c3979ca", d: "M23.745 12.27C23.745 11.48 23.675 10.73 23.555 10H12.255V14.51H18.725C18.435 15.99 17.585 17.24 16.325 18.09V21.09H20.185C22.445 19 23.745 15.92 23.745 12.27Z", fill: "#4285F4" }), e("path", { key: "1d5b9ac448e9067003693fc996d84e4a6a6fb424", d: "M12.255 24C15.495 24 18.205 22.92 20.185 21.09L16.325 18.09C15.245 18.81 13.875 19.25 12.255 19.25C9.12504 19.25 6.47505 17.14 5.52505 14.29H1.54504V17.38C3.51504 21.3 7.56504 24 12.255 24Z", fill: "#34A853" }), e("path", { key: "60c45db031014875d1f0c51e4d96d233ff4d739e", d: "M5.52501 14.2901C5.27501 13.5701 5.145 12.8001 5.145 12.0001C5.145 11.2001 5.28501 10.4301 5.52501 9.71012V6.62012H1.545C0.725004 8.24012 0.255005 10.0601 0.255005 12.0001C0.255005 13.9401 0.725004 15.7601 1.545 17.3801L5.52501 14.2901Z", fill: "#FBBC05" }), e("path", { key: "c11e6c275b10368721e0d520d98a8f57bc38acc5", d: "M12.255 4.75C14.025 4.75 15.605 5.36 16.855 6.55L20.275 3.13C18.205 1.19 15.495 0 12.255 0C7.56504 0 3.51504 2.7 1.54504 6.62L5.52505 9.71C6.47505 6.86 9.12504 4.75 12.255 4.75Z", fill: "#EA4335" })), e("defs", { key: "9ed8d3df0e31854c32fe754fc79877ca48ea5ab9" }, e("clipPath", { key: "7b54dd3d596dc38980237b59f21184a00316760f", id: "clip0_959_12452" }, e("rect", { key: "6632bab4f2645c9a5dc9f3f000a7b537d5b09f22", width: 24, height: 24, fill: "white" }))));
  }
};
Gt.style = Zt;
const Wt = ".sc-microsoft-logo-icon-h{display:flex}", qt = Wt, Kt = class {
  constructor(t) {
    q(this, t), this.width = "22", this.height = "22";
  }
  render() {
    return e("svg", { key: "970afb49d36b25194c649b69ca0f136a588c20a4", width: this.width, height: this.height, viewBox: "0 0 22 22", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, e("path", { key: "b3f4f95ead19fff86c4026bcf226a31a22b9c09a", d: "M0.043457 0.043457H10.4782V10.4782H0.043457V0.043457Z", fill: "#F35325" }), e("path", { key: "425e0c099da7b5e3637665f2b9240aab9dd43589", d: "M11.5217 0.043457H21.9565V10.4782H11.5217V0.043457Z", fill: "#81BC06" }), e("path", { key: "2f531126f18dd92603d2caaa31dfaf8a3dac3c9f", d: "M0.043457 11.5217H10.4782V21.9565H0.043457V11.5217Z", fill: "#05A6F0" }), e("path", { key: "b500f059a84c5223d1688410bc8378e02fc87156", d: "M11.5217 11.5217H21.9565V21.9565H11.5217V11.5217Z", fill: "#FFBA08" }));
  }
};
Kt.style = qt;
var r;
(function(t) {
  t.EventInfo = "eventInfo", t.Availability = "availability", t.BookingOptions = "bookingOptions", t.Communications = "communications", t.Participants = "participants", t.BookingForm = "bookingForm", t.PageStyles = "pageStyles";
})(r || (r = {}));
function Qt({ id: t, formState: a, activeTab: n, i18next: i }, o) {
  return e(
    Ut,
    null,
    e(
      "div",
      { key: `event-info-${t}`, class: { hide: n !== r.EventInfo } },
      e(
        "nylas-event-info",
        null,
        e(
          "div",
          { slot: "inputs" },
          e("nylas-event-title", { name: "title", exportparts: "net, net__title, net__dropdown-content" }),
          e("nylas-event-duration", { name: "duration", exportparts: "ned, ned__dropdown, ned__dropdown-button, ned__dropdown-content, ned__input_dropdown, ned__input_dropdown-input, ned__input_dropdown-content" }),
          e("nylas-event-location", { name: "location", exportparts: "nel, nel__location, nel__dropdown, nel__dropdown-button, nel__dropdown-content" }),
          e("nylas-event-description", { name: "description", exportparts: "nedesc, nedesc__textarea" })
        )
      )
    ),
    e(
      "div",
      { key: `availability-${t}`, class: { hide: n !== r.Availability } },
      e("nylas-participant-booking-calendars", { participants: a.participants, name: "participant-booking-calendars", exportparts: "npbc, npbc__header, npbc__content, npbc__participant-container, npbc__participant-title" }),
      e("nylas-connected-calendars", { participants: a.participants, name: "connected-calendars", exportparts: "nccals, nccals__header, nccals__content, nccals__container, nccals__title, nccals__toggle-container, npbc__participant-toggle-container" }),
      e("nylas-availability-picker", { name: "availability", exportparts: "nap, nap__header, nap__select-timezone, nap__select-timezone-button, nap__select-timezone-dropdown-content, nap__availability, nap__day, nap__time-ranges, nap__time-range, nap__add-time-range, nap__time-picker-container, nap__time-picker-input, nap__time-picker-times" })
    ),
    e(
      "div",
      { key: `booking-options-${t}`, class: { hide: n !== r.BookingOptions } },
      e("nylas-scheduling-method", { name: "availability-method", readOnly: !0, exportparts: "nsm, nsm__header, nsm__input-label, nsm__dropdown, nsm__dropdown-button, nsm__dropdown-content" }),
      e(
        "nylas-custom-booking-flow",
        { exportparts: "ncbflow, ncbflow__header, ncbflow__title, ncbflow__content" },
        e(
          "div",
          { slot: "inputs" },
          e("nylas-booking-confirmation-type", { name: "confirmation-type", exportparts: "nbct, nbct__header, nbct__dropdown, nbct__dropdown-button, nbct__dropdown-content" }),
          e("nylas-booking-confirmation-redirect", { name: "confirmation-redirect", exportparts: "nbcr, nbcr__header, nbcr__dropdown, nbcr__dropdown-button, nbcr__dropdown-content, nbcr__input-textfield" })
        )
      ),
      e("nylas-buffer-time", { name: "buffer-time", exportparts: "nbt, nbt__header, nbt__body, nbt__dropdown-before, nbt__dropdown-button-before, nbt__dropdown-content-before, nbt__dropdown-after, nbt__dropdown-button-after, nbt__dropdown-content-after, nbt__preview" }),
      e(
        "nylas-event-limits",
        null,
        e(
          "div",
          { slot: "inputs" },
          e("nylas-min-booking-notice", { name: "min-booking-notice", exportparts: "nmbn, nmbn__number-dropdown, nmbn__number-dropdown-button, nmbn__number-dropdown-content, nmbn__period-dropdown, nmbn__period-dropdown-button, nmbn__period-dropdown-content" }),
          e("nylas-limit-future-bookings", { name: "limit-future-bookings", exportparts: "nlfb, nlfb__number-dropdown, nlfb__number-dropdown-button, nlfb__number-dropdown-content, nlfb__period-dropdown, nlfb__period-dropdown-button, nlfb__period-dropdown-content" }),
          e("nylas-min-cancellation-notice", { name: "min-cancellation-notice", exportparts: "nmcn, nmcn__number-dropdown, nmcn__number-dropdown-button, nmcn__number-dropdown-content, nmcn__period-dropdown, nmcn__period-dropdown-button, nmcn__period-dropdown-content" }),
          e("nylas-cancellation-policy", { name: "cancellation-policy", exportparts: "ncpolicy, ncpolicy__textarea" })
        )
      ),
      e("nylas-timeslot-interval", { name: "timeslot-interval", exportparts: "nti, nti__header, nti__input-label, nti__dropdown, nti__dropdown-button, nti__dropdown-content" }),
      e("nylas-customize-booking-settings", { name: "customize-booking-settings", exportparts: "ncbs, ncbs__header, ncbs__settings, ncbs__settings-div, ncbs__additional_guests, ncbs__cancellation_options, ncbs__rescheduling_options" })
    ),
    e(
      "div",
      { key: `communications-${t}`, class: { hide: n !== r.Communications } },
      e(
        "div",
        { class: "tab-header" },
        e("h3", null, i.t("eventCommunicationsTitle")),
        e("p", null, i.t("eventCommunicationsDescription"))
      ),
      e("nylas-confirmation-email", { name: "confirmation-email-template", exportparts: "nce, nce__tab-heading, nce__header, nce__body, nce__confirmation-email-toggle--container, nce__summary, nce__reminder-input_dropdown, nce__reminder-input_dropdown-input, nce__reminder-input_dropdown-content" }),
      e("nylas-reminder-emails", { name: "reminder-emails", exportparts: "nre, nre__tab-heading, nre__header, nre__body, nre__confirmation-email-toggle--container, nre__summary, nrt, nrt__number-dropdown, nrt__number-dropdown-button, nrt__number-dropdown-content, nrt__period-dropdown, nrt__period-dropdown-button, nrt__period-dropdown-content, nrt__time-period-selector" })
    ),
    e(
      "div",
      { key: `participants-${t}`, class: { hide: n !== r.Participants } },
      e("nylas-additional-participants", { name: "participants", exportparts: "nap, nap__title, nap__subtitle, nap__content, nap__input_group, nap__input_wrapper, nap__input, nap__remove-participant" }),
      e("nylas-participants-custom-availability", { participants: a.participants, name: "participant-custom-availability", exportparts: "npca, npca__header, npca__content, npca__participant-container, npca__participant-title, npca__participant-toggle--container, npca__toggle-label, npca__toggle-input, npca__toggle-slider" })
    ),
    e(
      "div",
      { key: `page-styles-${t}`, class: { hide: n !== r.PageStyles } },
      e("nylas-custom-event-slug", { name: "custom-event-slug", exportparts: "nces, nces__body, nces__header, nces__drawer-toggle--container, nces__input-textfield" }),
      e("nylas-page-name", { name: "page-name", exportparts: "npn, npn__body, npn__header, npn__drawer-toggle--container, npn__input-textfield" }),
      e("nylas-page-styling", { name: "page-styling", exportparts: "nps, nps__header, nps__drawer-toggle--container, nps__body, nps__title-input-textfield, nps__company-logo-input-textfield, nps__color-picker, nps__color-picker-button, nps__color-picker-button-label, nps__color-picker-selected-label, nps__submit-button-label-input-textfield, nps__message-textarea" }, o)
    ),
    e(
      "div",
      { key: `booking-form-${t}`, class: { hide: n !== r.BookingForm } },
      e("nylas-booking-form-config", { name: "additional-fields", exportparts: "nbfc, nbfc__header, nbfc__add_field, nbfc__add_field-button, nbfc__add_field-content, nbfc__additional_fields, nbfc__form-field, nbfc__form-field-header, nbfc__form-field-content" })
    )
  );
}
const Xt = '.sc-nylas-editor-tabs-h{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:"Inter", sans-serif}.scheduler-editor.sc-nylas-editor-tabs{display:flex;flex-direction:column;height:inherit}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{height:calc(100% - 80px);display:grid;grid-template-columns:minmax(224px, 25%) 1fr}@media screen and (max-width: 768px){.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs{display:table-column-group;height:auto}}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs{display:flex;flex-direction:column;border-right:1px solid var(--nylas-base-200);background-color:var(--nylas-base-25)}@media screen and (max-width: 768px){.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs{border-right:none}}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs{display:flex;align-items:center;text-align:left;gap:0.5rem;padding:0.5rem 1rem;color:var(--nylas-base-900);background:var(--nylas-base-0);border:none;height:56px;font-family:var(--nylas-font-family);font-size:16px;font-weight:500;line-height:24px;cursor:pointer}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs:not(:first-of-type){margin-top:0.25rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.sc-nylas-editor-tabs:last-of-type{margin-bottom:0.25rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.active.sc-nylas-editor-tabs{font-weight:600;background:var(--nylas-base-0);color:var(--nylas-primary);border-left:4px solid var(--nylas-primary);box-shadow:0px 1px 2px 0px rgba(0, 0, 0, 0.0588235294);box-shadow:0px 1px 3px 0px rgba(0, 0, 0, 0.1019607843)}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tabs.sc-nylas-editor-tabs .tab.hide.sc-nylas-editor-tabs{display:none}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs{max-width:692px;overflow-y:auto;overflow-x:hidden}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .hide.sc-nylas-editor-tabs{display:none}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs{width:inherit}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-info.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs,.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs nylas-event-limits.sc-nylas-editor-tabs div[slot=inputs].sc-nylas-editor-tabs{display:flex;flex-direction:column;gap:1rem}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs{display:flex;flex-direction:column;margin:1rem 1rem 0.5rem;row-gap:4px}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs h3.sc-nylas-editor-tabs{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.scheduler-editor.sc-nylas-editor-tabs .form-contents.sc-nylas-editor-tabs .tab-content.sc-nylas-editor-tabs .tab-header.sc-nylas-editor-tabs p.sc-nylas-editor-tabs{margin:0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.footer.sc-nylas-editor-tabs{display:flex;justify-content:space-between;align-items:center;gap:1rem;min-height:80px;padding:0 1rem;border-top:1px solid var(--nylas-base-200)}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs{flex-direction:column;height:auto}}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .preview.sc-nylas-editor-tabs{margin-top:1rem;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{display:flex;justify-content:flex-end;align-items:center;justify-self:flex-end;gap:1rem}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs{flex-direction:column-reverse;width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.sc-nylas-editor-tabs{max-width:524px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.unsaved-changes.sc-nylas-editor-tabs{color:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.saved-changes.sc-nylas-editor-tabs{color:var(--nylas-success)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error.sc-nylas-editor-tabs{color:var(--nylas-error)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs p.error-full-width.sc-nylas-editor-tabs{max-width:660px}@media screen and (max-width: 768px){.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button-component.sc-nylas-editor-tabs{width:100%}}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs{background:var(--nylas-primary);color:var(--nylas-base-0);height:48px;border:none;border-radius:var(--nylas-border-radius-2x);font-size:16px;line-height:24px;padding:0 1rem;cursor:pointer;width:148px}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:hover{background:var(--nylas-base-600)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:active{background:var(--nylas-base-800)}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs:disabled{background:var(--nylas-base-300);cursor:not-allowed}.footer.sc-nylas-editor-tabs .buttons.sc-nylas-editor-tabs button.sc-nylas-editor-tabs span.sc-nylas-editor-tabs{display:flex;align-items:center;justify-content:center;gap:0.5rem}button-component#report-issue.sc-nylas-editor-tabs{width:auto}nylas-feedback-form.sc-nylas-editor-tabs{position:absolute;top:0;height:100%;width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(0, 0, 0, 0.6);z-index:2;border-radius:inherit}', Yt = Xt;
var te = function(t, a, n, i) {
  var o = arguments.length, s = o < 3 ? a : i === null ? i = Object.getOwnPropertyDescriptor(a, n) : i, b;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    s = Reflect.decorate(t, a, n, i);
  else
    for (var l = t.length - 1; l >= 0; l--)
      (b = t[l]) && (s = (o < 3 ? b(s) : o > 3 ? b(a, n, s) : b(a, n)) || s);
  return o > 3 && s && Object.defineProperty(a, n, s), s;
}, X = function(t, a) {
  if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
    return Reflect.metadata(t, a);
};
const Pt = class {
  constructor(t) {
    q(this, t), this.schedulerConfigChanged = k(this, "schedulerConfigChanged", 7), this.schedulerConfigCreated = k(this, "schedulerConfigCreated", 7), this.cancelButtonClick = k(this, "cancelButtonClick", 7), this.formSubmitted = k(this, "formSubmitted", 7), this.previewButtonClicked = k(this, "previewButtonClicked", 7), this.schedulerEditorFormUpdated = k(this, "schedulerEditorFormUpdated", 7), this.formSubmissionHandler = async (a) => {
      var et, at, nt, it, st, ot, rt, lt, dt, ct, bt, ht, ut, pt, mt, ft, yt;
      a.preventDefault();
      const n = await this.formSubmitted.emit();
      if (u("[nylas-editor-tabs]", "formSubmissionHandler", n), !this.formRef.checkValidity() || n.defaultPrevented) {
        this.error = this.formRef.validationMessage || "Please fix the form errors.";
        return;
      }
      this.isLoading = !0, this.hasUnsavedChanges = !1;
      const o = this.updateFormState();
      u("[nylas-editor-tabs]", "formState", o);
      const { title: s, description: b, duration: l, availability: h, bookingCalendar: y, location: L, bookingType: T, buffer: O, availableDaysInFuture: D, minCancellationNotice: I, minBookingNotice: M, cancellationPolicy: N, timeslotInterval: C, additionalGuestsHidden: z, hideCancellationOptions: U, hideReschedulingOptions: R, participants: w, participantOpenHours: m, additionalFields: A, participantCalendars: g, conferencing: j, participantBookingCalendars: f, reminders: $, emailTemplate: J, redirectUrl: V, availabilityMethod: P, slug: Z, appearance: G, name: W } = o, p = ((at = (et = this.selectedConfiguration) == null ? void 0 : et.participants) == null ? void 0 : at.find((c) => c.is_organizer)) || (w == null ? void 0 : w.find((c) => c.is_organizer)), S = g && (p != null && p.email) ? g[p == null ? void 0 : p.email] : [], _ = ((nt = p == null ? void 0 : p.booking) == null ? void 0 : nt.calendar_id) || y, v = l ? parseInt(l) : 30, x = w && (w == null ? void 0 : w.length) > 0 ? w : [
        {
          name: (p == null ? void 0 : p.name) ?? ((it = this.currentUser) == null ? void 0 : it.name) ?? "",
          email: (p == null ? void 0 : p.email) ?? ((st = this.currentUser) == null ? void 0 : st.email) ?? "",
          is_organizer: !0,
          timezone: (h == null ? void 0 : h.timezone) ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
          availability: {
            calendar_ids: y && y !== "" ? [y] : ["primary"],
            open_hours: []
          },
          booking: {
            calendar_id: y && y !== "" ? y : "primary"
          }
        }
      ], E = {
        ...((ot = this.selectedConfiguration) == null ? void 0 : ot.id) && { id: this.selectedConfiguration.id },
        version: ((rt = this.selectedConfiguration) == null ? void 0 : rt.version) ?? "1.0.0",
        slug: Z,
        name: W,
        availability: {
          duration_minutes: v,
          interval_minutes: (C == null ? void 0 : C.interval) ?? v,
          round_to: C == null ? void 0 : C.roundTo,
          availability_rules: {
            availability_method: P || (((ct = (dt = (lt = this.selectedConfiguration) == null ? void 0 : lt.availability) == null ? void 0 : dt.availability_rules) == null ? void 0 : ct.availability_method) ?? "collective"),
            buffer: O || { before: 0, after: 0 },
            default_open_hours: (h == null ? void 0 : h.openHours) ?? ((ut = (ht = (bt = this.selectedConfiguration) == null ? void 0 : bt.availability) == null ? void 0 : ht.availability_rules) == null ? void 0 : ut.default_open_hours) ?? Lt,
            round_robin_group_id: ((ft = (mt = (pt = this.selectedConfiguration) == null ? void 0 : pt.availability) == null ? void 0 : mt.availability_rules) == null ? void 0 : ft.round_robin_group_id) ?? ""
          }
        },
        participants: [
          ...x ? x.map((c) => {
            var gt, _t, vt, wt, kt, Ct;
            let B = (h == null ? void 0 : h.timezone) ?? Intl.DateTimeFormat().resolvedOptions().timeZone;
            if ((gt = m == null ? void 0 : m[c.email]) != null && gt.length && (B = (vt = (_t = m == null ? void 0 : m[c.email]) == null ? void 0 : _t[0]) == null ? void 0 : vt.timezone), c.is_organizer) {
              const xt = f != null && f[c.email] ? f == null ? void 0 : f[c.email] : _ || "primary", Q = g != null && g[c.email] ? g == null ? void 0 : g[c.email] : S != null && S.length ? S : ["primary"], zt = Q.length === 1 && Q[0] === "primary";
              return {
                name: c.name ?? "",
                email: c.email,
                is_organizer: !0,
                timezone: B,
                availability: {
                  calendar_ids: zt ? [xt] : Q,
                  open_hours: (m == null ? void 0 : m[c.email]) ?? ((wt = c.availability) == null ? void 0 : wt.open_hours) ?? []
                },
                booking: {
                  calendar_id: xt
                }
              };
            }
            const H = f != null && f[c.email] ? { calendar_id: f == null ? void 0 : f[c.email] } : (c == null ? void 0 : c.booking) ?? void 0, K = (g == null ? void 0 : g[c.email]) ?? ((kt = c.availability) == null ? void 0 : kt.calendar_ids) ?? ["primary"], Nt = K.length === 1 && K[0] === "primary";
            return {
              ...c,
              timezone: B,
              availability: c.availability ? {
                calendar_ids: Nt && typeof H < "u" ? [H == null ? void 0 : H.calendar_id] : K,
                open_hours: (m == null ? void 0 : m[c.email]) ?? ((Ct = c.availability) == null ? void 0 : Ct.open_hours) ?? []
              } : void 0,
              booking: H
            };
          }) : []
        ],
        event_booking: {
          title: (s == null ? void 0 : s.toString()) ?? "",
          description: (b == null ? void 0 : b.toString()) ?? "",
          location: (L == null ? void 0 : L.toString()) ?? "",
          booking_type: (T == null ? void 0 : T.toString()) ?? "booking",
          timezone: (h == null ? void 0 : h.timezone) ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
          conferencing: j,
          reminders: $
        },
        scheduler: {
          cancellation_policy: N ?? "",
          available_days_in_future: D ?? 30,
          min_cancellation_notice: I ?? 0,
          min_booking_notice: M ?? 60,
          hide_additional_guests: z ?? !1,
          hide_cancellation_options: U ?? !1,
          hide_rescheduling_options: R ?? !1,
          additional_fields: A,
          email_template: J,
          confirmation_redirect_url: V
        },
        appearance: G
      }, Ht = St(this.selectedConfiguration, E || {}), F = this.action === "create" ? Ht : E;
      this.isConfigRoundRobin(F) && (F.participants = F.participants.map((c) => ({ ...c, is_organizer: void 0 })));
      const Ot = (c) => {
        this.isLoading = !1, this.changesSaved = !0, setTimeout(() => {
          this.changesSaved = !1;
        }, 5e3);
      }, Dt = this.checkForBookingFormErrors(F), It = ((yt = this.configurations) == null ? void 0 : yt.find((c) => {
        var B;
        return c.id === ((B = this.selectedConfiguration) == null ? void 0 : B.id);
      })) || {}, Mt = this.checkForOrganizerConfirmationError(St(F, It));
      Dt || Mt || this.schedulerConfigChanged.emit({ config: F, resetLoadingState: Ot, action: this.action, host: this.host });
    }, this.isConfigRoundRobin = (a) => {
      var n, i, o, s;
      return ((i = (n = a == null ? void 0 : a.availability) == null ? void 0 : n.availability_rules) == null ? void 0 : i.availability_method) === "max-availability" || ((s = (o = a.availability) == null ? void 0 : o.availability_rules) == null ? void 0 : s.availability_method) === "max-fairness";
    }, this.checkForOrganizerConfirmationError = (a) => {
      var b, l;
      let n = !1, i = "";
      const o = ((b = a.event_booking) == null ? void 0 : b.booking_type) === "organizer-confirmation", s = (l = a.scheduler) == null ? void 0 : l.organizer_confirmation_url;
      return o && !s && (i += "Organizer confirmation URL is required when using organizer confirmation booking type.", n = !0), n && (this.isLoading = !1, this.host.setError(new Error(i))), n;
    }, this.checkForBookingFormErrors = (a) => {
      var s;
      let n = !1, i = "";
      const o = (s = a.scheduler) == null ? void 0 : s.additional_fields;
      return o && (i = "Booking form error: ", Object.entries(o).forEach((b) => {
        const l = b[1];
        if (l.label === "") {
          i += `Label is required for field of type ${l.type}.`, n = !0;
          return;
        }
        if (l.options) {
          for (const h of l.options)
            if (h.trim() === "") {
              i += `Empty option detected inside ${l.label} of type ${l.type}.`, n = !0;
              break;
            }
        }
      })), n && (this.isLoading = !1, this.host.setError(new Error(i))), n;
    }, this.calendars = void 0, this.selectedConfiguration = void 0, this.configurations = void 0, this.currentUser = void 0, this.schedulerPreviewLink = "", this.mode = "app", this.hideEditorTabs = [], this.enableUserFeedback = !0, this.selectedLanguage = void 0, this.action = "create", this.showFeedbackModal = !1, this.activeTab = r.EventInfo, this.isLoading = !1, this.hasUnsavedChanges = !1, this.changesSaved = !1, this.formState = {}, this.error = "";
  }
  configChangedHandler(t) {
    u("[nylas-editor-tabs]", "configChangedHandler", t, this.selectedConfiguration), this.formState = {
      ...this.getFormStateFromConfig(t)
    }, t != null && t.id ? this.action = "edit" : this.action = "create";
  }
  userChangedHandler(t) {
    u("[nylas-editor-tabs]", "userChangedHandler", t), t && (this.formState = {
      ...this.getFormStateFromConfig(this.selectedConfiguration)
    });
  }
  selectedLanguageChangedHandler(t, a) {
    t !== a && d.changeLanguage(t);
  }
  async schedulerConfigCreatedEventHandler(t) {
    return this.schedulerConfigCreated.emit(t);
  }
  async setError(t) {
    this.error = t.message;
  }
  connectedCallback() {
    u("[nylas-editor-tabs]", "connectedCallback");
  }
  componentWillLoad() {
    u("[nylas-editor-tabs]", "componentWillLoad"), this.formState = this.getFormStateFromConfig(this.selectedConfiguration);
  }
  componentDidLoad() {
    var a, n;
    u("[nylas-editor-tabs]", "componentDidLoad"), this.enableUserFeedback && !Rt() && At({
      dsn: "https://9d5731f1c77ca84c9ed3fb9b3ccf7ee1@o74852.ingest.us.sentry.io/4507889638178816",
      release: "1.3.4",
      integrations: (i) => [
        ...i.filter((o) => !1),
        Jt({
          colorScheme: "system",
          autoInject: !1
        })
      ],
      autoSessionTracking: !1,
      beforeSend: () => null
    }), (a = this.selectedConfiguration) != null && a.id && this.configChangedHandler(this.selectedConfiguration);
    const t = (n = this.host.querySelector("button.tab:not(.hide)")) == null ? void 0 : n.name;
    t && (this.activeTab = t);
  }
  disconnectedCallback() {
    u("[nylas-editor-tabs]", "disconnectedCallback");
  }
  handleValueChanged(t) {
    u("[nylas-editor-tabs]", "handleValueChanged", t);
    const { name: a, value: n } = t.detail;
    this.setFormState(n, a), this.formState = { ...this.formState }, this.hasUnsavedChanges = !0, this.error = "", this.schedulerEditorFormUpdated.emit({
      value: t.detail.value,
      name: t.detail.name
    });
  }
  feedbackModalClosedHandler() {
    this.showFeedbackModal = !1;
  }
  feedbackSubmittedHandler(t) {
    var i, o;
    const n = {
      eventId: jt("Scheduler Editor User Feedback"),
      message: t.detail.feedback
    };
    $t(n, {
      includeReplay: !0,
      captureContext: {
        tags: {
          "nylas-web-element": "nylas-scheduler-editor",
          "nylas-web-element-version": "1.3.4"
        },
        extra: {
          configId: (i = this.selectedConfiguration) == null ? void 0 : i.id,
          slug: (o = this.selectedConfiguration) == null ? void 0 : o.slug
        }
      }
    }), this.showFeedbackModal = !1;
  }
  getFormStateFromConfig(t) {
    var n, i, o, s, b, l, h, y, L, T, O, D, I, M, N, C, z, U, R, w, m, A, g, j, f, $, J, V, P, Z, G, W, p, S;
    let a = (n = t == null ? void 0 : t.participants) == null ? void 0 : n.find((_) => _.is_organizer);
    return !a && ((o = (i = t == null ? void 0 : t.availability) == null ? void 0 : i.availability_rules) == null ? void 0 : o.availability_method) !== "collective" && (a = (s = t == null ? void 0 : t.participants) == null ? void 0 : s.find((_) => {
      var v;
      return _.email === ((v = this.currentUser) == null ? void 0 : v.email);
    }), a && (a.is_organizer = !0)), t != null && t.appearance && console.info("Appearance settings have been returned from the given configuration; please remember to grab them from the configSettingsLoaded event and apply them as desired."), {
      title: ((b = t == null ? void 0 : t.event_booking) == null ? void 0 : b.title) ?? "",
      description: ((l = t == null ? void 0 : t.event_booking) == null ? void 0 : l.description) ?? "",
      duration: ((y = (h = t == null ? void 0 : t.availability) == null ? void 0 : h.duration_minutes) == null ? void 0 : y.toString()) ?? "30",
      availability: {
        timezone: ((L = t == null ? void 0 : t.event_booking) == null ? void 0 : L.timezone) ?? Intl.DateTimeFormat().resolvedOptions().timeZone,
        openHours: ((O = (T = t == null ? void 0 : t.availability) == null ? void 0 : T.availability_rules) == null ? void 0 : O.default_open_hours) ?? Lt
      },
      additionalFields: ((D = t == null ? void 0 : t.scheduler) == null ? void 0 : D.additional_fields) ?? {},
      conferencing: ((I = t == null ? void 0 : t.event_booking) == null ? void 0 : I.conferencing) ?? {},
      calendarIds: ((M = a == null ? void 0 : a.availability) == null ? void 0 : M.calendar_ids) ?? [],
      participants: (t == null ? void 0 : t.participants) ?? [],
      bookingCalendar: ((N = a == null ? void 0 : a.booking) == null ? void 0 : N.calendar_id) ?? (a == null ? void 0 : a.email) ?? "",
      location: ((C = t == null ? void 0 : t.event_booking) == null ? void 0 : C.location) ?? "",
      bookingType: ((z = t == null ? void 0 : t.event_booking) == null ? void 0 : z.booking_type) ?? "booking",
      buffer: ((R = (U = t == null ? void 0 : t.availability) == null ? void 0 : U.availability_rules) == null ? void 0 : R.buffer) ?? { before: 0, after: 0 },
      cancellationPolicy: ((w = t == null ? void 0 : t.scheduler) == null ? void 0 : w.cancellation_policy) ?? "",
      availableDaysInFuture: ((m = t == null ? void 0 : t.scheduler) == null ? void 0 : m.available_days_in_future) ?? 30,
      minCancellationNotice: ((A = t == null ? void 0 : t.scheduler) == null ? void 0 : A.min_cancellation_notice) ?? 0,
      minBookingNotice: ((g = t == null ? void 0 : t.scheduler) == null ? void 0 : g.min_booking_notice) ?? 60,
      timeslotInterval: {
        interval: ((j = t == null ? void 0 : t.availability) == null ? void 0 : j.interval_minutes) ?? ((f = t == null ? void 0 : t.availability) == null ? void 0 : f.duration_minutes),
        roundTo: ($ = t == null ? void 0 : t.availability) == null ? void 0 : $.round_to
      },
      additionalGuestsHidden: ((J = t == null ? void 0 : t.scheduler) == null ? void 0 : J.hide_additional_guests) ?? !1,
      hideCancellationOptions: ((V = t == null ? void 0 : t.scheduler) == null ? void 0 : V.hide_cancellation_options) ?? !1,
      hideReschedulingOptions: ((P = t == null ? void 0 : t.scheduler) == null ? void 0 : P.hide_rescheduling_options) ?? !1,
      participantBookingCalendars: ((Z = t == null ? void 0 : t.participants) == null ? void 0 : Z.reduce((_, v) => {
        var x, E;
        return (x = v.booking) != null && x.calendar_id && (_[v.email] = (E = v.booking) == null ? void 0 : E.calendar_id), _;
      })) ?? {},
      participantCalendars: ((G = t == null ? void 0 : t.participants) == null ? void 0 : G.reduce((_, v) => {
        var x;
        return _[v.email] = (x = v.availability) == null ? void 0 : x.calendar_ids, _;
      }, {})) ?? {},
      reminders: (W = t == null ? void 0 : t.event_booking) == null ? void 0 : W.reminders,
      emailTemplate: (p = t == null ? void 0 : t.scheduler) == null ? void 0 : p.email_template,
      redirectUrl: (S = t == null ? void 0 : t.scheduler) == null ? void 0 : S.confirmation_redirect_url,
      slug: t == null ? void 0 : t.slug,
      appearance: t == null ? void 0 : t.appearance,
      name: t == null ? void 0 : t.name
    };
  }
  setFormState(t, a) {
    switch (a) {
      case "title":
        this.formState.title = t.toString();
        break;
      case "description":
        this.formState.description = t.toString();
        break;
      case "duration":
        this.formState.duration = t.toString();
        break;
      case "availability":
        this.formState.availability = JSON.parse(t.toString());
        break;
      case "participants":
        this.formState.participants = JSON.parse(t.toString());
        break;
      case "booking-calendar":
        this.formState.bookingCalendar = t.toString();
        break;
      case "participant-booking-calendars":
        this.formState.participantBookingCalendars = JSON.parse(t.toString());
        break;
      case "location":
        this.formState.location = t.toString();
        break;
      case "conference":
        this.formState.conferencing = JSON.parse(t.toString());
        break;
      case "confirmation-type":
        this.formState.bookingType = t.toString();
        break;
      case "buffer-time":
        this.formState.buffer = JSON.parse(t.toString());
        break;
      case "limit-future-bookings":
        this.formState.availableDaysInFuture = parseInt(t.toString());
        break;
      case "min-cancellation-notice":
        this.formState.minCancellationNotice = parseInt(t.toString());
        break;
      case "min-booking-notice":
        this.formState.minBookingNotice = parseInt(t.toString());
        break;
      case "cancellation-policy":
        this.formState.cancellationPolicy = t.toString();
        break;
      case "timeslot-interval":
        this.formState.timeslotInterval = JSON.parse(t.toString());
        break;
      case "customize-booking-settings": {
        const n = JSON.parse(t.toString());
        this.formState.additionalGuestsHidden = n.additionalGuestsHidden, this.formState.hideCancellationOptions = n.hideCancellationOptions, this.formState.hideReschedulingOptions = n.hideReschedulingOptions;
        break;
      }
      case "participant-custom-availability": {
        const n = JSON.parse(t.toString());
        this.formState.participantOpenHours = n;
        break;
      }
      case "additional-fields":
        this.formState.additionalFields = t;
        break;
      case "connected-calendars":
        this.formState.participantCalendars = JSON.parse(t.toString());
        break;
      case "confirmation-email-template":
        this.formState.emailTemplate = JSON.parse(t.toString());
        break;
      case "reminder-overrides":
        this.formState.reminders = JSON.parse(t.toString());
        break;
      case "confirmation-redirect":
        this.formState.redirectUrl = t.toString();
        break;
      case "availability-method":
        this.formState.availabilityMethod = t.toString();
        break;
      case "custom-event-slug":
        console.debug("custom-event-slug", t), this.formState.slug = JSON.parse(t.toString());
        break;
      case "page-styling":
        this.formState.appearance = JSON.parse(t.toString());
        break;
      case "page-name":
        this.formState.name = JSON.parse(t.toString());
        break;
    }
    this.schedulerEditorFormUpdated.emit({
      value: t,
      name: a
    });
  }
  updateFormState() {
    return new FormData(this.formRef).forEach((a, n) => {
      this.setFormState(a, n);
    }), this.formState = { ...this.formState }, this.formState;
  }
  setActiveTab(t, a) {
    t.preventDefault(), this.updateFormState(), this.activeTab = a;
  }
  hideTab(t) {
    var a;
    return ((a = this.hideEditorTabs) == null ? void 0 : a.includes(t)) || !1;
  }
  onFeedbackClick(t) {
    t.preventDefault(), this.showFeedbackModal = !0;
  }
  render() {
    var t, a;
    return u("[nylas-editor-tabs]", "render", this.formState), e(Tt, { key: "afd735b73e35d8abfa9c83d21ab8307b07df48e6" }, e("form", { key: "7d7093deb88e6ec8e636092e4bcbadf03916a994", onSubmit: this.formSubmissionHandler, class: "scheduler-editor", ref: (n) => this.formRef = n, noValidate: !0 }, this.mode === "app" ? e("div", { class: "form-contents", part: "editor__form-contents net__form-contents" }, e("div", { class: "tabs", part: "editor__tabs net__tabs" }, e("button", { name: r.EventInfo, class: { tab: !0, active: this.activeTab == r.EventInfo, hide: this.hideTab(r.EventInfo) }, part: "editortab__event-info net__tab-event-info", onClick: (n) => this.setActiveTab(n, r.EventInfo) }, e("calendar-info-icon", { width: "16", height: "16" }), d.t("eventInfoTab")), e("button", { name: r.Availability, class: { tab: !0, active: this.activeTab == r.Availability, hide: this.hideTab(r.Availability) }, part: "editortab__availability net__tab-availability", onClick: (n) => this.setActiveTab(n, r.Availability) }, e("calendar-patterns-icon", { width: "16", height: "16" }), d.t("availabilityTab")), e("button", { name: r.Participants, class: { tab: !0, active: this.activeTab == r.Participants, hide: this.hideTab(r.Participants) }, part: "editortab__participants net__tab-participants", onClick: (n) => this.setActiveTab(n, r.Participants) }, e("people-icon", { width: "16", height: "16" }), d.t("participantsTab")), e("button", { name: r.BookingOptions, class: { tab: !0, active: this.activeTab == r.BookingOptions, hide: this.hideTab(r.BookingOptions) }, part: "editortab__booking-options net__tab-booking-options", onClick: (n) => this.setActiveTab(n, r.BookingOptions) }, e("flow-icon", { width: "16", height: "16" }), d.t("bookingOptionsTab")), e("button", { name: r.BookingForm, class: { tab: !0, active: this.activeTab == "bookingForm", hide: this.hideTab(r.BookingForm) }, part: "editortab__booking-form net__tab-booking-form", onClick: (n) => this.setActiveTab(n, r.BookingForm) }, this.activeTab == r.BookingForm ? e("calendar-agenda-fill-icon", { width: "16", height: "16" }) : e("calendar-agenda-icon", { width: "16", height: "16" }), d.t("bookingFormTab")), e("button", { name: r.Communications, class: { tab: !0, active: this.activeTab == "communications", hide: this.hideTab(r.Communications) }, onClick: (n) => this.setActiveTab(n, r.Communications), part: "editortab__communications net__tab-communications" }, this.activeTab == r.Communications ? e("envelope-fill-icon", { width: "16", height: "16" }) : e("envelope-icon", { width: "16", height: "16" }), d.t("communicationsTab")), e("button", { name: r.PageStyles, class: { tab: !0, active: this.activeTab == "pageStyles", hide: this.hideTab(r.PageStyles) }, onClick: (n) => this.setActiveTab(n, r.PageStyles), part: "editortab__page-styles net__tab-page-styles" }, this.activeTab == r.PageStyles ? e("paintbrush-fill-icon", { width: "16", height: "16" }) : e("paintbrush-icon", { width: "16", height: "16" }), d.t("pageStylesTab"))), e("div", { class: "tab-content", part: "editor__tab-content net__tab-content" }, e(Qt, { formState: this.formState, activeTab: this.activeTab, currentUser: this.currentUser, calendars: this.calendars, id: ((t = this.selectedConfiguration) == null ? void 0 : t.id) ?? "new", i18next: d }))) : e("div", { class: "composable", key: (a = this.selectedConfiguration) == null ? void 0 : a.id }, e("slot", null)), e("div", { key: "d2d76b6b587c13a32dfc749f4fea4b47102923f0", class: "footer", part: "editor__footer net__footer" }, e("div", { key: "7714cacce55f8b8e06e60f289ef02fe8e336419c", class: "preview", part: "editor__footer-preview net__footer-preview" }, this.enableUserFeedback && e("button-component", { title: "Share your feedback", id: "report-issue", variant: "basic", onClick: (n) => this.onFeedbackClick(n) }, e("feedback-icon", null))), e("div", { key: "54d1b26ae9e1ffc22fbe679e40ad0ec40f4df3fb", class: "buttons", part: "editor__footer-buttons net__footer-buttons" }, e("p", { key: "e443a0cc63281f971bbdf7349e1adbb88abb42a9", class: {
      "unsaved-changes": this.hasUnsavedChanges && !this.changesSaved,
      "saved-changes": this.changesSaved,
      error: this.error !== "",
      "error-full-width": this.error !== "" && this.action === "create"
    } }, this.error !== "" ? this.error : "", this.error == "" && this.hasUnsavedChanges && !this.changesSaved ? "Unsaved changes" : this.error == "" && this.changesSaved ? "Changes saved!" : ""), this.schedulerPreviewLink !== "" && this.action === "edit" && e("button-component", { title: "Preview", type: "button", disabled: this.isLoading, clickHandler: (n) => {
      n.preventDefault(), this.previewButtonClicked.emit(this.host).defaultPrevented || window.open(tt(this.schedulerPreviewLink, this.selectedConfiguration), "_blank");
    }, variant: "basic" }, e("eye-icon", null)), e("button-component", { key: "057295595f302e2090a0136981a09546f6994c1c", type: "button", disabled: this.isLoading, clickHandler: (n) => {
      n.preventDefault(), this.cancelButtonClick.emit(), this.error = "";
    }, variant: "basic", part: "editor__footer-cancel net__footer-cancel" }, d.t("backButton")), e("button-component", { key: "18ba294735d5754526a3634f5c7dc7dfd87d1679", type: "submit", disabled: this.isLoading, part: "editor__footer-cta, net__footer-cta" }, this.isLoading ? e("span", null, d.t("savingButtonText"), e("loading-icon", null), " ") : this.action === "create" ? `${d.t("createButtonText")}` : `${d.t("saveChangesButtonText")}`)))), this.showFeedbackModal && e("nylas-feedback-form", null));
  }
  get host() {
    return Ft(this);
  }
  static get watchers() {
    return {
      selectedConfiguration: ["configChangedHandler"],
      currentUser: ["userChangedHandler"],
      selectedLanguage: ["selectedLanguageChangedHandler"]
    };
  }
};
te([
  Bt({
    name: "nylas-editor-tabs",
    stateToProps: /* @__PURE__ */ new Map([
      ["schedulerConfig.calendars", "calendars"],
      ["schedulerConfig.selectedConfiguration", "selectedConfiguration"],
      ["schedulerConfig.currentUser", "currentUser"],
      ["schedulerConfig.configurations", "configurations"],
      ["schedulerConfig.selectedLanguage", "selectedLanguage"]
    ]),
    eventToProps: {
      schedulerConfigChanged: async (t, a) => {
        const { resetLoadingState: n, host: i, action: o, config: s } = t.detail, b = (l) => {
          const [h, y] = l;
          !h && y ? i.setError(y) : h && !y && o === "create" && i.schedulerConfigCreatedEventHandler({ config: h }), n && n(t);
        };
        if (o === "edit") {
          const l = await a.schedulerConfig.updateConfiguration(s);
          b(l);
        } else {
          const l = await a.schedulerConfig.createConfiguration(s);
          b(l);
        }
      },
      cancelButtonClick: async (t, a) => {
        a.schedulerConfigStore.state.action = null;
      },
      previewButtonClicked: async (t, a) => {
        u("[nylas-editor-tabs]", "previewButtonClicked", a);
      },
      formSubmitted: async (t, a) => {
        u("[nylas-editor-tabs]", "formSubmitted", a);
      },
      schedulerEditorFormUpdated: async (t, a) => {
        u("[nylas-editor-tabs]", "schedulerEditorFormUpdated", t);
      },
      schedulerConfigCreated: async (t, a) => {
        u("[nylas-editor-tabs]", "schedulerConfigCreated", t);
      }
    },
    localPropsToProp: /* @__PURE__ */ new Map([
      ["schedulerPreviewLink", "schedulerPreviewLink"],
      ["enableUserFeedback", "enableUserFeedback"],
      ["hideEditorTabs", "hideEditorTabs"]
    ]),
    fireRegisterEvent: !0
  }),
  X("design:type", Function),
  X("design:paramtypes", []),
  X("design:returntype", void 0)
], Pt.prototype, "render", null);
Pt.style = Yt;
const ee = ':host{display:grid;grid-auto-flow:row;width:100%;font-family:inherit;font-optical-sizing:auto;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:"Inter", sans-serif}.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem;gap:1rem}@media screen and (max-width: 768px){.header{flex-direction:column;gap:0.5rem;align-items:unset}}.header h2{margin:0;font-size:1.25rem;color:var(--nylas-base-900);font-weight:600}.header p{margin:0;font-size:16px;color:var(--nylas-base-700)}.header .actions{justify-self:end}@media screen and (max-width: 768px){.header .actions{width:100%}}.configurations{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);background:var(--nylas-base-0);height:100%;display:flex;flex-direction:column;position:relative;overflow-y:hidden}.configurations .table-container{overflow-y:auto;flex:1}.configurations .table-container table{width:100%;border-spacing:0;border-collapse:collapse;font-family:inherit;height:max-content}.configurations .table-container table.no-configurations{height:100%}.configurations .table-container table tr{color:var(--nylas-base-800);border-bottom:1px solid var(--nylas-base-200);font-family:inherit}.configurations .table-container table tr.hide{display:none}.configurations .table-container table th{font-weight:600;text-transform:uppercase;font-size:14px;line-height:20px}.configurations .table-container table tr.no-configurations td>div{display:flex;height:100%;justify-content:center;align-items:center;flex-direction:column;padding:var(--nylas-border-radius-3x)}.configurations .table-container table tr.no-configurations td>div h3{margin:0 0 1rem 0;color:var(--nylas-base-700)}.configurations .table-container table tr.no-configurations td>div p{margin:0 0 1rem 0;color:var(--nylas-base-600)}.configurations .table-container table tr.no-configurations td>div calendar-icon{margin-bottom:1rem;color:var(--nylas-base-200)}.configurations .table-container table th,.configurations .table-container table td{text-align:left;padding:1rem;font-family:inherit}.configurations .table-container table .actions{display:flex;justify-content:flex-end;gap:1rem;text-align:right}@media screen and (max-width: 768px){.configurations .table-container table .actions{flex-direction:column;gap:0.5rem}}.configurations .table-container table .actions select-dropdown.last::part(sd_dropdown-content){bottom:54px}.configurations .table-container table .title{width:100%;max-width:300px}@media screen and (max-width: 768px){.configurations .table-container table .title{max-width:96px}}.configurations .table-container table .title div{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.configurations .table-container table .title div.config-event-title{font-weight:600}.configurations .table-container table .title div.config-event-description{font-size:0.75rem}.configurations .pagination{padding:1rem;position:sticky;top:100%;display:flex;justify-content:flex-end;gap:0.5rem;background:white;width:calc(100% - 2rem);z-index:2}.configurations .pagination td.arrows{display:flex;justify-content:flex-end;gap:0.5rem}.configurations .pagination button{display:flex;flex-direction:row;justify-content:center;align-items:center;height:3vh;width:3vh;min-width:3em;min-height:3em;cursor:pointer;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background-color:transparent;color:var(--nylas-base-800);cursor:pointer}.configurations .pagination button:hover:not(:disabled){border:1px solid var(--nylas-primary)}.configurations .pagination button:active{border:1px solid var(--nylas-base-800)}.configurations .pagination button:disabled{border:1px solid var(--nylas-base-100);background-color:transparent;color:var(--nylas-base-300);cursor:not-allowed}.configurations .pagination button.right{transform:rotate(180deg)}.error-container{margin-top:1.5rem}.error-container .error{color:var(--nylas-error);padding:0.5rem 0;margin:1rem 0 0}button-component#copy button{width:108px}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){display:block;height:48px;padding:0px 16px 8px}@media screen and (max-width: 768px){select-dropdown::part(sd_dropdown-button){width:92px}}select-dropdown::part(sd_dropdown-content){width:120px;right:0}select-dropdown::part(sd_dropdown-labelhtml){display:flex;gap:0.5rem;align-items:center;color:var(--nylas-base-900)}select-dropdown::part(sd_dropdown-labelhtml):hover{color:var(--nylas-primary)}.card-wrapper{position:absolute;top:0;left:0;height:calc(100% + 4rem);width:-webkit-fill-available;width:-moz-available;width:fill-available;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(0, 0, 0, 0.6);z-index:2;border-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.card-wrapper{justify-content:start;height:100%}}.card-modal{background:var(--nylas-base-0);display:flex;flex-direction:column;font-family:var(--nylas-font-family);background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);padding:32px;width:562px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.card-modal{width:auto;border-radius:0px}}.description.title-desc{margin-bottom:2rem}.description p{margin:0;font-size:18px;color:var(--nylas-base-600)}.footer{margin-top:1rem;padding-top:1rem;display:flex;justify-content:flex-end;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.close-button{width:100%;display:flex;justify-content:flex-end}.close-button button-component button{padding:0;height:auto}.close-button button-component button:hover{background-color:transparent !important}button-component{--dot-color:var(--nylas-base-700)}', ae = ee;
var ne = function(t, a, n, i) {
  var o = arguments.length, s = o < 3 ? a : i === null ? i = Object.getOwnPropertyDescriptor(a, n) : i, b;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    s = Reflect.decorate(t, a, n, i);
  else
    for (var l = t.length - 1; l >= 0; l--)
      (b = t[l]) && (s = (o < 3 ? b(s) : o > 3 ? b(a, n, s) : b(a, n)) || s);
  return o > 3 && s && Object.defineProperty(a, n, s), s;
}, Y = function(t, a) {
  if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
    return Reflect.metadata(t, a);
};
const Et = class {
  constructor(t) {
    q(this, t), this.initListConfigurations = k(this, "initListConfigurations", 7), this.createButtonClick = k(this, "createButtonClick", 7), this.editButtonClick = k(this, "editButtonClick", 7), this.deleteButtonClick = k(this, "deleteButtonClick", 7), this.configurations = [], this.selectedLanguage = void 0, this.schedulerPreviewLink = "", this.listConfigurationsNextCursor = void 0, this.state = "loading", this.error = "", this.currentCursor = null, this.previousCursors = [], this.disableNextPageButton = !1, this.deleteConfigurationId = "", this.showDeleteButtonLoading = !1;
  }
  listConfigurationsNextCursorChangedHandler(t, a) {
    if (!t || t === a) {
      t === null && (this.disableNextPageButton = !0);
      return;
    }
    this.disableNextPageButton = !1, this.currentCursor = t;
  }
  selectedLanguageChangedHandler(t, a) {
    t !== a && d.changeLanguage(t);
  }
  connectedCallback() {
    u("[nylas-list-configurations]", "connectedCallback");
  }
  componentWillLoad() {
    u("[nylas-list-configurations]", "componentWillLoad"), this.configurations && this.configurations.length > 0 && (this.state = "loaded");
  }
  componentDidLoad() {
    u("[nylas-list-configurations]", "componentDidLoad"), this.initListConfigurations.emit({
      host: this.host
    });
  }
  disconnectedCallback() {
    u("[nylas-list-configurations]", "disconnectedCallback");
  }
  async handleNylasFormDropdownChanged(t) {
    var o;
    u("[nylas-list-configurations]", "handleNylasFormDropdownChanged", t.detail);
    const { value: a } = t.detail, [n, i] = a.split("-");
    switch (t.preventDefault(), n) {
      case "delete":
        this.deleteConfigurationId = (o = this.configurations[i]) == null ? void 0 : o.id;
        break;
      case "preview":
        window.open(tt(this.schedulerPreviewLink, this.configurations[i]), "_blank");
        break;
      case "copy":
        await navigator.clipboard.writeText(tt(this.schedulerPreviewLink, this.configurations[i]));
        break;
    }
  }
  async registerCallback() {
    this.initListConfigurations.emit({
      host: this.host
    });
  }
  async getState() {
    return this.state;
  }
  async setState(t) {
    this.state = t;
  }
  async setError(t) {
    this.error = t;
  }
  async hideDeleteConfirmation() {
    this.deleteConfigurationId = "", this.showDeleteButtonLoading = !1;
  }
  closeModal(t) {
    t.preventDefault(), this.deleteConfigurationId = "";
  }
  handleConfirmDeleteButtonClicked(t) {
    t.preventDefault(), this.showDeleteButtonLoading = !0;
    const a = this.configurations.find((n) => n.id === this.deleteConfigurationId);
    a && (a != null && a.id) && this.deleteButtonClick.emit({ host: this.host, configuration: a });
  }
  getDurationString(t) {
    const a = Math.floor(t / 60), n = t % 60;
    return `${a || ""} ${a ? `${a > 1 ? "hours" : "hour"}` : ""} ${n || ""} ${n ? `${n > 1 ? "mins" : "min"}` : ""}`;
  }
  getActionLabelHTML(t) {
    const a = {
      display: "inline-flex",
      alignItems: "center",
      gap: "0.5rem"
    }, n = {
      color: "var(--nylas-error)"
    };
    switch (t) {
      case "preview":
        return e("span", { style: a }, e("eye-icon", { width: "16", height: "16" }), d.t("nylasListConfigurations.previewButtonText"));
      case "copy":
        return e("span", { style: a }, e("copy-icon", { width: "16", height: "16" }), d.t("nylasListConfigurations.copyLinkButtonText"));
      case "delete":
        return e("span", { style: { ...a, ...n } }, e("delete-icon", { width: "15", height: "17" }), d.t("nylasListConfigurations.deleteButtonText"));
      default:
        return "";
    }
  }
  previousPageClickedHandler() {
    if (this.previousCursors.length === 0)
      return;
    this.currentCursor = this.previousCursors.pop() || null;
    const t = this.previousCursors[this.previousCursors.length - 1] || void 0;
    this.initListConfigurations.emit({
      host: this.host,
      cursor: t
    });
  }
  nextPageClickedHandler() {
    this.currentCursor && (this.previousCursors = [...this.previousCursors, this.currentCursor], this.initListConfigurations.emit({
      host: this.host,
      cursor: this.currentCursor
    }));
  }
  render() {
    var t;
    return e(Tt, null, e("div", { class: "header" }, e("div", { class: "description" }, e("h2", null, d.t("allSchedulingPages")), e("p", null, d.t("createAndManageSchedulingPages"))), this.configurations && this.configurations.length > 0 && e("div", { class: "actions" }, e("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
      this.createButtonClick.emit(this.host);
    } }, d.t("createNewSchedulingPageButtonText")))), e("div", { class: "configurations" }, e("div", { class: "table-container" }, e("table", { class: {
      "no-configurations": this.state !== "loading" && (!this.configurations || this.configurations.length === 0)
    } }, e("tr", { class: {
      hide: this.state === "loading" || this.configurations && this.configurations.length === 0
    } }, e("th", null, d.t("pageTitle")), e("th", null, d.t("durationTitle")), e("th", null)), this.state === "loading" && e("tr", { class: "no-configurations" }, e("td", { colSpan: 3 }, e("div", null, e("h3", null, d.t("loading"), "..."), e("p", null, d.t("loadingPagesDescription"))))), this.state !== "loading" && (!this.configurations || this.configurations.length === 0) && e("tr", { class: "no-configurations" }, e("td", { colSpan: 3 }, e("div", null, e("calendar-icon", { width: "48", height: "48" }), e("h3", null, d.t("noSchedulingPages")), e("p", null, d.t("createFirstSchedulingPage")), e("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
      this.createButtonClick.emit(this.host);
    } }, d.t("createNewSchedulingPageButtonText"))))), this.state !== "loading" && ((t = this.configurations) == null ? void 0 : t.map((a, n) => {
      var o, s, b, l;
      const i = n === this.configurations.length - 1 || n === this.configurations.length - 2;
      return e("tr", { key: a == null ? void 0 : a.id }, e("td", null, e("div", { class: "title" }, e("div", { class: "config-event-title", title: (o = a == null ? void 0 : a.event_booking) == null ? void 0 : o.title }, (s = a == null ? void 0 : a.event_booking) == null ? void 0 : s.title), e("div", { class: "config-event-description" }, (b = a == null ? void 0 : a.event_booking) == null ? void 0 : b.description))), e("td", null, e("div", { class: "duration" }, this.getDurationString((l = a == null ? void 0 : a.availability) == null ? void 0 : l.duration_minutes))), e("td", null, e("div", { class: "actions" }, e("button-component", { variant: "basic", key: `edit-${n}`, clickHandler: (h) => {
        h.preventDefault(), this.editButtonClick.emit({ host: this.host, configuration: a });
      } }, e("edit-icon", { width: "16", height: "16" }), d.t("editSchedulingPageButtonText")), e("select-dropdown", { class: {
        last: i
      }, name: "actions", options: [
        { value: `preview-${n}`, label: "Preview", labelHTML: this.getActionLabelHTML("preview") },
        { value: `copy-${n}`, label: "Copy link", labelHTML: this.getActionLabelHTML("copy") },
        { value: `delete-${n}`, label: "Delete", labelHTML: this.getActionLabelHTML("delete") }
      ], defaultSelectedOption: { value: "", label: "" }, dropdownButtonText: "...", withSearch: !1, withChevron: !1, exportparts: "sd_dropdown: actions__dropdown, sd_dropdown-button: actions__dropdown-button, sd_dropdown-content: actions__dropdown-content" }))));
    })))), e("div", { class: "pagination" }, e("button", { class: "arrow left", onClick: () => this.previousPageClickedHandler(), disabled: this.previousCursors.length <= 0 }, e("chevron-icon", null)), e("button", { class: "arrow right", onClick: () => this.nextPageClickedHandler(), disabled: this.disableNextPageButton }, e("chevron-icon", null)))), this.state === "error" && e("div", { class: "error-container" }, e("p", { class: "error" }, this.error)), !!this.deleteConfigurationId && e("div", { class: "card-wrapper" }, e("div", { class: "card-modal" }, e("div", { class: "close-button" }, e("button-component", { tooltip: "Close", id: "close", variant: "invisible", onClick: (a) => this.closeModal(a), part: "nfbf__close-button" }, e("close-icon", null))), e("div", { class: "header" }, e("h2", { slot: "card-title", part: "nfbf__title" }, d.t("deleteSchedulingPageTitle"))), e("div", { class: "description title-desc" }, e("p", null, d.t("deleteSchedulingPageDescription"))), e("div", { class: {
      footer: !0
    } }, e("button-component", { variant: "basic", onClick: (a) => this.closeModal(a), part: "nfbf__button-outline nfbf__cancel-cta" }, `${d.t("deleteSchedulingPageCancelButton")}`), e("button-component", { variant: "destructive", onClick: (a) => this.handleConfirmDeleteButtonClicked(a), disabled: this.showDeleteButtonLoading, isLoading: this.showDeleteButtonLoading, part: "nfbf__button-outline nfbf__reschedule-cta" }, `${d.t("deleteSchedulingPageConfirmButton")}`)))));
  }
  get host() {
    return Ft(this);
  }
  static get watchers() {
    return {
      listConfigurationsNextCursor: ["listConfigurationsNextCursorChangedHandler"],
      selectedLanguage: ["selectedLanguageChangedHandler"]
    };
  }
};
ne([
  Bt({
    name: "nylas-list-configurations",
    stateToProps: /* @__PURE__ */ new Map([
      ["schedulerConfig.configurations", "configurations"],
      ["schedulerConfig.listConfigurationsNextCursor", "listConfigurationsNextCursor"],
      ["schedulerConfig.selectedLanguage", "selectedLanguage"]
    ]),
    localPropsToProp: /* @__PURE__ */ new Map([["schedulerPreviewLink", "schedulerPreviewLink"]]),
    eventToProps: {
      initListConfigurations: async (t, a) => {
        const { host: n, cursor: i } = t.detail;
        await n.setState("loading");
        const [o, s] = await a.schedulerConfig.getConfigurations(i);
        if (!o && s && s.message) {
          await n.setState("error"), await n.setError(s.message);
          return;
        }
        await n.setState("loaded");
      },
      createButtonClick: async (t, a) => {
        a.schedulerConfigStore.resetSelectedConfiguration(), a.schedulerConfigStore.state.action = "create";
      },
      deleteButtonClick: async (t, a) => {
        const { host: n, configuration: i } = t.detail, [o, s] = await a.schedulerConfig.deleteConfiguration(i.id);
        !o && s && s.message && (await n.setState("error"), await n.setError(s.message)), await n.hideDeleteConfirmation();
      },
      editButtonClick: async (t, a) => {
        const { configuration: n } = t.detail;
        a.schedulerConfigStore.state.selectedConfiguration = n, a.schedulerConfigStore.state.action = "edit";
      }
    },
    fireRegisterEvent: !0
  }),
  Y("design:type", Function),
  Y("design:paramtypes", []),
  Y("design:returntype", void 0)
], Et.prototype, "render", null);
Et.style = ae;
export {
  Gt as google_logo_icon,
  Kt as microsoft_logo_icon,
  Pt as nylas_editor_tabs,
  Et as nylas_list_configurations
};
